

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jul 26 23:52:54 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43     0000                     
    44                           ; Version 2.40
    45                           ; Generated 17/11/2021 GMT
    46                           ; 
    47                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution. Publication is not required when
    61                           ;        this file is used in an embedded application.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F887 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79     0000                     	;# 
    80     0001                     	;# 
    81     0002                     	;# 
    82     0003                     	;# 
    83     0004                     	;# 
    84     0005                     	;# 
    85     0006                     	;# 
    86     0007                     	;# 
    87     0008                     	;# 
    88     0009                     	;# 
    89     000A                     	;# 
    90     000B                     	;# 
    91     000C                     	;# 
    92     000D                     	;# 
    93     000E                     	;# 
    94     000E                     	;# 
    95     000F                     	;# 
    96     0010                     	;# 
    97     0011                     	;# 
    98     0012                     	;# 
    99     0013                     	;# 
   100     0014                     	;# 
   101     0015                     	;# 
   102     0015                     	;# 
   103     0016                     	;# 
   104     0017                     	;# 
   105     0018                     	;# 
   106     0019                     	;# 
   107     001A                     	;# 
   108     001B                     	;# 
   109     001B                     	;# 
   110     001C                     	;# 
   111     001D                     	;# 
   112     001E                     	;# 
   113     001F                     	;# 
   114     0081                     	;# 
   115     0085                     	;# 
   116     0086                     	;# 
   117     0087                     	;# 
   118     0088                     	;# 
   119     0089                     	;# 
   120     008C                     	;# 
   121     008D                     	;# 
   122     008E                     	;# 
   123     008F                     	;# 
   124     0090                     	;# 
   125     0091                     	;# 
   126     0092                     	;# 
   127     0093                     	;# 
   128     0093                     	;# 
   129     0093                     	;# 
   130     0094                     	;# 
   131     0095                     	;# 
   132     0096                     	;# 
   133     0097                     	;# 
   134     0098                     	;# 
   135     0099                     	;# 
   136     009A                     	;# 
   137     009B                     	;# 
   138     009C                     	;# 
   139     009D                     	;# 
   140     009E                     	;# 
   141     009F                     	;# 
   142     0105                     	;# 
   143     0107                     	;# 
   144     0108                     	;# 
   145     0109                     	;# 
   146     010C                     	;# 
   147     010C                     	;# 
   148     010D                     	;# 
   149     010E                     	;# 
   150     010F                     	;# 
   151     0185                     	;# 
   152     0187                     	;# 
   153     0188                     	;# 
   154     0189                     	;# 
   155     018C                     	;# 
   156     018D                     	;# 
   157     0000                     	;# 
   158     0001                     	;# 
   159     0002                     	;# 
   160     0003                     	;# 
   161     0004                     	;# 
   162     0005                     	;# 
   163     0006                     	;# 
   164     0007                     	;# 
   165     0008                     	;# 
   166     0009                     	;# 
   167     000A                     	;# 
   168     000B                     	;# 
   169     000C                     	;# 
   170     000D                     	;# 
   171     000E                     	;# 
   172     000E                     	;# 
   173     000F                     	;# 
   174     0010                     	;# 
   175     0011                     	;# 
   176     0012                     	;# 
   177     0013                     	;# 
   178     0014                     	;# 
   179     0015                     	;# 
   180     0015                     	;# 
   181     0016                     	;# 
   182     0017                     	;# 
   183     0018                     	;# 
   184     0019                     	;# 
   185     001A                     	;# 
   186     001B                     	;# 
   187     001B                     	;# 
   188     001C                     	;# 
   189     001D                     	;# 
   190     001E                     	;# 
   191     001F                     	;# 
   192     0081                     	;# 
   193     0085                     	;# 
   194     0086                     	;# 
   195     0087                     	;# 
   196     0088                     	;# 
   197     0089                     	;# 
   198     008C                     	;# 
   199     008D                     	;# 
   200     008E                     	;# 
   201     008F                     	;# 
   202     0090                     	;# 
   203     0091                     	;# 
   204     0092                     	;# 
   205     0093                     	;# 
   206     0093                     	;# 
   207     0093                     	;# 
   208     0094                     	;# 
   209     0095                     	;# 
   210     0096                     	;# 
   211     0097                     	;# 
   212     0098                     	;# 
   213     0099                     	;# 
   214     009A                     	;# 
   215     009B                     	;# 
   216     009C                     	;# 
   217     009D                     	;# 
   218     009E                     	;# 
   219     009F                     	;# 
   220     0105                     	;# 
   221     0107                     	;# 
   222     0108                     	;# 
   223     0109                     	;# 
   224     010C                     	;# 
   225     010C                     	;# 
   226     010D                     	;# 
   227     010E                     	;# 
   228     010F                     	;# 
   229     0185                     	;# 
   230     0187                     	;# 
   231     0188                     	;# 
   232     0189                     	;# 
   233     018C                     	;# 
   234     018D                     	;# 
   235     0000                     	;# 
   236     0001                     	;# 
   237     0002                     	;# 
   238     0003                     	;# 
   239     0004                     	;# 
   240     0005                     	;# 
   241     0006                     	;# 
   242     0007                     	;# 
   243     0008                     	;# 
   244     0009                     	;# 
   245     000A                     	;# 
   246     000B                     	;# 
   247     000C                     	;# 
   248     000D                     	;# 
   249     000E                     	;# 
   250     000E                     	;# 
   251     000F                     	;# 
   252     0010                     	;# 
   253     0011                     	;# 
   254     0012                     	;# 
   255     0013                     	;# 
   256     0014                     	;# 
   257     0015                     	;# 
   258     0015                     	;# 
   259     0016                     	;# 
   260     0017                     	;# 
   261     0018                     	;# 
   262     0019                     	;# 
   263     001A                     	;# 
   264     001B                     	;# 
   265     001B                     	;# 
   266     001C                     	;# 
   267     001D                     	;# 
   268     001E                     	;# 
   269     001F                     	;# 
   270     0081                     	;# 
   271     0085                     	;# 
   272     0086                     	;# 
   273     0087                     	;# 
   274     0088                     	;# 
   275     0089                     	;# 
   276     008C                     	;# 
   277     008D                     	;# 
   278     008E                     	;# 
   279     008F                     	;# 
   280     0090                     	;# 
   281     0091                     	;# 
   282     0092                     	;# 
   283     0093                     	;# 
   284     0093                     	;# 
   285     0093                     	;# 
   286     0094                     	;# 
   287     0095                     	;# 
   288     0096                     	;# 
   289     0097                     	;# 
   290     0098                     	;# 
   291     0099                     	;# 
   292     009A                     	;# 
   293     009B                     	;# 
   294     009C                     	;# 
   295     009D                     	;# 
   296     009E                     	;# 
   297     009F                     	;# 
   298     0105                     	;# 
   299     0107                     	;# 
   300     0108                     	;# 
   301     0109                     	;# 
   302     010C                     	;# 
   303     010C                     	;# 
   304     010D                     	;# 
   305     010E                     	;# 
   306     010F                     	;# 
   307     0185                     	;# 
   308     0187                     	;# 
   309     0188                     	;# 
   310     0189                     	;# 
   311     018C                     	;# 
   312     018D                     	;# 
   313     0000                     	;# 
   314     0001                     	;# 
   315     0002                     	;# 
   316     0003                     	;# 
   317     0004                     	;# 
   318     0005                     	;# 
   319     0006                     	;# 
   320     0007                     	;# 
   321     0008                     	;# 
   322     0009                     	;# 
   323     000A                     	;# 
   324     000B                     	;# 
   325     000C                     	;# 
   326     000D                     	;# 
   327     000E                     	;# 
   328     000E                     	;# 
   329     000F                     	;# 
   330     0010                     	;# 
   331     0011                     	;# 
   332     0012                     	;# 
   333     0013                     	;# 
   334     0014                     	;# 
   335     0015                     	;# 
   336     0015                     	;# 
   337     0016                     	;# 
   338     0017                     	;# 
   339     0018                     	;# 
   340     0019                     	;# 
   341     001A                     	;# 
   342     001B                     	;# 
   343     001B                     	;# 
   344     001C                     	;# 
   345     001D                     	;# 
   346     001E                     	;# 
   347     001F                     	;# 
   348     0081                     	;# 
   349     0085                     	;# 
   350     0086                     	;# 
   351     0087                     	;# 
   352     0088                     	;# 
   353     0089                     	;# 
   354     008C                     	;# 
   355     008D                     	;# 
   356     008E                     	;# 
   357     008F                     	;# 
   358     0090                     	;# 
   359     0091                     	;# 
   360     0092                     	;# 
   361     0093                     	;# 
   362     0093                     	;# 
   363     0093                     	;# 
   364     0094                     	;# 
   365     0095                     	;# 
   366     0096                     	;# 
   367     0097                     	;# 
   368     0098                     	;# 
   369     0099                     	;# 
   370     009A                     	;# 
   371     009B                     	;# 
   372     009C                     	;# 
   373     009D                     	;# 
   374     009E                     	;# 
   375     009F                     	;# 
   376     0105                     	;# 
   377     0107                     	;# 
   378     0108                     	;# 
   379     0109                     	;# 
   380     010C                     	;# 
   381     010C                     	;# 
   382     010D                     	;# 
   383     010E                     	;# 
   384     010F                     	;# 
   385     0185                     	;# 
   386     0187                     	;# 
   387     0188                     	;# 
   388     0189                     	;# 
   389     018C                     	;# 
   390     018D                     	;# 
   391     0000                     	;# 
   392     0001                     	;# 
   393     0002                     	;# 
   394     0003                     	;# 
   395     0004                     	;# 
   396     0005                     	;# 
   397     0006                     	;# 
   398     0007                     	;# 
   399     0008                     	;# 
   400     0009                     	;# 
   401     000A                     	;# 
   402     000B                     	;# 
   403     000C                     	;# 
   404     000D                     	;# 
   405     000E                     	;# 
   406     000E                     	;# 
   407     000F                     	;# 
   408     0010                     	;# 
   409     0011                     	;# 
   410     0012                     	;# 
   411     0013                     	;# 
   412     0014                     	;# 
   413     0015                     	;# 
   414     0015                     	;# 
   415     0016                     	;# 
   416     0017                     	;# 
   417     0018                     	;# 
   418     0019                     	;# 
   419     001A                     	;# 
   420     001B                     	;# 
   421     001B                     	;# 
   422     001C                     	;# 
   423     001D                     	;# 
   424     001E                     	;# 
   425     001F                     	;# 
   426     0081                     	;# 
   427     0085                     	;# 
   428     0086                     	;# 
   429     0087                     	;# 
   430     0088                     	;# 
   431     0089                     	;# 
   432     008C                     	;# 
   433     008D                     	;# 
   434     008E                     	;# 
   435     008F                     	;# 
   436     0090                     	;# 
   437     0091                     	;# 
   438     0092                     	;# 
   439     0093                     	;# 
   440     0093                     	;# 
   441     0093                     	;# 
   442     0094                     	;# 
   443     0095                     	;# 
   444     0096                     	;# 
   445     0097                     	;# 
   446     0098                     	;# 
   447     0099                     	;# 
   448     009A                     	;# 
   449     009B                     	;# 
   450     009C                     	;# 
   451     009D                     	;# 
   452     009E                     	;# 
   453     009F                     	;# 
   454     0105                     	;# 
   455     0107                     	;# 
   456     0108                     	;# 
   457     0109                     	;# 
   458     010C                     	;# 
   459     010C                     	;# 
   460     010D                     	;# 
   461     010E                     	;# 
   462     010F                     	;# 
   463     0185                     	;# 
   464     0187                     	;# 
   465     0188                     	;# 
   466     0189                     	;# 
   467     018C                     	;# 
   468     018D                     	;# 
   469                           
   470                           	psect	strings
   471     0800                     __pstrings:
   472     0800                     stringtab:
   473     0800                     __stringtab:
   474                           
   475                           ;	String table - string pointers are 1 byte each
   476     0800  1BFF               	btfsc	btemp+1,7
   477     0801  280A               	ljmp	stringcode
   478     0802  1383               	bcf	3,7
   479     0803  187F               	btfsc	btemp+1,0
   480     0804  1783               	bsf	3,7
   481     0805  0800               	movf	0,w
   482     0806  0A84               	incf	4,f
   483     0807  1903               	skipnz
   484     0808  0AFF               	incf	btemp+1,f
   485     0809  0008               	return
   486     080A                     stringcode:
   487     080A                     stringdir:
   488     080A  3008               	movlw	high stringdir
   489     080B  008A               	movwf	10
   490     080C  0804               	movf	4,w
   491     080D  0A84               	incf	4,f
   492     080E  0782               	addwf	2,f
   493     080F                     __stringbase:
   494     080F  3400               	retlw	0
   495     0810                     __end_of__stringtab:
   496     0810                     _dpowers:
   497     0810  3401               	retlw	1
   498     0811  3400               	retlw	0
   499     0812  340A               	retlw	10
   500     0813  3400               	retlw	0
   501     0814  3464               	retlw	100
   502     0815  3400               	retlw	0
   503     0816  34E8               	retlw	232
   504     0817  3403               	retlw	3
   505     0818  3410               	retlw	16
   506     0819  3427               	retlw	39
   507     081A                     __end_of_dpowers:
   508     0018                     _RCSTAbits	set	24
   509     001E                     _ADRESH	set	30
   510     0007                     _PORTCbits	set	7
   511     0008                     _PORTDbits	set	8
   512     0019                     _TXREG	set	25
   513     000B                     _INTCONbits	set	11
   514     0009                     _PORTE	set	9
   515     0008                     _PORTD	set	8
   516     0007                     _PORTC	set	7
   517     0006                     _PORTB	set	6
   518     0005                     _PORTA	set	5
   519     001A                     _RCREG	set	26
   520     000C                     _PIR1bits	set	12
   521     001F                     _ADCON0bits	set	31
   522     0098                     _TXSTAbits	set	152
   523     0099                     _SPBRG	set	153
   524     009F                     _ADCON1bits	set	159
   525     008C                     _PIE1bits	set	140
   526     008F                     _OSCCONbits	set	143
   527     0088                     _TRISD	set	136
   528     0087                     _TRISC	set	135
   529     0086                     _TRISB	set	134
   530     0189                     _ANSELH	set	393
   531     0188                     _ANSEL	set	392
   532     081A                     STR_5:
   533     081A  3456               	retlw	86	;'V'
   534     081B  346F               	retlw	111	;'o'
   535     081C  346C               	retlw	108	;'l'
   536     081D  3474               	retlw	116	;'t'
   537     081E  3461               	retlw	97	;'a'
   538     081F  346A               	retlw	106	;'j'
   539     0820  3465               	retlw	101	;'e'
   540     0821  3420               	retlw	32	;' '
   541     0822  3450               	retlw	80	;'P'
   542     0823  346F               	retlw	111	;'o'
   543     0824  3474               	retlw	116	;'t'
   544     0825  3465               	retlw	101	;'e'
   545     0826  346E               	retlw	110	;'n'
   546     0827  3463               	retlw	99	;'c'
   547     0828  3469               	retlw	105	;'i'
   548     0829  346F               	retlw	111	;'o'
   549     082A  346D               	retlw	109	;'m'
   550     082B  3465               	retlw	101	;'e'
   551     082C  3474               	retlw	116	;'t'
   552     082D  3472               	retlw	114	;'r'
   553     082E  346F               	retlw	111	;'o'
   554     082F  343A               	retlw	58	;':'
   555     0830  3420               	retlw	32	;' '
   556     0831  340D               	retlw	13
   557     0832  340A               	retlw	10
   558     0833  3400               	retlw	0
   559     0834                     STR_3:
   560     0834  3425               	retlw	37	;'%'
   561     0835  3464               	retlw	100	;'d'
   562     0836  342E               	retlw	46	;'.'
   563     0837  3425               	retlw	37	;'%'
   564     0838  3464               	retlw	100	;'d'
   565     0839  3425               	retlw	37	;'%'
   566     083A  3464               	retlw	100	;'d'
   567     083B  3456               	retlw	86	;'V'
   568     083C  3400               	retlw	0
   569     083D                     STR_2:
   570     083D  3443               	retlw	67	;'C'
   571     083E  346F               	retlw	111	;'o'
   572     083F  3475               	retlw	117	;'u'
   573     0840  346E               	retlw	110	;'n'
   574     0841  3474               	retlw	116	;'t'
   575     0842  343A               	retlw	58	;':'
   576     0843  3400               	retlw	0
   577     0844                     STR_1:
   578     0844  3450               	retlw	80	;'P'
   579     0845  346F               	retlw	111	;'o'
   580     0846  3474               	retlw	116	;'t'
   581     0847  3431               	retlw	49	;'1'
   582     0848  343A               	retlw	58	;':'
   583     0849  3400               	retlw	0
   584     084A                     STR_4:
   585     084A  3425               	retlw	37	;'%'
   586     084B  3430               	retlw	48	;'0'
   587     084C  3433               	retlw	51	;'3'
   588     084D  3464               	retlw	100	;'d'
   589     084E  3400               	retlw	0
   590     084F                     STR_7:
   591     084F  340A               	retlw	10
   592     0850  340D               	retlw	13
   593     0851  3400               	retlw	0
   594     0834                     
   595                           	psect	cinit
   596     0015                     start_initialization:	
   597                           ; #config settings
   598                           
   599     0015                     __initialization:
   600                           
   601                           ; Clear objects allocated to BANK0
   602     0015  1383               	bcf	3,7	;select IRP bank0
   603     0016  3042               	movlw	low __pbssBANK0
   604     0017  0084               	movwf	4
   605     0018  3053               	movlw	low (__pbssBANK0+17)
   606     0019  120A  158A  248B  120A  118A  	fcall	clear_ram0
   607     001E                     end_of_initialization:	
   608                           ;End of C runtime variable initialization code
   609                           
   610     001E                     __end_of__initialization:
   611     001E  0183               	clrf	3
   612     001F  120A  118A  2BBE   	ljmp	_main	;jump to C main() function
   613                           
   614                           	psect	bssBANK0
   615     0042                     __pbssBANK0:
   616     0042                     _counter:
   617     0042                     	ds	2
   618     0044                     _voltage1:
   619     0044                     	ds	2
   620     0046                     _select:
   621     0046                     	ds	2
   622     0048                     _adc_var:
   623     0048                     	ds	2
   624     004A                     _bandera:
   625     004A                     	ds	2
   626     004C                     _cen_volt:
   627     004C                     	ds	1
   628     004D                     _dec_volt:
   629     004D                     	ds	1
   630     004E                     _uni_volt:
   631     004E                     	ds	1
   632     004F                     _display:
   633     004F                     	ds	3
   634     0052                     _display_counter:
   635     0052                     	ds	1
   636                           
   637                           	psect	clrtext
   638     0C8B                     clear_ram0:	
   639                           ;	Called with FSR containing the base address, and
   640                           ;	W with the last address+1
   641                           
   642     0C8B  0064               	clrwdt	;clear the watchdog before getting into this loop
   643     0C8C                     clrloop0:
   644     0C8C  0180               	clrf	0	;clear RAM location pointed to by FSR
   645     0C8D  0A84               	incf	4,f	;increment pointer
   646     0C8E  0604               	xorwf	4,w	;XOR with final address
   647     0C8F  1903               	btfsc	3,2	;have we reached the end yet?
   648     0C90  3400               	retlw	0	;all done for this memory range, return
   649     0C91  0604               	xorwf	4,w	;XOR again to restore value
   650     0C92  2C8C               	goto	clrloop0	;do the next byte
   651                           
   652                           	psect	cstackBANK1
   653     00A0                     __pcstackBANK1:
   654     00A0                     ??_Lcd_Init:
   655     00A0                     ??_Lcd_Write_String:	
   656                           ; 1 bytes @ 0x0
   657                           
   658     00A0                     Lcd_Set_Cursor@a:	
   659                           ; 1 bytes @ 0x0
   660                           
   661     00A0                     ___lwdiv@counter:	
   662                           ; 1 bytes @ 0x0
   663                           
   664     00A0                     ___wmul@product:	
   665                           ; 1 bytes @ 0x0
   666                           
   667                           
   668                           ; 2 bytes @ 0x0
   669     00A0                     	ds	1
   670     00A1                     Lcd_Set_Cursor@temp:
   671     00A1                     ___lwdiv@quotient:	
   672                           ; 1 bytes @ 0x1
   673                           
   674                           
   675                           ; 2 bytes @ 0x1
   676     00A1                     	ds	1
   677     00A2                     ?___awdiv:
   678     00A2                     ___awdiv@divisor:	
   679                           ; 2 bytes @ 0x2
   680                           
   681                           
   682                           ; 2 bytes @ 0x2
   683     00A2                     	ds	1
   684     00A3                     ?___lwmod:
   685     00A3                     Lcd_Write_String@i:	
   686                           ; 2 bytes @ 0x3
   687                           
   688     00A3                     ___lwmod@divisor:	
   689                           ; 2 bytes @ 0x3
   690                           
   691                           
   692                           ; 2 bytes @ 0x3
   693     00A3                     	ds	1
   694     00A4                     ___awdiv@dividend:
   695                           
   696                           ; 2 bytes @ 0x4
   697     00A4                     	ds	1
   698     00A5                     ___lwmod@dividend:
   699                           
   700                           ; 2 bytes @ 0x5
   701     00A5                     	ds	1
   702     00A6                     ___awdiv@counter:
   703                           
   704                           ; 1 bytes @ 0x6
   705     00A6                     	ds	1
   706     00A7                     ??___lwmod:
   707     00A7                     ___awdiv@sign:	
   708                           ; 1 bytes @ 0x7
   709                           
   710                           
   711                           ; 1 bytes @ 0x7
   712     00A7                     	ds	1
   713     00A8                     ___lwmod@counter:
   714     00A8                     ___awdiv@quotient:	
   715                           ; 1 bytes @ 0x8
   716                           
   717                           
   718                           ; 2 bytes @ 0x8
   719     00A8                     	ds	1
   720     00A9                     ?_sprintf:
   721     00A9                     sprintf@f:	
   722                           ; 2 bytes @ 0x9
   723                           
   724                           
   725                           ; 1 bytes @ 0x9
   726     00A9                     	ds	1
   727     00AA                     ?_map_adc_volt:
   728     00AA                     ?___awmod:	
   729                           ; 2 bytes @ 0xA
   730                           
   731     00AA                     map_adc_volt@value:	
   732                           ; 2 bytes @ 0xA
   733                           
   734     00AA                     ___awmod@divisor:	
   735                           ; 2 bytes @ 0xA
   736                           
   737                           
   738                           ; 2 bytes @ 0xA
   739     00AA                     	ds	2
   740     00AC                     map_adc_volt@inputmin:
   741     00AC                     ___awmod@dividend:	
   742                           ; 2 bytes @ 0xC
   743                           
   744                           
   745                           ; 2 bytes @ 0xC
   746     00AC                     	ds	2
   747     00AE                     ??___awmod:
   748     00AE                     map_adc_volt@inputmax:	
   749                           ; 1 bytes @ 0xE
   750                           
   751                           
   752                           ; 2 bytes @ 0xE
   753     00AE                     	ds	1
   754     00AF                     ___awmod@counter:
   755                           
   756                           ; 1 bytes @ 0xF
   757     00AF                     	ds	1
   758     00B0                     ??_sprintf:
   759     00B0                     ___awmod@sign:	
   760                           ; 1 bytes @ 0x10
   761                           
   762     00B0                     map_adc_volt@outmin:	
   763                           ; 1 bytes @ 0x10
   764                           
   765                           
   766                           ; 2 bytes @ 0x10
   767     00B0                     	ds	2
   768     00B2                     map_adc_volt@outmax:
   769                           
   770                           ; 2 bytes @ 0x12
   771     00B2                     	ds	1
   772     00B3                     sprintf@ap:
   773                           
   774                           ; 1 bytes @ 0x13
   775     00B3                     	ds	1
   776     00B4                     sprintf@prec:
   777                           
   778                           ; 1 bytes @ 0x14
   779     00B4                     	ds	1
   780     00B5                     sprintf@val:
   781                           
   782                           ; 2 bytes @ 0x15
   783     00B5                     	ds	2
   784     00B7                     sprintf@flag:
   785                           
   786                           ; 1 bytes @ 0x17
   787     00B7                     	ds	1
   788     00B8                     sprintf@width:
   789                           
   790                           ; 2 bytes @ 0x18
   791     00B8                     	ds	2
   792     00BA                     sprintf@sp:
   793                           
   794                           ; 1 bytes @ 0x1A
   795     00BA                     	ds	1
   796     00BB                     sprintf@c:
   797                           
   798                           ; 1 bytes @ 0x1B
   799     00BB                     	ds	1
   800     00BC                     ??_main:
   801                           
   802                           ; 1 bytes @ 0x1C
   803     00BC                     	ds	6
   804                           
   805                           	psect	cstackCOMMON
   806     0070                     __pcstackCOMMON:
   807     0070                     ?_isdigit:
   808     0070                     ?i1_isdigit:	
   809                           ; 1 bit 
   810                           
   811     0070                     ?_setup:	
   812                           ; 1 bit 
   813                           
   814     0070                     ?_Lcd_Init:	
   815                           ; 1 bytes @ 0x0
   816                           
   817     0070                     ?_Lcd_Clear:	
   818                           ; 1 bytes @ 0x0
   819                           
   820     0070                     ?_cadena:	
   821                           ; 1 bytes @ 0x0
   822                           
   823     0070                     ?_main:	
   824                           ; 1 bytes @ 0x0
   825                           
   826     0070                     ?_isr:	
   827                           ; 1 bytes @ 0x0
   828                           
   829     0070                     ?_Lcd_Port:	
   830                           ; 1 bytes @ 0x0
   831                           
   832     0070                     ?_Lcd_Cmd:	
   833                           ; 1 bytes @ 0x0
   834                           
   835     0070                     ?_Lcd_Write_Char:	
   836                           ; 1 bytes @ 0x0
   837                           
   838     0070                     ??i1_isdigit:	
   839                           ; 1 bytes @ 0x0
   840                           
   841     0070                     ?_adc_read:	
   842                           ; 1 bytes @ 0x0
   843                           
   844     0070                     ?i1___wmul:	
   845                           ; 2 bytes @ 0x0
   846                           
   847     0070                     ?i1___lwdiv:	
   848                           ; 2 bytes @ 0x0
   849                           
   850     0070                     i1_isdigit$1045:	
   851                           ; 2 bytes @ 0x0
   852                           
   853     0070                     cadena@cursor:	
   854                           ; 1 bytes @ 0x0
   855                           
   856     0070                     i1___wmul@multiplier:	
   857                           ; 2 bytes @ 0x0
   858                           
   859     0070                     i1___lwdiv@divisor:	
   860                           ; 2 bytes @ 0x0
   861                           
   862                           
   863                           ; 2 bytes @ 0x0
   864     0070                     	ds	1
   865     0071                     i1isdigit@c:
   866                           
   867                           ; 1 bytes @ 0x1
   868     0071                     	ds	1
   869     0072                     ??_adc_read:
   870     0072                     ??_cadena:	
   871                           ; 1 bytes @ 0x2
   872                           
   873     0072                     i1___wmul@multiplicand:	
   874                           ; 1 bytes @ 0x2
   875                           
   876     0072                     i1___lwdiv@dividend:	
   877                           ; 2 bytes @ 0x2
   878                           
   879                           
   880                           ; 2 bytes @ 0x2
   881     0072                     	ds	2
   882     0074                     ??i1___wmul:
   883     0074                     ??i1___lwdiv:	
   884                           ; 1 bytes @ 0x4
   885                           
   886     0074                     i1___wmul@product:	
   887                           ; 1 bytes @ 0x4
   888                           
   889                           
   890                           ; 2 bytes @ 0x4
   891     0074                     	ds	1
   892     0075                     i1___lwdiv@quotient:
   893                           
   894                           ; 2 bytes @ 0x5
   895     0075                     	ds	2
   896     0077                     i1___lwdiv@counter:
   897                           
   898                           ; 1 bytes @ 0x7
   899     0077                     	ds	1
   900     0078                     ?i1___lwmod:
   901     0078                     i1___lwmod@divisor:	
   902                           ; 2 bytes @ 0x8
   903                           
   904                           
   905                           ; 2 bytes @ 0x8
   906     0078                     	ds	2
   907     007A                     i1___lwmod@dividend:
   908                           
   909                           ; 2 bytes @ 0xA
   910     007A                     	ds	2
   911     007C                     ??i1___lwmod:
   912                           
   913                           ; 1 bytes @ 0xC
   914     007C                     	ds	1
   915     007D                     i1___lwmod@counter:
   916                           
   917                           ; 1 bytes @ 0xD
   918     007D                     	ds	1
   919                           
   920                           	psect	cstackBANK0
   921     0020                     __pcstackBANK0:
   922     0020                     ?i1_sprintf:
   923     0020                     i1sprintf@f:	
   924                           ; 2 bytes @ 0x0
   925                           
   926                           
   927                           ; 1 bytes @ 0x0
   928     0020                     	ds	7
   929     0027                     ??i1_sprintf:
   930                           
   931                           ; 1 bytes @ 0x7
   932     0027                     	ds	3
   933     002A                     i1sprintf@ap:
   934                           
   935                           ; 1 bytes @ 0xA
   936     002A                     	ds	1
   937     002B                     i1sprintf@prec:
   938                           
   939                           ; 1 bytes @ 0xB
   940     002B                     	ds	1
   941     002C                     i1sprintf@val:
   942                           
   943                           ; 2 bytes @ 0xC
   944     002C                     	ds	2
   945     002E                     i1sprintf@flag:
   946                           
   947                           ; 1 bytes @ 0xE
   948     002E                     	ds	1
   949     002F                     i1sprintf@width:
   950                           
   951                           ; 2 bytes @ 0xF
   952     002F                     	ds	2
   953     0031                     i1sprintf@sp:
   954                           
   955                           ; 1 bytes @ 0x11
   956     0031                     	ds	1
   957     0032                     i1sprintf@c:
   958                           
   959                           ; 1 bytes @ 0x12
   960     0032                     	ds	1
   961     0033                     ??_isr:
   962                           
   963                           ; 1 bytes @ 0x13
   964     0033                     	ds	10
   965     003D                     ??_setup:
   966     003D                     ?_UART_config:	
   967                           ; 1 bytes @ 0x1D
   968                           
   969     003D                     ?_adc_change_channel:	
   970                           ; 1 bytes @ 0x1D
   971                           
   972     003D                     ??_isdigit:	
   973                           ; 1 bytes @ 0x1D
   974                           
   975     003D                     ??_Lcd_Port:	
   976                           ; 1 bytes @ 0x1D
   977                           
   978     003D                     ?___wmul:	
   979                           ; 1 bytes @ 0x1D
   980                           
   981     003D                     ?___lwdiv:	
   982                           ; 2 bytes @ 0x1D
   983                           
   984     003D                     Lcd_Port@a:	
   985                           ; 2 bytes @ 0x1D
   986                           
   987     003D                     _isdigit$1045:	
   988                           ; 1 bytes @ 0x1D
   989                           
   990     003D                     adc_change_channel@channel:	
   991                           ; 1 bytes @ 0x1D
   992                           
   993     003D                     UART_config@baudrate:	
   994                           ; 2 bytes @ 0x1D
   995                           
   996     003D                     ___wmul@multiplier:	
   997                           ; 2 bytes @ 0x1D
   998                           
   999     003D                     ___lwdiv@divisor:	
  1000                           ; 2 bytes @ 0x1D
  1001                           
  1002                           
  1003                           ; 2 bytes @ 0x1D
  1004     003D                     	ds	1
  1005     003E                     ??_Lcd_Cmd:
  1006     003E                     ??_Lcd_Write_Char:	
  1007                           ; 1 bytes @ 0x1E
  1008                           
  1009     003E                     isdigit@c:	
  1010                           ; 1 bytes @ 0x1E
  1011                           
  1012                           
  1013                           ; 1 bytes @ 0x1E
  1014     003E                     	ds	1
  1015     003F                     ?_adc_init:
  1016     003F                     ??_UART_config:	
  1017                           ; 1 bytes @ 0x1F
  1018                           
  1019     003F                     ??_adc_change_channel:	
  1020                           ; 1 bytes @ 0x1F
  1021                           
  1022     003F                     Lcd_Write_Char@a:	
  1023                           ; 1 bytes @ 0x1F
  1024                           
  1025     003F                     adc_init@channel:	
  1026                           ; 1 bytes @ 0x1F
  1027                           
  1028     003F                     ___wmul@multiplicand:	
  1029                           ; 2 bytes @ 0x1F
  1030                           
  1031     003F                     ___lwdiv@dividend:	
  1032                           ; 2 bytes @ 0x1F
  1033                           
  1034                           
  1035                           ; 2 bytes @ 0x1F
  1036     003F                     	ds	1
  1037     0040                     ?_Lcd_Write_String:
  1038     0040                     Lcd_Cmd@a:	
  1039                           ; 1 bytes @ 0x20
  1040                           
  1041     0040                     Lcd_Write_String@a:	
  1042                           ; 1 bytes @ 0x20
  1043                           
  1044                           
  1045                           ; 2 bytes @ 0x20
  1046     0040                     	ds	1
  1047     0041                     ??_adc_init:
  1048     0041                     ??_Lcd_Clear:	
  1049                           ; 1 bytes @ 0x21
  1050                           
  1051     0041                     ?_Lcd_Set_Cursor:	
  1052                           ; 1 bytes @ 0x21
  1053                           
  1054     0041                     ??___wmul:	
  1055                           ; 1 bytes @ 0x21
  1056                           
  1057     0041                     ??___awdiv:	
  1058                           ; 1 bytes @ 0x21
  1059                           
  1060     0041                     ??___lwdiv:	
  1061                           ; 1 bytes @ 0x21
  1062                           
  1063     0041                     Lcd_Set_Cursor@b:	
  1064                           ; 1 bytes @ 0x21
  1065                           
  1066                           
  1067                           ; 1 bytes @ 0x21
  1068     0041                     	ds	1
  1069     0042                     ??_Lcd_Set_Cursor:
  1070     0042                     ??_map_adc_volt:	
  1071                           ; 1 bytes @ 0x22
  1072                           
  1073                           
  1074                           	psect	maintext
  1075     03BE                     __pmaintext:	
  1076                           ; 1 bytes @ 0x22
  1077 ;;
  1078 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  1079 ;;
  1080 ;; *************** function _main *****************
  1081 ;; Defined at:
  1082 ;;		line 58 in file "main.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : B00/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1096 ;;      Params:         0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0
  1098 ;;      Temps:          0       0       6       0       0
  1099 ;;      Totals:         0       0       6       0       0
  1100 ;;Total ram usage:        6 bytes
  1101 ;; Hardware stack levels required when called: 6
  1102 ;; This function calls:
  1103 ;;		_Lcd_Clear
  1104 ;;		_Lcd_Init
  1105 ;;		_Lcd_Set_Cursor
  1106 ;;		_Lcd_Write_String
  1107 ;;		_UART_config
  1108 ;;		___awdiv
  1109 ;;		___awmod
  1110 ;;		___wmul
  1111 ;;		_adc_init
  1112 ;;		_map_adc_volt
  1113 ;;		_setup
  1114 ;;		_sprintf
  1115 ;; This function is called by:
  1116 ;;		Startup code after reset
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120     03BE                     _main:	
  1121                           ;psect for function _main
  1122                           
  1123     03BE                     l2917:	
  1124                           ;incstack = 0
  1125                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1126                           
  1127                           
  1128                           ;main.c: 59:     setup();
  1129     03BE  120A  158A  24D0  120A  118A  	fcall	_setup
  1130                           
  1131                           ;main.c: 60:     adc_init(0);
  1132     03C3  3000               	movlw	0
  1133     03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1134     03C5  1303               	bcf	3,6	;RP1=0, select bank0
  1135     03C6  00BF               	movwf	adc_init@channel
  1136     03C7  00C0               	movwf	adc_init@channel+1
  1137     03C8  120A  158A  2538  120A  118A  	fcall	_adc_init
  1138                           
  1139                           ;main.c: 61:     UART_config(4800);
  1140     03CD  30C0               	movlw	192
  1141     03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1142     03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1143     03D0  00BD               	movwf	UART_config@baudrate
  1144     03D1  3012               	movlw	18
  1145     03D2  00BE               	movwf	UART_config@baudrate+1
  1146     03D3  120A  158A  251A  120A  118A  	fcall	_UART_config
  1147                           
  1148                           ;main.c: 64:     Lcd_Init();
  1149     03D8  120A  158A  2746  120A  118A  	fcall	_Lcd_Init
  1150                           
  1151                           ;main.c: 65:     Lcd_Clear();
  1152     03DD  120A  158A  249D  120A  118A  	fcall	_Lcd_Clear
  1153                           
  1154                           ;main.c: 66:     Lcd_Set_Cursor(1,1);
  1155     03E2  1283               	bcf	3,5	;RP0=0, select bank0
  1156     03E3  1303               	bcf	3,6	;RP1=0, select bank0
  1157     03E4  01C1               	clrf	Lcd_Set_Cursor@b
  1158     03E5  0AC1               	incf	Lcd_Set_Cursor@b,f
  1159     03E6  3001               	movlw	1
  1160     03E7  120A  158A  25A6  120A  118A  	fcall	_Lcd_Set_Cursor
  1161     03EC                     l2919:
  1162                           
  1163                           ;main.c: 67:     Lcd_Write_String("Pot1:");
  1164     03EC  3035               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1165     03ED  1283               	bcf	3,5	;RP0=0, select bank0
  1166     03EE  1303               	bcf	3,6	;RP1=0, select bank0
  1167     03EF  00C0               	movwf	Lcd_Write_String@a
  1168     03F0  3080               	movlw	128
  1169     03F1  00C1               	movwf	Lcd_Write_String@a+1
  1170     03F2  120A  118A  2741  120A  118A  	fcall	_Lcd_Write_String
  1171     03F7                     l2921:
  1172                           
  1173                           ;main.c: 69:     Lcd_Set_Cursor(1,8);
  1174     03F7  3008               	movlw	8
  1175     03F8  1283               	bcf	3,5	;RP0=0, select bank0
  1176     03F9  1303               	bcf	3,6	;RP1=0, select bank0
  1177     03FA  00C1               	movwf	Lcd_Set_Cursor@b
  1178     03FB  3001               	movlw	1
  1179     03FC  120A  158A  25A6  120A  118A  	fcall	_Lcd_Set_Cursor
  1180                           
  1181                           ;main.c: 70:     Lcd_Write_String("Count:");
  1182     0401  302E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1183     0402  1283               	bcf	3,5	;RP0=0, select bank0
  1184     0403  1303               	bcf	3,6	;RP1=0, select bank0
  1185     0404  00C0               	movwf	Lcd_Write_String@a
  1186     0405  3080               	movlw	128
  1187     0406  00C1               	movwf	Lcd_Write_String@a+1
  1188     0407  120A  118A  2741  120A  118A  	fcall	_Lcd_Write_String
  1189     040C                     l2923:
  1190                           
  1191                           ;main.c: 74:         voltage1 = map_adc_volt(adc_var, 0, 255, 0, 100);
  1192     040C  1283               	bcf	3,5	;RP0=0, select bank0
  1193     040D  1303               	bcf	3,6	;RP1=0, select bank0
  1194     040E  0849               	movf	_adc_var+1,w
  1195     040F  1683               	bsf	3,5	;RP0=1, select bank1
  1196     0410  1303               	bcf	3,6	;RP1=0, select bank1
  1197     0411  00AB               	movwf	(map_adc_volt@value+1)^(0+128)
  1198     0412  1283               	bcf	3,5	;RP0=0, select bank0
  1199     0413  1303               	bcf	3,6	;RP1=0, select bank0
  1200     0414  0848               	movf	_adc_var,w
  1201     0415  1683               	bsf	3,5	;RP0=1, select bank1
  1202     0416  1303               	bcf	3,6	;RP1=0, select bank1
  1203     0417  00AA               	movwf	map_adc_volt@value^(0+128)
  1204     0418  3000               	movlw	0
  1205     0419  00AC               	movwf	map_adc_volt@inputmin^(0+128)
  1206     041A  00AD               	movwf	(map_adc_volt@inputmin+1)^(0+128)
  1207     041B  30FF               	movlw	255
  1208     041C  00AE               	movwf	map_adc_volt@inputmax^(0+128)
  1209     041D  3000               	movlw	0
  1210     041E  00AF               	movwf	(map_adc_volt@inputmax^(0+128)+1)
  1211     041F  3000               	movlw	0
  1212     0420  00B0               	movwf	map_adc_volt@outmin^(0+128)
  1213     0421  00B1               	movwf	(map_adc_volt@outmin+1)^(0+128)
  1214     0422  3064               	movlw	100
  1215     0423  00B2               	movwf	map_adc_volt@outmax^(0+128)
  1216     0424  3000               	movlw	0
  1217     0425  00B3               	movwf	(map_adc_volt@outmax^(0+128)+1)
  1218     0426  120A  158A  26FD  120A  118A  	fcall	_map_adc_volt
  1219     042B  1683               	bsf	3,5	;RP0=1, select bank1
  1220     042C  1303               	bcf	3,6	;RP1=0, select bank1
  1221     042D  082B               	movf	(?_map_adc_volt+1)^(0+128),w
  1222     042E  1283               	bcf	3,5	;RP0=0, select bank0
  1223     042F  1303               	bcf	3,6	;RP1=0, select bank0
  1224     0430  00C5               	movwf	_voltage1+1
  1225     0431  1683               	bsf	3,5	;RP0=1, select bank1
  1226     0432  1303               	bcf	3,6	;RP1=0, select bank1
  1227     0433  082A               	movf	?_map_adc_volt^(0+128),w
  1228     0434  1283               	bcf	3,5	;RP0=0, select bank0
  1229     0435  1303               	bcf	3,6	;RP1=0, select bank0
  1230     0436  00C4               	movwf	_voltage1
  1231     0437                     l2925:
  1232                           
  1233                           ;main.c: 75:         uni_volt = (voltage1*5) / 100;
  1234     0437  3064               	movlw	100
  1235     0438  1683               	bsf	3,5	;RP0=1, select bank1
  1236     0439  1303               	bcf	3,6	;RP1=0, select bank1
  1237     043A  00A2               	movwf	___awdiv@divisor^(0+128)
  1238     043B  3000               	movlw	0
  1239     043C  00A3               	movwf	(___awdiv@divisor^(0+128)+1)
  1240     043D  1283               	bcf	3,5	;RP0=0, select bank0
  1241     043E  1303               	bcf	3,6	;RP1=0, select bank0
  1242     043F  0845               	movf	_voltage1+1,w
  1243     0440  00BE               	movwf	___wmul@multiplier+1
  1244     0441  0844               	movf	_voltage1,w
  1245     0442  00BD               	movwf	___wmul@multiplier
  1246     0443  3005               	movlw	5
  1247     0444  00BF               	movwf	___wmul@multiplicand
  1248     0445  3000               	movlw	0
  1249     0446  00C0               	movwf	___wmul@multiplicand+1
  1250     0447  120A  158A  25D0  120A  118A  	fcall	___wmul
  1251     044C  1283               	bcf	3,5	;RP0=0, select bank0
  1252     044D  1303               	bcf	3,6	;RP1=0, select bank0
  1253     044E  083E               	movf	?___wmul+1,w
  1254     044F  1683               	bsf	3,5	;RP0=1, select bank1
  1255     0450  1303               	bcf	3,6	;RP1=0, select bank1
  1256     0451  00A5               	movwf	(___awdiv@dividend+1)^(0+128)
  1257     0452  1283               	bcf	3,5	;RP0=0, select bank0
  1258     0453  1303               	bcf	3,6	;RP1=0, select bank0
  1259     0454  083D               	movf	?___wmul,w
  1260     0455  1683               	bsf	3,5	;RP0=1, select bank1
  1261     0456  1303               	bcf	3,6	;RP1=0, select bank1
  1262     0457  00A4               	movwf	___awdiv@dividend^(0+128)
  1263     0458  120A  118A  26D0  120A  118A  	fcall	___awdiv
  1264     045D  1683               	bsf	3,5	;RP0=1, select bank1
  1265     045E  1303               	bcf	3,6	;RP1=0, select bank1
  1266     045F  0822               	movf	?___awdiv^(0+128),w
  1267     0460  1283               	bcf	3,5	;RP0=0, select bank0
  1268     0461  1303               	bcf	3,6	;RP1=0, select bank0
  1269     0462  00CE               	movwf	_uni_volt
  1270     0463                     l2927:
  1271                           
  1272                           ;main.c: 76:         dec_volt = (voltage1*5)/10 % 10;
  1273     0463  300A               	movlw	10
  1274     0464  1683               	bsf	3,5	;RP0=1, select bank1
  1275     0465  1303               	bcf	3,6	;RP1=0, select bank1
  1276     0466  00AA               	movwf	___awmod@divisor^(0+128)
  1277     0467  3000               	movlw	0
  1278     0468  00AB               	movwf	(___awmod@divisor^(0+128)+1)
  1279     0469  300A               	movlw	10
  1280     046A  00A2               	movwf	___awdiv@divisor^(0+128)
  1281     046B  3000               	movlw	0
  1282     046C  00A3               	movwf	(___awdiv@divisor^(0+128)+1)
  1283     046D  1283               	bcf	3,5	;RP0=0, select bank0
  1284     046E  1303               	bcf	3,6	;RP1=0, select bank0
  1285     046F  0845               	movf	_voltage1+1,w
  1286     0470  00BE               	movwf	___wmul@multiplier+1
  1287     0471  0844               	movf	_voltage1,w
  1288     0472  00BD               	movwf	___wmul@multiplier
  1289     0473  3005               	movlw	5
  1290     0474  00BF               	movwf	___wmul@multiplicand
  1291     0475  3000               	movlw	0
  1292     0476  00C0               	movwf	___wmul@multiplicand+1
  1293     0477  120A  158A  25D0  120A  118A  	fcall	___wmul
  1294     047C  1283               	bcf	3,5	;RP0=0, select bank0
  1295     047D  1303               	bcf	3,6	;RP1=0, select bank0
  1296     047E  083E               	movf	?___wmul+1,w
  1297     047F  1683               	bsf	3,5	;RP0=1, select bank1
  1298     0480  1303               	bcf	3,6	;RP1=0, select bank1
  1299     0481  00A5               	movwf	(___awdiv@dividend+1)^(0+128)
  1300     0482  1283               	bcf	3,5	;RP0=0, select bank0
  1301     0483  1303               	bcf	3,6	;RP1=0, select bank0
  1302     0484  083D               	movf	?___wmul,w
  1303     0485  1683               	bsf	3,5	;RP0=1, select bank1
  1304     0486  1303               	bcf	3,6	;RP1=0, select bank1
  1305     0487  00A4               	movwf	___awdiv@dividend^(0+128)
  1306     0488  120A  118A  26D0  120A  118A  	fcall	___awdiv
  1307     048D  1683               	bsf	3,5	;RP0=1, select bank1
  1308     048E  1303               	bcf	3,6	;RP1=0, select bank1
  1309     048F  0823               	movf	(?___awdiv+1)^(0+128),w
  1310     0490  00AD               	movwf	(___awmod@dividend+1)^(0+128)
  1311     0491  0822               	movf	?___awdiv^(0+128),w
  1312     0492  00AC               	movwf	___awmod@dividend^(0+128)
  1313     0493  120A  118A  27A5  120A  118A  	fcall	___awmod
  1314     0498  1683               	bsf	3,5	;RP0=1, select bank1
  1315     0499  1303               	bcf	3,6	;RP1=0, select bank1
  1316     049A  082A               	movf	?___awmod^(0+128),w
  1317     049B  1283               	bcf	3,5	;RP0=0, select bank0
  1318     049C  1303               	bcf	3,6	;RP1=0, select bank0
  1319     049D  00CD               	movwf	_dec_volt
  1320     049E                     l2929:
  1321                           
  1322                           ;main.c: 77:         cen_volt = (voltage1*5) % 10;
  1323     049E  300A               	movlw	10
  1324     049F  1683               	bsf	3,5	;RP0=1, select bank1
  1325     04A0  1303               	bcf	3,6	;RP1=0, select bank1
  1326     04A1  00AA               	movwf	___awmod@divisor^(0+128)
  1327     04A2  3000               	movlw	0
  1328     04A3  00AB               	movwf	(___awmod@divisor^(0+128)+1)
  1329     04A4  1283               	bcf	3,5	;RP0=0, select bank0
  1330     04A5  1303               	bcf	3,6	;RP1=0, select bank0
  1331     04A6  0845               	movf	_voltage1+1,w
  1332     04A7  00BE               	movwf	___wmul@multiplier+1
  1333     04A8  0844               	movf	_voltage1,w
  1334     04A9  00BD               	movwf	___wmul@multiplier
  1335     04AA  3005               	movlw	5
  1336     04AB  00BF               	movwf	___wmul@multiplicand
  1337     04AC  3000               	movlw	0
  1338     04AD  00C0               	movwf	___wmul@multiplicand+1
  1339     04AE  120A  158A  25D0  120A  118A  	fcall	___wmul
  1340     04B3  1283               	bcf	3,5	;RP0=0, select bank0
  1341     04B4  1303               	bcf	3,6	;RP1=0, select bank0
  1342     04B5  083E               	movf	?___wmul+1,w
  1343     04B6  1683               	bsf	3,5	;RP0=1, select bank1
  1344     04B7  1303               	bcf	3,6	;RP1=0, select bank1
  1345     04B8  00AD               	movwf	(___awmod@dividend+1)^(0+128)
  1346     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1347     04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1348     04BB  083D               	movf	?___wmul,w
  1349     04BC  1683               	bsf	3,5	;RP0=1, select bank1
  1350     04BD  1303               	bcf	3,6	;RP1=0, select bank1
  1351     04BE  00AC               	movwf	___awmod@dividend^(0+128)
  1352     04BF  120A  118A  27A5  120A  118A  	fcall	___awmod
  1353     04C4  1683               	bsf	3,5	;RP0=1, select bank1
  1354     04C5  1303               	bcf	3,6	;RP1=0, select bank1
  1355     04C6  082A               	movf	?___awmod^(0+128),w
  1356     04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1357     04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1358     04C9  00CC               	movwf	_cen_volt
  1359     04CA                     l2931:
  1360                           
  1361                           ;main.c: 79:         Lcd_Set_Cursor(2,1);
  1362     04CA  01C1               	clrf	Lcd_Set_Cursor@b
  1363     04CB  0AC1               	incf	Lcd_Set_Cursor@b,f
  1364     04CC  3002               	movlw	2
  1365     04CD  120A  158A  25A6  120A  118A  	fcall	_Lcd_Set_Cursor
  1366     04D2                     l2933:
  1367                           
  1368                           ;main.c: 80:         sprintf(display, "%d.%d%dV", uni_volt, dec_volt, cen_volt);
  1369     04D2  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1370     04D3  1683               	bsf	3,5	;RP0=1, select bank1
  1371     04D4  1303               	bcf	3,6	;RP1=0, select bank1
  1372     04D5  00A9               	movwf	sprintf@f^(0+128)
  1373     04D6  1283               	bcf	3,5	;RP0=0, select bank0
  1374     04D7  1303               	bcf	3,6	;RP1=0, select bank0
  1375     04D8  084E               	movf	_uni_volt,w
  1376     04D9  1683               	bsf	3,5	;RP0=1, select bank1
  1377     04DA  1303               	bcf	3,6	;RP1=0, select bank1
  1378     04DB  00BC               	movwf	??_main^(0+128)
  1379     04DC  01BD               	clrf	(??_main^(0+128)+1)
  1380     04DD  083C               	movf	??_main^(0+128),w
  1381     04DE  00AA               	movwf	(?_sprintf^(0+128)+1)
  1382     04DF  083D               	movf	(??_main+1)^(0+128),w
  1383     04E0  00AB               	movwf	((?_sprintf+1)^(0+128)+1)
  1384     04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1385     04E2  1303               	bcf	3,6	;RP1=0, select bank0
  1386     04E3  084D               	movf	_dec_volt,w
  1387     04E4  1683               	bsf	3,5	;RP0=1, select bank1
  1388     04E5  1303               	bcf	3,6	;RP1=0, select bank1
  1389     04E6  00BE               	movwf	(??_main+2)^(0+128)
  1390     04E7  01BF               	clrf	((??_main+2)^(0+128)+1)
  1391     04E8  083E               	movf	(??_main+2)^(0+128),w
  1392     04E9  00AC               	movwf	(?_sprintf^(0+128)+3)
  1393     04EA  083F               	movf	(??_main+3)^(0+128),w
  1394     04EB  00AD               	movwf	((?_sprintf+1)^(0+128)+3)
  1395     04EC  1283               	bcf	3,5	;RP0=0, select bank0
  1396     04ED  1303               	bcf	3,6	;RP1=0, select bank0
  1397     04EE  084C               	movf	_cen_volt,w
  1398     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  1399     04F0  1303               	bcf	3,6	;RP1=0, select bank1
  1400     04F1  00C0               	movwf	(??_main+4)^(0+128)
  1401     04F2  01C1               	clrf	((??_main+4)^(0+128)+1)
  1402     04F3  0840               	movf	(??_main+4)^(0+128),w
  1403     04F4  00AE               	movwf	(?_sprintf^(0+128)+5)
  1404     04F5  0841               	movf	(??_main+5)^(0+128),w
  1405     04F6  00AF               	movwf	((?_sprintf+1)^(0+128)+5)
  1406     04F7  304F               	movlw	(low (_display| 0))& (0+255)
  1407     04F8  120A  118A  2022  120A  118A  	fcall	_sprintf
  1408     04FD                     l2935:
  1409                           
  1410                           ;main.c: 81:         Lcd_Write_String(display);
  1411     04FD  304F               	movlw	(low (_display| 0))& (0+255)
  1412     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1413     04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1414     0500  00C0               	movwf	Lcd_Write_String@a
  1415     0501  3000               	movlw	0
  1416     0502  00C1               	movwf	Lcd_Write_String@a+1
  1417     0503  120A  118A  2741  120A  118A  	fcall	_Lcd_Write_String
  1418     0508                     l2937:
  1419                           
  1420                           ;main.c: 89:         Lcd_Set_Cursor(2,9);
  1421     0508  3009               	movlw	9
  1422     0509  1283               	bcf	3,5	;RP0=0, select bank0
  1423     050A  1303               	bcf	3,6	;RP1=0, select bank0
  1424     050B  00C1               	movwf	Lcd_Set_Cursor@b
  1425     050C  3002               	movlw	2
  1426     050D  120A  158A  25A6  120A  118A  	fcall	_Lcd_Set_Cursor
  1427                           
  1428                           ;main.c: 90:         sprintf(display_counter, "%03d", counter);
  1429     0512  303B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1430     0513  1683               	bsf	3,5	;RP0=1, select bank1
  1431     0514  1303               	bcf	3,6	;RP1=0, select bank1
  1432     0515  00A9               	movwf	sprintf@f^(0+128)
  1433     0516  1283               	bcf	3,5	;RP0=0, select bank0
  1434     0517  1303               	bcf	3,6	;RP1=0, select bank0
  1435     0518  0843               	movf	_counter+1,w
  1436     0519  1683               	bsf	3,5	;RP0=1, select bank1
  1437     051A  1303               	bcf	3,6	;RP1=0, select bank1
  1438     051B  00AB               	movwf	((?_sprintf+1)^(0+128)+1)
  1439     051C  1283               	bcf	3,5	;RP0=0, select bank0
  1440     051D  1303               	bcf	3,6	;RP1=0, select bank0
  1441     051E  0842               	movf	_counter,w
  1442     051F  1683               	bsf	3,5	;RP0=1, select bank1
  1443     0520  1303               	bcf	3,6	;RP1=0, select bank1
  1444     0521  00AA               	movwf	(?_sprintf^(0+128)+1)
  1445     0522  3052               	movlw	(low (_display_counter| 0))& (0+255)
  1446     0523  120A  118A  2022  120A  118A  	fcall	_sprintf
  1447                           
  1448                           ;main.c: 91:         Lcd_Write_String(display_counter);
  1449     0528  3052               	movlw	(low (_display_counter| 0))& (0+255)
  1450     0529  1283               	bcf	3,5	;RP0=0, select bank0
  1451     052A  1303               	bcf	3,6	;RP1=0, select bank0
  1452     052B  00C0               	movwf	Lcd_Write_String@a
  1453     052C  3000               	movlw	0
  1454     052D  00C1               	movwf	Lcd_Write_String@a+1
  1455     052E  120A  118A  2741  120A  118A  	fcall	_Lcd_Write_String
  1456     0533                     l2939:
  1457                           
  1458                           ;main.c: 94:         if (ADCON0bits.GO == 0) {
  1459     0533  1283               	bcf	3,5	;RP0=0, select bank0
  1460     0534  1303               	bcf	3,6	;RP1=0, select bank0
  1461     0535  189F               	btfsc	31,1	;volatile
  1462     0536  2D38               	goto	u3431
  1463     0537  2D39               	goto	u3430
  1464     0538                     u3431:
  1465     0538  2C0C               	goto	l2923
  1466     0539                     u3430:
  1467     0539                     l2941:
  1468                           
  1469                           ;main.c: 95:             ADCON0bits.GO = 1;
  1470     0539  149F               	bsf	31,1	;volatile
  1471     053A                     l2943:
  1472                           
  1473                           ;main.c: 96:             _delay((unsigned long)((50)*(4000000/4000.0)));
  1474     053A  3041               	movlw	65
  1475     053B  1683               	bsf	3,5	;RP0=1, select bank1
  1476     053C  1303               	bcf	3,6	;RP1=0, select bank1
  1477     053D  00BD               	movwf	(??_main^(0+128)+1)
  1478     053E  30ED               	movlw	237
  1479     053F  00BC               	movwf	??_main^(0+128)
  1480     0540                     u3447:
  1481     0540  0BBC               	decfsz	??_main^(0+128),f
  1482     0541  2D40               	goto	u3447
  1483     0542  0BBD               	decfsz	(??_main^(0+128)+1),f
  1484     0543  2D40               	goto	u3447
  1485     0544  2D45               	nop2
  1486     0545  2C0C               	goto	l2923
  1487     0546  120A  118A  2812   	ljmp	start
  1488     0549                     __end_of_main:
  1489                           
  1490                           	psect	text1
  1491     0022                     __ptext1:	
  1492 ;; *************** function _sprintf *****************
  1493 ;; Defined at:
  1494 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  sp              1    wreg     PTR unsigned char 
  1497 ;;		 -> display_counter(1), display(3), 
  1498 ;;  f               1    9[BANK1 ] PTR const unsigned char 
  1499 ;;		 -> STR_6(9), STR_4(5), STR_3(9), 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  sp              1   26[BANK1 ] PTR unsigned char 
  1502 ;;		 -> display_counter(1), display(3), 
  1503 ;;  tmpval          4    0        struct .
  1504 ;;  width           2   24[BANK1 ] int 
  1505 ;;  val             2   21[BANK1 ] unsigned int 
  1506 ;;  cp              2    0        PTR const unsigned char 
  1507 ;;  len             2    0        unsigned int 
  1508 ;;  c               1   27[BANK1 ] unsigned char 
  1509 ;;  flag            1   23[BANK1 ] unsigned char 
  1510 ;;  prec            1   20[BANK1 ] char 
  1511 ;;  ap              1   19[BANK1 ] PTR void [1]
  1512 ;;		 -> ?_sprintf(2), 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  2    9[BANK1 ] int 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         0       0       7       0       0
  1523 ;;      Locals:         0       0       9       0       0
  1524 ;;      Temps:          0       0       3       0       0
  1525 ;;      Totals:         0       0      19       0       0
  1526 ;;Total ram usage:       19 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 4
  1529 ;; This function calls:
  1530 ;;		___lwdiv
  1531 ;;		___lwmod
  1532 ;;		___wmul
  1533 ;;		_isdigit
  1534 ;; This function is called by:
  1535 ;;		_main
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539     0022                     _sprintf:	
  1540                           ;psect for function _sprintf
  1541                           
  1542                           
  1543                           ;incstack = 0
  1544                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1545                           ;sprintf@sp stored from wreg
  1546     0022  1683               	bsf	3,5	;RP0=1, select bank1
  1547     0023  1303               	bcf	3,6	;RP1=0, select bank1
  1548     0024  00BA               	movwf	sprintf@sp^(0+128)
  1549     0025                     l2761:
  1550                           
  1551                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  1552     0025  30AA               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1553     0026  00B3               	movwf	sprintf@ap^(0+128)
  1554                           
  1555                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1556     0027  29EB               	goto	l2865
  1557     0028                     l2763:
  1558                           
  1559                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1560     0028  3025               	movlw	37
  1561     0029  063B               	xorwf	sprintf@c^(0+128),w
  1562     002A  1903               	btfsc	3,2
  1563     002B  282D               	goto	u3161
  1564     002C  282E               	goto	u3160
  1565     002D                     u3161:
  1566     002D  2838               	goto	l2769
  1567     002E                     u3160:
  1568     002E                     l2765:
  1569                           
  1570                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1571     002E  083A               	movf	sprintf@sp^(0+128),w
  1572     002F  0084               	movwf	4
  1573     0030  083B               	movf	sprintf@c^(0+128),w
  1574     0031  1383               	bcf	3,7	;select IRP bank0
  1575     0032  0080               	movwf	0
  1576     0033                     l2767:
  1577     0033  3001               	movlw	1
  1578     0034  00B0               	movwf	??_sprintf^(0+128)
  1579     0035  0830               	movf	??_sprintf^(0+128),w
  1580     0036  07BA               	addwf	sprintf@sp^(0+128),f
  1581                           
  1582                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1583     0037  29EB               	goto	l2865
  1584     0038                     l2769:
  1585                           
  1586                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  1587     0038  01B8               	clrf	sprintf@width^(0+128)
  1588     0039  01B9               	clrf	(sprintf@width+1)^(0+128)
  1589                           
  1590                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1591     003A  01B7               	clrf	sprintf@flag^(0+128)
  1592     003B  2841               	goto	l2775
  1593     003C                     l341:	
  1594                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 596:    case '0':
  1595                           
  1596                           
  1597                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  1598     003C  1537               	bsf	sprintf@flag^(0+128),2
  1599     003D                     l2771:
  1600                           
  1601                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 598:     f++;
  1602     003D  3001               	movlw	1
  1603     003E  00B0               	movwf	??_sprintf^(0+128)
  1604     003F  0830               	movf	??_sprintf^(0+128),w
  1605     0040  07A9               	addwf	sprintf@f^(0+128),f
  1606     0041                     l2775:	
  1607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  1608                           
  1609     0041  0829               	movf	sprintf@f^(0+128),w
  1610     0042  0084               	movwf	4
  1611     0043  120A  158A  200A  120A  118A  	fcall	stringdir
  1612     0048  00B0               	movwf	??_sprintf^(0+128)
  1613     0049  01B1               	clrf	(??_sprintf^(0+128)+1)
  1614                           
  1615                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1616                           ; Switch size 1, requested type "simple"
  1617                           ; Number of cases is 1, Range of values is 0 to 0
  1618                           ; switch strategies available:
  1619                           ; Name         Instructions Cycles
  1620                           ; simple_byte            4     3 (average)
  1621                           ; direct_byte           11     8 (fixed)
  1622                           ; jumptable            260     6 (fixed)
  1623                           ;	Chosen strategy is simple_byte
  1624     004A  0831               	movf	(??_sprintf+1)^(0+128),w
  1625     004B  3A00               	xorlw	0	; case 0
  1626     004C  1903               	skipnz
  1627     004D  284F               	goto	l3029
  1628     004E  2854               	goto	l2777
  1629     004F                     l3029:
  1630                           
  1631                           ; Switch size 1, requested type "simple"
  1632                           ; Number of cases is 1, Range of values is 48 to 48
  1633                           ; switch strategies available:
  1634                           ; Name         Instructions Cycles
  1635                           ; simple_byte            4     3 (average)
  1636                           ; direct_byte           14    11 (fixed)
  1637                           ; jumptable            263     9 (fixed)
  1638                           ;	Chosen strategy is simple_byte
  1639     004F  0830               	movf	??_sprintf^(0+128),w
  1640     0050  3A30               	xorlw	48	; case 48
  1641     0051  1903               	skipnz
  1642     0052  283C               	goto	l341
  1643     0053  2854               	goto	l2777
  1644     0054                     l2777:
  1645                           
  1646                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  1647     0054  0829               	movf	sprintf@f^(0+128),w
  1648     0055  0084               	movwf	4
  1649     0056  120A  158A  200A  120A  118A  	fcall	stringdir
  1650     005B  120A  158A  24BC  120A  118A  	fcall	_isdigit
  1651     0060  1C03               	btfss	3,0
  1652     0061  2863               	goto	u3171
  1653     0062  2864               	goto	u3170
  1654     0063                     u3171:
  1655     0063  28B2               	goto	l2791
  1656     0064                     u3170:
  1657     0064                     l2779:
  1658                           
  1659                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  1660     0064  1683               	bsf	3,5	;RP0=1, select bank1
  1661     0065  1303               	bcf	3,6	;RP1=0, select bank1
  1662     0066  01B8               	clrf	sprintf@width^(0+128)
  1663     0067  01B9               	clrf	(sprintf@width+1)^(0+128)
  1664     0068                     l2781:
  1665                           
  1666                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  1667     0068  300A               	movlw	10
  1668     0069  1283               	bcf	3,5	;RP0=0, select bank0
  1669     006A  1303               	bcf	3,6	;RP1=0, select bank0
  1670     006B  00BD               	movwf	___wmul@multiplier
  1671     006C  3000               	movlw	0
  1672     006D  00BE               	movwf	___wmul@multiplier+1
  1673     006E  1683               	bsf	3,5	;RP0=1, select bank1
  1674     006F  1303               	bcf	3,6	;RP1=0, select bank1
  1675     0070  0839               	movf	(sprintf@width+1)^(0+128),w
  1676     0071  1283               	bcf	3,5	;RP0=0, select bank0
  1677     0072  1303               	bcf	3,6	;RP1=0, select bank0
  1678     0073  00C0               	movwf	___wmul@multiplicand+1
  1679     0074  1683               	bsf	3,5	;RP0=1, select bank1
  1680     0075  1303               	bcf	3,6	;RP1=0, select bank1
  1681     0076  0838               	movf	sprintf@width^(0+128),w
  1682     0077  1283               	bcf	3,5	;RP0=0, select bank0
  1683     0078  1303               	bcf	3,6	;RP1=0, select bank0
  1684     0079  00BF               	movwf	___wmul@multiplicand
  1685     007A  120A  158A  25D0  120A  118A  	fcall	___wmul
  1686     007F  1283               	bcf	3,5	;RP0=0, select bank0
  1687     0080  1303               	bcf	3,6	;RP1=0, select bank0
  1688     0081  083E               	movf	?___wmul+1,w
  1689     0082  1683               	bsf	3,5	;RP0=1, select bank1
  1690     0083  1303               	bcf	3,6	;RP1=0, select bank1
  1691     0084  00B9               	movwf	(sprintf@width+1)^(0+128)
  1692     0085  1283               	bcf	3,5	;RP0=0, select bank0
  1693     0086  1303               	bcf	3,6	;RP1=0, select bank0
  1694     0087  083D               	movf	?___wmul,w
  1695     0088  1683               	bsf	3,5	;RP0=1, select bank1
  1696     0089  1303               	bcf	3,6	;RP1=0, select bank1
  1697     008A  00B8               	movwf	sprintf@width^(0+128)
  1698     008B                     l2783:
  1699                           
  1700                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1701     008B  0829               	movf	sprintf@f^(0+128),w
  1702     008C  0084               	movwf	4
  1703     008D  120A  158A  200A  120A  118A  	fcall	stringdir
  1704     0092  3ED0               	addlw	208
  1705     0093  00B0               	movwf	??_sprintf^(0+128)
  1706     0094  30FF               	movlw	255
  1707     0095  1803               	skipnc
  1708     0096  3000               	movlw	0
  1709     0097  00B1               	movwf	(??_sprintf^(0+128)+1)
  1710     0098  0830               	movf	??_sprintf^(0+128),w
  1711     0099  07B8               	addwf	sprintf@width^(0+128),f
  1712     009A  1803               	skipnc
  1713     009B  0AB9               	incf	(sprintf@width+1)^(0+128),f
  1714     009C  0831               	movf	(??_sprintf+1)^(0+128),w
  1715     009D  07B9               	addwf	(sprintf@width+1)^(0+128),f
  1716     009E                     l2785:
  1717     009E  3001               	movlw	1
  1718     009F  00B0               	movwf	??_sprintf^(0+128)
  1719     00A0  0830               	movf	??_sprintf^(0+128),w
  1720     00A1  07A9               	addwf	sprintf@f^(0+128),f
  1721     00A2                     l2787:
  1722                           
  1723                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1724     00A2  0829               	movf	sprintf@f^(0+128),w
  1725     00A3  0084               	movwf	4
  1726     00A4  120A  158A  200A  120A  118A  	fcall	stringdir
  1727     00A9  120A  158A  24BC  120A  118A  	fcall	_isdigit
  1728     00AE  1803               	btfsc	3,0
  1729     00AF  28B1               	goto	u3181
  1730     00B0  28B2               	goto	u3180
  1731     00B1                     u3181:
  1732     00B1  2868               	goto	l2781
  1733     00B2                     u3180:
  1734     00B2                     l2791:
  1735     00B2  3001               	movlw	1
  1736     00B3  1683               	bsf	3,5	;RP0=1, select bank1
  1737     00B4  1303               	bcf	3,6	;RP1=0, select bank1
  1738     00B5  07A9               	addwf	sprintf@f^(0+128),f
  1739     00B6  30FF               	movlw	-1
  1740     00B7  0729               	addwf	sprintf@f^(0+128),w
  1741     00B8  0084               	movwf	4
  1742     00B9  120A  158A  200A  120A  118A  	fcall	stringdir
  1743     00BE  00BB               	movwf	sprintf@c^(0+128)
  1744     00BF  00B0               	movwf	??_sprintf^(0+128)
  1745     00C0  01B1               	clrf	(??_sprintf^(0+128)+1)
  1746                           
  1747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1748                           ; Switch size 1, requested type "simple"
  1749                           ; Number of cases is 1, Range of values is 0 to 0
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte            4     3 (average)
  1753                           ; direct_byte           11     8 (fixed)
  1754                           ; jumptable            260     6 (fixed)
  1755                           ;	Chosen strategy is simple_byte
  1756     00C1  0831               	movf	(??_sprintf+1)^(0+128),w
  1757     00C2  3A00               	xorlw	0	; case 0
  1758     00C3  1903               	skipnz
  1759     00C4  28C6               	goto	l3031
  1760     00C5  29EB               	goto	l2865
  1761     00C6                     l3031:
  1762                           
  1763                           ; Switch size 1, requested type "simple"
  1764                           ; Number of cases is 3, Range of values is 0 to 105
  1765                           ; switch strategies available:
  1766                           ; Name         Instructions Cycles
  1767                           ; simple_byte           10     6 (average)
  1768                           ; jumptable            260     6 (fixed)
  1769                           ;	Chosen strategy is simple_byte
  1770     00C6  0830               	movf	??_sprintf^(0+128),w
  1771     00C7  3A00               	xorlw	0	; case 0
  1772     00C8  1903               	skipnz
  1773     00C9  29FB               	goto	l2867
  1774     00CA  3A64               	xorlw	100	; case 100
  1775     00CB  1903               	skipnz
  1776     00CC  28D1               	goto	l2793
  1777     00CD  3A0D               	xorlw	13	; case 105
  1778     00CE  1903               	skipnz
  1779     00CF  28D1               	goto	l2793
  1780     00D0  29EB               	goto	l2865
  1781     00D1                     l2793:
  1782                           
  1783                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1784     00D1  0833               	movf	sprintf@ap^(0+128),w
  1785     00D2  0084               	movwf	4
  1786     00D3  1383               	bcf	3,7	;select IRP bank0
  1787     00D4  0800               	movf	0,w
  1788     00D5  00B5               	movwf	sprintf@val^(0+128)
  1789     00D6  0A84               	incf	4,f
  1790     00D7  0800               	movf	0,w
  1791     00D8  00B6               	movwf	(sprintf@val+1)^(0+128)
  1792     00D9                     l2795:
  1793     00D9  3002               	movlw	2
  1794     00DA  00B0               	movwf	??_sprintf^(0+128)
  1795     00DB  0830               	movf	??_sprintf^(0+128),w
  1796     00DC  07B3               	addwf	sprintf@ap^(0+128),f
  1797     00DD                     l2797:
  1798                           
  1799                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1800     00DD  1FB6               	btfss	(sprintf@val+1)^(0+128),7
  1801     00DE  28E0               	goto	u3191
  1802     00DF  28E1               	goto	u3190
  1803     00E0                     u3191:
  1804     00E0  28EA               	goto	l2803
  1805     00E1                     u3190:
  1806     00E1                     l2799:
  1807                           
  1808                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1809     00E1  3003               	movlw	3
  1810     00E2  00B0               	movwf	??_sprintf^(0+128)
  1811     00E3  0830               	movf	??_sprintf^(0+128),w
  1812     00E4  04B7               	iorwf	sprintf@flag^(0+128),f
  1813     00E5                     l2801:
  1814                           
  1815                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1816     00E5  09B5               	comf	sprintf@val^(0+128),f
  1817     00E6  09B6               	comf	(sprintf@val+1)^(0+128),f
  1818     00E7  0AB5               	incf	sprintf@val^(0+128),f
  1819     00E8  1903               	skipnz
  1820     00E9  0AB6               	incf	(sprintf@val+1)^(0+128),f
  1821     00EA                     l2803:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1824     00EA  01BB               	clrf	sprintf@c^(0+128)
  1825     00EB  0ABB               	incf	sprintf@c^(0+128),f
  1826     00EC                     l2809:
  1827                           
  1828                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1829     00EC  083B               	movf	sprintf@c^(0+128),w
  1830     00ED  00B0               	movwf	??_sprintf^(0+128)
  1831     00EE  0730               	addwf	??_sprintf^(0+128),w
  1832     00EF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1833     00F0  0084               	movwf	4
  1834     00F1  120A  158A  200A  120A  118A  	fcall	stringdir
  1835     00F6  00B1               	movwf	(??_sprintf+1)^(0+128)
  1836     00F7  120A  158A  200A  120A  118A  	fcall	stringdir
  1837     00FC  00B2               	movwf	((??_sprintf+1)^(0+128)+1)
  1838     00FD  0832               	movf	(??_sprintf+2)^(0+128),w
  1839     00FE  0236               	subwf	(sprintf@val+1)^(0+128),w
  1840     00FF  1D03               	skipz
  1841     0100  2903               	goto	u3205
  1842     0101  0831               	movf	(??_sprintf+1)^(0+128),w
  1843     0102  0235               	subwf	sprintf@val^(0+128),w
  1844     0103                     u3205:
  1845     0103  1803               	skipnc
  1846     0104  2906               	goto	u3201
  1847     0105  2907               	goto	u3200
  1848     0106                     u3201:
  1849     0106  2908               	goto	l2813
  1850     0107                     u3200:
  1851     0107  2912               	goto	l2815
  1852     0108                     l2813:
  1853     0108  3001               	movlw	1
  1854     0109  00B0               	movwf	??_sprintf^(0+128)
  1855     010A  0830               	movf	??_sprintf^(0+128),w
  1856     010B  07BB               	addwf	sprintf@c^(0+128),f
  1857     010C  3005               	movlw	5
  1858     010D  063B               	xorwf	sprintf@c^(0+128),w
  1859     010E  1D03               	btfss	3,2
  1860     010F  2911               	goto	u3211
  1861     0110  2912               	goto	u3210
  1862     0111                     u3211:
  1863     0111  28EC               	goto	l2809
  1864     0112                     u3210:
  1865     0112                     l2815:
  1866                           
  1867                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1868     0112  0838               	movf	sprintf@width^(0+128),w
  1869     0113  0439               	iorwf	(sprintf@width+1)^(0+128),w
  1870     0114  1903               	btfsc	3,2
  1871     0115  2917               	goto	u3221
  1872     0116  2918               	goto	u3220
  1873     0117                     u3221:
  1874     0117  2924               	goto	l359
  1875     0118                     u3220:
  1876     0118                     l2817:
  1877     0118  0837               	movf	sprintf@flag^(0+128),w
  1878     0119  3903               	andlw	3
  1879     011A  1903               	btfsc	3,2
  1880     011B  291D               	goto	u3231
  1881     011C  291E               	goto	u3230
  1882     011D                     u3231:
  1883     011D  2924               	goto	l359
  1884     011E                     u3230:
  1885     011E                     l2819:
  1886                           
  1887                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1888     011E  30FF               	movlw	255
  1889     011F  07B8               	addwf	sprintf@width^(0+128),f
  1890     0120  1803               	skipnc
  1891     0121  0AB9               	incf	(sprintf@width+1)^(0+128),f
  1892     0122  30FF               	movlw	255
  1893     0123  07B9               	addwf	(sprintf@width+1)^(0+128),f
  1894     0124                     l359:
  1895                           
  1896                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1897     0124  0839               	movf	(sprintf@width+1)^(0+128),w
  1898     0125  3A80               	xorlw	128
  1899     0126  3C80               	sublw	128
  1900     0127  1D03               	skipz
  1901     0128  292B               	goto	u3245
  1902     0129  0838               	movf	sprintf@width^(0+128),w
  1903     012A  023B               	subwf	sprintf@c^(0+128),w
  1904     012B                     u3245:
  1905     012B  1803               	skipnc
  1906     012C  292E               	goto	u3241
  1907     012D  292F               	goto	u3240
  1908     012E                     u3241:
  1909     012E  293B               	goto	l2823
  1910     012F                     u3240:
  1911     012F                     l2821:
  1912                           
  1913                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1914     012F  1683               	bsf	3,5	;RP0=1, select bank1
  1915     0130  1303               	bcf	3,6	;RP1=0, select bank1
  1916     0131  083B               	movf	sprintf@c^(0+128),w
  1917     0132  00B0               	movwf	??_sprintf^(0+128)
  1918     0133  01B1               	clrf	(??_sprintf^(0+128)+1)
  1919     0134  0830               	movf	??_sprintf^(0+128),w
  1920     0135  02B8               	subwf	sprintf@width^(0+128),f
  1921     0136  0831               	movf	(??_sprintf+1)^(0+128),w
  1922     0137  1C03               	skipc
  1923     0138  03B9               	decf	(sprintf@width+1)^(0+128),f
  1924     0139  02B9               	subwf	(sprintf@width+1)^(0+128),f
  1925     013A  293F               	goto	l2825
  1926     013B                     l2823:
  1927                           
  1928                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1929     013B  1683               	bsf	3,5	;RP0=1, select bank1
  1930     013C  1303               	bcf	3,6	;RP1=0, select bank1
  1931     013D  01B8               	clrf	sprintf@width^(0+128)
  1932     013E  01B9               	clrf	(sprintf@width+1)^(0+128)
  1933     013F                     l2825:
  1934                           
  1935                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  1936     013F  1D37               	btfss	sprintf@flag^(0+128),2
  1937     0140  2942               	goto	u3251
  1938     0141  2943               	goto	u3250
  1939     0142                     u3251:
  1940     0142  296E               	goto	l2841
  1941     0143                     u3250:
  1942     0143                     l2827:
  1943                           
  1944                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  1945     0143  0837               	movf	sprintf@flag^(0+128),w
  1946     0144  3903               	andlw	3
  1947     0145  1903               	btfsc	3,2
  1948     0146  2948               	goto	u3261
  1949     0147  2949               	goto	u3260
  1950     0148                     u3261:
  1951     0148  2952               	goto	l2833
  1952     0149                     u3260:
  1953     0149                     l2829:
  1954                           
  1955                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  1956     0149  083A               	movf	sprintf@sp^(0+128),w
  1957     014A  0084               	movwf	4
  1958     014B  302D               	movlw	45
  1959     014C  1383               	bcf	3,7	;select IRP bank0
  1960     014D  0080               	movwf	0
  1961     014E                     l2831:
  1962     014E  3001               	movlw	1
  1963     014F  00B0               	movwf	??_sprintf^(0+128)
  1964     0150  0830               	movf	??_sprintf^(0+128),w
  1965     0151  07BA               	addwf	sprintf@sp^(0+128),f
  1966     0152                     l2833:
  1967                           
  1968                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  1969     0152  0838               	movf	sprintf@width^(0+128),w
  1970     0153  0439               	iorwf	(sprintf@width+1)^(0+128),w
  1971     0154  1903               	btfsc	3,2
  1972     0155  2957               	goto	u3271
  1973     0156  2958               	goto	u3270
  1974     0157                     u3271:
  1975     0157  2998               	goto	l2855
  1976     0158                     u3270:
  1977     0158                     l2835:
  1978                           
  1979                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  1980     0158  083A               	movf	sprintf@sp^(0+128),w
  1981     0159  0084               	movwf	4
  1982     015A  3030               	movlw	48
  1983     015B  1383               	bcf	3,7	;select IRP bank0
  1984     015C  0080               	movwf	0
  1985     015D                     l2837:
  1986     015D  3001               	movlw	1
  1987     015E  00B0               	movwf	??_sprintf^(0+128)
  1988     015F  0830               	movf	??_sprintf^(0+128),w
  1989     0160  07BA               	addwf	sprintf@sp^(0+128),f
  1990     0161                     l2839:
  1991     0161  30FF               	movlw	255
  1992     0162  07B8               	addwf	sprintf@width^(0+128),f
  1993     0163  1803               	skipnc
  1994     0164  0AB9               	incf	(sprintf@width+1)^(0+128),f
  1995     0165  30FF               	movlw	255
  1996     0166  07B9               	addwf	(sprintf@width+1)^(0+128),f
  1997     0167  0838               	movf	sprintf@width^(0+128),w
  1998     0168  0439               	iorwf	(sprintf@width+1)^(0+128),w
  1999     0169  1D03               	btfss	3,2
  2000     016A  296C               	goto	u3281
  2001     016B  296D               	goto	u3280
  2002     016C                     u3281:
  2003     016C  2958               	goto	l2835
  2004     016D                     u3280:
  2005     016D  2998               	goto	l2855
  2006     016E                     l2841:
  2007                           
  2008                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1450:    if(width
  2009     016E  0838               	movf	sprintf@width^(0+128),w
  2010     016F  0439               	iorwf	(sprintf@width+1)^(0+128),w
  2011     0170  1903               	btfsc	3,2
  2012     0171  2973               	goto	u3291
  2013     0172  2974               	goto	u3290
  2014     0173                     u3291:
  2015     0173  2989               	goto	l2849
  2016     0174                     u3290:
  2017     0174                     l2843:
  2018                           
  2019                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  2020     0174  083A               	movf	sprintf@sp^(0+128),w
  2021     0175  0084               	movwf	4
  2022     0176  3020               	movlw	32
  2023     0177  1383               	bcf	3,7	;select IRP bank0
  2024     0178  0080               	movwf	0
  2025     0179                     l2845:
  2026     0179  3001               	movlw	1
  2027     017A  00B0               	movwf	??_sprintf^(0+128)
  2028     017B  0830               	movf	??_sprintf^(0+128),w
  2029     017C  07BA               	addwf	sprintf@sp^(0+128),f
  2030     017D                     l2847:
  2031     017D  30FF               	movlw	255
  2032     017E  07B8               	addwf	sprintf@width^(0+128),f
  2033     017F  1803               	skipnc
  2034     0180  0AB9               	incf	(sprintf@width+1)^(0+128),f
  2035     0181  30FF               	movlw	255
  2036     0182  07B9               	addwf	(sprintf@width+1)^(0+128),f
  2037     0183  0838               	movf	sprintf@width^(0+128),w
  2038     0184  0439               	iorwf	(sprintf@width+1)^(0+128),w
  2039     0185  1D03               	btfss	3,2
  2040     0186  2988               	goto	u3301
  2041     0187  2989               	goto	u3300
  2042     0188                     u3301:
  2043     0188  2974               	goto	l2843
  2044     0189                     u3300:
  2045     0189                     l2849:
  2046                           
  2047                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  2048     0189  0837               	movf	sprintf@flag^(0+128),w
  2049     018A  3903               	andlw	3
  2050     018B  1903               	btfsc	3,2
  2051     018C  298E               	goto	u3311
  2052     018D  298F               	goto	u3310
  2053     018E                     u3311:
  2054     018E  2998               	goto	l2855
  2055     018F                     u3310:
  2056     018F                     l2851:
  2057                           
  2058                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2059     018F  083A               	movf	sprintf@sp^(0+128),w
  2060     0190  0084               	movwf	4
  2061     0191  302D               	movlw	45
  2062     0192  1383               	bcf	3,7	;select IRP bank0
  2063     0193  0080               	movwf	0
  2064     0194                     l2853:
  2065     0194  3001               	movlw	1
  2066     0195  00B0               	movwf	??_sprintf^(0+128)
  2067     0196  0830               	movf	??_sprintf^(0+128),w
  2068     0197  07BA               	addwf	sprintf@sp^(0+128),f
  2069     0198                     l2855:
  2070                           
  2071                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2072     0198  083B               	movf	sprintf@c^(0+128),w
  2073     0199  00B4               	movwf	sprintf@prec^(0+128)
  2074                           
  2075                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2076     019A  29E2               	goto	l2863
  2077     019B                     l2857:
  2078                           
  2079                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2080     019B  300A               	movlw	10
  2081     019C  00A3               	movwf	___lwmod@divisor^(0+128)
  2082     019D  3000               	movlw	0
  2083     019E  00A4               	movwf	(___lwmod@divisor^(0+128)+1)
  2084     019F  0834               	movf	sprintf@prec^(0+128),w
  2085     01A0  00B0               	movwf	??_sprintf^(0+128)
  2086     01A1  0730               	addwf	??_sprintf^(0+128),w
  2087     01A2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2088     01A3  0084               	movwf	4
  2089     01A4  120A  158A  200A  120A  118A  	fcall	stringdir
  2090     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  2091     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  2092     01AB  00BD               	movwf	___lwdiv@divisor
  2093     01AC  120A  158A  200A  120A  118A  	fcall	stringdir
  2094     01B1  00BE               	movwf	___lwdiv@divisor+1
  2095     01B2  1683               	bsf	3,5	;RP0=1, select bank1
  2096     01B3  1303               	bcf	3,6	;RP1=0, select bank1
  2097     01B4  0836               	movf	(sprintf@val+1)^(0+128),w
  2098     01B5  1283               	bcf	3,5	;RP0=0, select bank0
  2099     01B6  1303               	bcf	3,6	;RP1=0, select bank0
  2100     01B7  00C0               	movwf	___lwdiv@dividend+1
  2101     01B8  1683               	bsf	3,5	;RP0=1, select bank1
  2102     01B9  1303               	bcf	3,6	;RP1=0, select bank1
  2103     01BA  0835               	movf	sprintf@val^(0+128),w
  2104     01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2105     01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2106     01BD  00BF               	movwf	___lwdiv@dividend
  2107     01BE  120A  158A  27A1  120A  118A  	fcall	___lwdiv
  2108     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  2109     01C4  1303               	bcf	3,6	;RP1=0, select bank0
  2110     01C5  083E               	movf	?___lwdiv+1,w
  2111     01C6  1683               	bsf	3,5	;RP0=1, select bank1
  2112     01C7  1303               	bcf	3,6	;RP1=0, select bank1
  2113     01C8  00A6               	movwf	(___lwmod@dividend+1)^(0+128)
  2114     01C9  1283               	bcf	3,5	;RP0=0, select bank0
  2115     01CA  1303               	bcf	3,6	;RP1=0, select bank0
  2116     01CB  083D               	movf	?___lwdiv,w
  2117     01CC  1683               	bsf	3,5	;RP0=1, select bank1
  2118     01CD  1303               	bcf	3,6	;RP1=0, select bank1
  2119     01CE  00A5               	movwf	___lwmod@dividend^(0+128)
  2120     01CF  120A  158A  267D  120A  118A  	fcall	___lwmod
  2121     01D4  1683               	bsf	3,5	;RP0=1, select bank1
  2122     01D5  1303               	bcf	3,6	;RP1=0, select bank1
  2123     01D6  0823               	movf	?___lwmod^(0+128),w
  2124     01D7  3E30               	addlw	48
  2125     01D8  00BB               	movwf	sprintf@c^(0+128)
  2126     01D9                     l2859:
  2127                           
  2128                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2129     01D9  083A               	movf	sprintf@sp^(0+128),w
  2130     01DA  0084               	movwf	4
  2131     01DB  083B               	movf	sprintf@c^(0+128),w
  2132     01DC  1383               	bcf	3,7	;select IRP bank0
  2133     01DD  0080               	movwf	0
  2134     01DE                     l2861:
  2135     01DE  3001               	movlw	1
  2136     01DF  00B0               	movwf	??_sprintf^(0+128)
  2137     01E0  0830               	movf	??_sprintf^(0+128),w
  2138     01E1  07BA               	addwf	sprintf@sp^(0+128),f
  2139     01E2                     l2863:
  2140                           
  2141                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2142     01E2  30FF               	movlw	255
  2143     01E3  00B0               	movwf	??_sprintf^(0+128)
  2144     01E4  0830               	movf	??_sprintf^(0+128),w
  2145     01E5  07B4               	addwf	sprintf@prec^(0+128),f
  2146     01E6  0A34               	incf	sprintf@prec^(0+128),w
  2147     01E7  1D03               	btfss	3,2
  2148     01E8  29EA               	goto	u3321
  2149     01E9  29EB               	goto	u3320
  2150     01EA                     u3321:
  2151     01EA  299B               	goto	l2857
  2152     01EB                     u3320:
  2153     01EB                     l2865:
  2154                           
  2155                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2156     01EB  3001               	movlw	1
  2157     01EC  07A9               	addwf	sprintf@f^(0+128),f
  2158     01ED  30FF               	movlw	-1
  2159     01EE  0729               	addwf	sprintf@f^(0+128),w
  2160     01EF  0084               	movwf	4
  2161     01F0  120A  158A  200A  120A  118A  	fcall	stringdir
  2162     01F5  00BB               	movwf	sprintf@c^(0+128)
  2163     01F6  083B               	movf	sprintf@c^(0+128),w
  2164     01F7  1D03               	btfss	3,2
  2165     01F8  29FA               	goto	u3331
  2166     01F9  29FB               	goto	u3330
  2167     01FA                     u3331:
  2168     01FA  2828               	goto	l2763
  2169     01FB                     u3330:
  2170     01FB                     l2867:
  2171                           
  2172                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2173     01FB  083A               	movf	sprintf@sp^(0+128),w
  2174     01FC  0084               	movwf	4
  2175     01FD  1383               	bcf	3,7	;select IRP bank0
  2176     01FE  0180               	clrf	0
  2177     01FF                     l376:
  2178     01FF  0008               	return
  2179     0200                     __end_of_sprintf:
  2180                           
  2181                           	psect	text2
  2182     0CBC                     __ptext2:	
  2183 ;; *************** function _isdigit *****************
  2184 ;; Defined at:
  2185 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\isdigit.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  c               1    wreg     unsigned char 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  c               1   30[BANK0 ] unsigned char 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;		None               void
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       0       0       0       0
  2200 ;;      Locals:         0       2       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       2       0       0       0
  2203 ;;Total ram usage:        2 bytes
  2204 ;; Hardware stack levels used: 1
  2205 ;; Hardware stack levels required when called: 3
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_sprintf
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213     0CBC                     _isdigit:	
  2214                           ;psect for function _isdigit
  2215                           
  2216                           
  2217                           ;incstack = 0
  2218                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2219                           ;isdigit@c stored from wreg
  2220     0CBC  1283               	bcf	3,5	;RP0=0, select bank0
  2221     0CBD  1303               	bcf	3,6	;RP1=0, select bank0
  2222     0CBE  00BE               	movwf	isdigit@c
  2223     0CBF                     l1887:
  2224     0CBF  01BD               	clrf	_isdigit$1045
  2225     0CC0                     l1889:
  2226     0CC0  303A               	movlw	58
  2227     0CC1  023E               	subwf	isdigit@c,w
  2228     0CC2  1803               	skipnc
  2229     0CC3  2CC5               	goto	u1671
  2230     0CC4  2CC6               	goto	u1670
  2231     0CC5                     u1671:
  2232     0CC5  2CCE               	goto	l1895
  2233     0CC6                     u1670:
  2234     0CC6                     l1891:
  2235     0CC6  3030               	movlw	48
  2236     0CC7  023E               	subwf	isdigit@c,w
  2237     0CC8  1C03               	skipc
  2238     0CC9  2CCB               	goto	u1681
  2239     0CCA  2CCC               	goto	u1680
  2240     0CCB                     u1681:
  2241     0CCB  2CCE               	goto	l1895
  2242     0CCC                     u1680:
  2243     0CCC                     l1893:
  2244     0CCC  01BD               	clrf	_isdigit$1045
  2245     0CCD  0ABD               	incf	_isdigit$1045,f
  2246     0CCE                     l1895:
  2247     0CCE  0C3D               	rrf	_isdigit$1045,w
  2248     0CCF                     l833:
  2249     0CCF  0008               	return
  2250     0CD0                     __end_of_isdigit:
  2251                           
  2252                           	psect	text3
  2253     0E7D                     __ptext3:	
  2254 ;; *************** function ___lwmod *****************
  2255 ;; Defined at:
  2256 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  divisor         2    3[BANK1 ] unsigned int 
  2259 ;;  dividend        2    5[BANK1 ] unsigned int 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  counter         1    8[BANK1 ] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  2    3[BANK1 ] unsigned int 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         0       0       4       0       0
  2272 ;;      Locals:         0       0       1       0       0
  2273 ;;      Temps:          0       0       1       0       0
  2274 ;;      Totals:         0       0       6       0       0
  2275 ;;Total ram usage:        6 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 3
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_sprintf
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285     0E7D                     ___lwmod:	
  2286                           ;psect for function ___lwmod
  2287                           
  2288     0E7D                     l2701:	
  2289                           ;incstack = 0
  2290                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2291                           
  2292     0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  2293     0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  2294     0E7F  0823               	movf	___lwmod@divisor^(0+128),w
  2295     0E80  0424               	iorwf	(___lwmod@divisor+1)^(0+128),w
  2296     0E81  1903               	btfsc	3,2
  2297     0E82  2E84               	goto	u3051
  2298     0E83  2E85               	goto	u3050
  2299     0E84                     u3051:
  2300     0E84  2EB4               	goto	l2719
  2301     0E85                     u3050:
  2302     0E85                     l2703:
  2303     0E85  01A8               	clrf	___lwmod@counter^(0+128)
  2304     0E86  0AA8               	incf	___lwmod@counter^(0+128),f
  2305     0E87  2E93               	goto	l2709
  2306     0E88                     l2705:
  2307     0E88  3001               	movlw	1
  2308     0E89                     u3065:
  2309     0E89  1003               	clrc
  2310     0E8A  0DA3               	rlf	___lwmod@divisor^(0+128),f
  2311     0E8B  0DA4               	rlf	(___lwmod@divisor+1)^(0+128),f
  2312     0E8C  3EFF               	addlw	-1
  2313     0E8D  1D03               	skipz
  2314     0E8E  2E89               	goto	u3065
  2315     0E8F                     l2707:
  2316     0E8F  3001               	movlw	1
  2317     0E90  00A7               	movwf	??___lwmod^(0+128)
  2318     0E91  0827               	movf	??___lwmod^(0+128),w
  2319     0E92  07A8               	addwf	___lwmod@counter^(0+128),f
  2320     0E93                     l2709:
  2321     0E93  1FA4               	btfss	(___lwmod@divisor+1)^(0+128),7
  2322     0E94  2E96               	goto	u3071
  2323     0E95  2E97               	goto	u3070
  2324     0E96                     u3071:
  2325     0E96  2E88               	goto	l2705
  2326     0E97                     u3070:
  2327     0E97                     l2711:
  2328     0E97  0824               	movf	(___lwmod@divisor+1)^(0+128),w
  2329     0E98  0226               	subwf	(___lwmod@dividend+1)^(0+128),w
  2330     0E99  1D03               	skipz
  2331     0E9A  2E9D               	goto	u3085
  2332     0E9B  0823               	movf	___lwmod@divisor^(0+128),w
  2333     0E9C  0225               	subwf	___lwmod@dividend^(0+128),w
  2334     0E9D                     u3085:
  2335     0E9D  1C03               	skipc
  2336     0E9E  2EA0               	goto	u3081
  2337     0E9F  2EA1               	goto	u3080
  2338     0EA0                     u3081:
  2339     0EA0  2EA7               	goto	l2715
  2340     0EA1                     u3080:
  2341     0EA1                     l2713:
  2342     0EA1  0823               	movf	___lwmod@divisor^(0+128),w
  2343     0EA2  02A5               	subwf	___lwmod@dividend^(0+128),f
  2344     0EA3  0824               	movf	(___lwmod@divisor+1)^(0+128),w
  2345     0EA4  1C03               	skipc
  2346     0EA5  03A6               	decf	(___lwmod@dividend+1)^(0+128),f
  2347     0EA6  02A6               	subwf	(___lwmod@dividend+1)^(0+128),f
  2348     0EA7                     l2715:
  2349     0EA7  3001               	movlw	1
  2350     0EA8                     u3095:
  2351     0EA8  1003               	clrc
  2352     0EA9  0CA4               	rrf	(___lwmod@divisor+1)^(0+128),f
  2353     0EAA  0CA3               	rrf	___lwmod@divisor^(0+128),f
  2354     0EAB  3EFF               	addlw	-1
  2355     0EAC  1D03               	skipz
  2356     0EAD  2EA8               	goto	u3095
  2357     0EAE                     l2717:
  2358     0EAE  3001               	movlw	1
  2359     0EAF  02A8               	subwf	___lwmod@counter^(0+128),f
  2360     0EB0  1D03               	btfss	3,2
  2361     0EB1  2EB3               	goto	u3101
  2362     0EB2  2EB4               	goto	u3100
  2363     0EB3                     u3101:
  2364     0EB3  2E97               	goto	l2711
  2365     0EB4                     u3100:
  2366     0EB4                     l2719:
  2367     0EB4  0826               	movf	(___lwmod@dividend+1)^(0+128),w
  2368     0EB5  00A4               	movwf	(?___lwmod+1)^(0+128)
  2369     0EB6  0825               	movf	___lwmod@dividend^(0+128),w
  2370     0EB7  00A3               	movwf	?___lwmod^(0+128)
  2371     0EB8                     l662:
  2372     0EB8  0008               	return
  2373     0EB9                     __end_of___lwmod:
  2374                           
  2375                           	psect	text4
  2376     0FA1                     __ptext4:	
  2377 ;; *************** function ___lwdiv *****************
  2378 ;; Defined at:
  2379 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;  divisor         2   29[BANK0 ] unsigned int 
  2382 ;;  dividend        2   31[BANK0 ] unsigned int 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  quotient        2    1[BANK1 ] unsigned int 
  2385 ;;  counter         1    0[BANK1 ] unsigned char 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  2   29[BANK0 ] unsigned int 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2395 ;;      Params:         0       4       0       0       0
  2396 ;;      Locals:         0       0       3       0       0
  2397 ;;      Temps:          0       1       0       0       0
  2398 ;;      Totals:         0       5       3       0       0
  2399 ;;Total ram usage:        8 bytes
  2400 ;; Hardware stack levels used: 1
  2401 ;; Hardware stack levels required when called: 3
  2402 ;; This function calls:
  2403 ;;		Nothing
  2404 ;; This function is called by:
  2405 ;;		_sprintf
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409     0FA1                     ___lwdiv:	
  2410                           ;psect for function ___lwdiv
  2411                           
  2412     0FA1                     l2675:	
  2413                           ;incstack = 0
  2414                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2415                           
  2416     0FA1  1683               	bsf	3,5	;RP0=1, select bank1
  2417     0FA2  1303               	bcf	3,6	;RP1=0, select bank1
  2418     0FA3  01A1               	clrf	___lwdiv@quotient^(0+128)
  2419     0FA4  01A2               	clrf	(___lwdiv@quotient+1)^(0+128)
  2420     0FA5                     l2677:
  2421     0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2422     0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  2423     0FA7  083D               	movf	___lwdiv@divisor,w
  2424     0FA8  043E               	iorwf	___lwdiv@divisor+1,w
  2425     0FA9  1903               	btfsc	3,2
  2426     0FAA  2FAC               	goto	u2981
  2427     0FAB  2FAD               	goto	u2980
  2428     0FAC                     u2981:
  2429     0FAC  2FF3               	goto	l2697
  2430     0FAD                     u2980:
  2431     0FAD                     l2679:
  2432     0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  2433     0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  2434     0FAF  01A0               	clrf	___lwdiv@counter^(0+128)
  2435     0FB0  0AA0               	incf	___lwdiv@counter^(0+128),f
  2436     0FB1  2FBF               	goto	l2685
  2437     0FB2                     l2681:
  2438     0FB2  3001               	movlw	1
  2439     0FB3                     u2995:
  2440     0FB3  1003               	clrc
  2441     0FB4  0DBD               	rlf	___lwdiv@divisor,f
  2442     0FB5  0DBE               	rlf	___lwdiv@divisor+1,f
  2443     0FB6  3EFF               	addlw	-1
  2444     0FB7  1D03               	skipz
  2445     0FB8  2FB3               	goto	u2995
  2446     0FB9                     l2683:
  2447     0FB9  3001               	movlw	1
  2448     0FBA  00C1               	movwf	??___lwdiv
  2449     0FBB  0841               	movf	??___lwdiv,w
  2450     0FBC  1683               	bsf	3,5	;RP0=1, select bank1
  2451     0FBD  1303               	bcf	3,6	;RP1=0, select bank1
  2452     0FBE  07A0               	addwf	___lwdiv@counter^(0+128),f
  2453     0FBF                     l2685:
  2454     0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  2455     0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  2456     0FC1  1FBE               	btfss	___lwdiv@divisor+1,7
  2457     0FC2  2FC4               	goto	u3001
  2458     0FC3  2FC5               	goto	u3000
  2459     0FC4                     u3001:
  2460     0FC4  2FB2               	goto	l2681
  2461     0FC5                     u3000:
  2462     0FC5                     l2687:
  2463     0FC5  3001               	movlw	1
  2464     0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  2465     0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  2466     0FC8                     u3015:
  2467     0FC8  1003               	clrc
  2468     0FC9  0DA1               	rlf	___lwdiv@quotient^(0+128),f
  2469     0FCA  0DA2               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2470     0FCB  3EFF               	addlw	-1
  2471     0FCC  1D03               	skipz
  2472     0FCD  2FC8               	goto	u3015
  2473     0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  2474     0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  2475     0FD0  083E               	movf	___lwdiv@divisor+1,w
  2476     0FD1  0240               	subwf	___lwdiv@dividend+1,w
  2477     0FD2  1D03               	skipz
  2478     0FD3  2FD6               	goto	u3025
  2479     0FD4  083D               	movf	___lwdiv@divisor,w
  2480     0FD5  023F               	subwf	___lwdiv@dividend,w
  2481     0FD6                     u3025:
  2482     0FD6  1C03               	skipc
  2483     0FD7  2FD9               	goto	u3021
  2484     0FD8  2FDA               	goto	u3020
  2485     0FD9                     u3021:
  2486     0FD9  2FE3               	goto	l2693
  2487     0FDA                     u3020:
  2488     0FDA                     l2689:
  2489     0FDA  083D               	movf	___lwdiv@divisor,w
  2490     0FDB  02BF               	subwf	___lwdiv@dividend,f
  2491     0FDC  083E               	movf	___lwdiv@divisor+1,w
  2492     0FDD  1C03               	skipc
  2493     0FDE  03C0               	decf	___lwdiv@dividend+1,f
  2494     0FDF  02C0               	subwf	___lwdiv@dividend+1,f
  2495     0FE0                     l2691:
  2496     0FE0  1683               	bsf	3,5	;RP0=1, select bank1
  2497     0FE1  1303               	bcf	3,6	;RP1=0, select bank1
  2498     0FE2  1421               	bsf	___lwdiv@quotient^(0+128),0
  2499     0FE3                     l2693:
  2500     0FE3  3001               	movlw	1
  2501     0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  2502     0FE5                     u3035:
  2503     0FE5  1003               	clrc
  2504     0FE6  0CBE               	rrf	___lwdiv@divisor+1,f
  2505     0FE7  0CBD               	rrf	___lwdiv@divisor,f
  2506     0FE8  3EFF               	addlw	-1
  2507     0FE9  1D03               	skipz
  2508     0FEA  2FE5               	goto	u3035
  2509     0FEB                     l2695:
  2510     0FEB  3001               	movlw	1
  2511     0FEC  1683               	bsf	3,5	;RP0=1, select bank1
  2512     0FED  1303               	bcf	3,6	;RP1=0, select bank1
  2513     0FEE  02A0               	subwf	___lwdiv@counter^(0+128),f
  2514     0FEF  1D03               	btfss	3,2
  2515     0FF0  2FF2               	goto	u3041
  2516     0FF1  2FF3               	goto	u3040
  2517     0FF2                     u3041:
  2518     0FF2  2FC5               	goto	l2687
  2519     0FF3                     u3040:
  2520     0FF3                     l2697:
  2521     0FF3  1683               	bsf	3,5	;RP0=1, select bank1
  2522     0FF4  1303               	bcf	3,6	;RP1=0, select bank1
  2523     0FF5  0822               	movf	(___lwdiv@quotient+1)^(0+128),w
  2524     0FF6  1283               	bcf	3,5	;RP0=0, select bank0
  2525     0FF7  1303               	bcf	3,6	;RP1=0, select bank0
  2526     0FF8  00BE               	movwf	?___lwdiv+1
  2527     0FF9  1683               	bsf	3,5	;RP0=1, select bank1
  2528     0FFA  1303               	bcf	3,6	;RP1=0, select bank1
  2529     0FFB  0821               	movf	___lwdiv@quotient^(0+128),w
  2530     0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  2531     0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  2532     0FFE  00BD               	movwf	?___lwdiv
  2533     0FFF                     l652:
  2534     0FFF  0008               	return
  2535     1000                     __end_of___lwdiv:
  2536                           
  2537                           	psect	text5
  2538     0CD0                     __ptext5:	
  2539 ;; *************** function _setup *****************
  2540 ;; Defined at:
  2541 ;;		line 136 in file "main.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;		None
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2555 ;;      Params:         0       0       0       0       0
  2556 ;;      Locals:         0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0
  2558 ;;      Totals:         0       0       0       0       0
  2559 ;;Total ram usage:        0 bytes
  2560 ;; Hardware stack levels used: 1
  2561 ;; Hardware stack levels required when called: 3
  2562 ;; This function calls:
  2563 ;;		Nothing
  2564 ;; This function is called by:
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569     0CD0                     _setup:	
  2570                           ;psect for function _setup
  2571                           
  2572     0CD0                     l2079:	
  2573                           ;incstack = 0
  2574                           ; Regs used in _setup: [wreg+status,2+status,0]
  2575                           
  2576                           
  2577                           ;main.c: 149:     TRISB = 0;
  2578     0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  2579     0CD1  1303               	bcf	3,6	;RP1=0, select bank1
  2580     0CD2  0186               	clrf	6	;volatile
  2581                           
  2582                           ;main.c: 150:     TRISC = 0;
  2583     0CD3  0187               	clrf	7	;volatile
  2584                           
  2585                           ;main.c: 151:     TRISD = 0;
  2586     0CD4  0188               	clrf	8	;volatile
  2587                           
  2588                           ;main.c: 155:     PORTA = 0;
  2589     0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  2590     0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  2591     0CD7  0185               	clrf	5	;volatile
  2592                           
  2593                           ;main.c: 156:     PORTB = 0;
  2594     0CD8  0186               	clrf	6	;volatile
  2595                           
  2596                           ;main.c: 157:     PORTC = 0;
  2597     0CD9  0187               	clrf	7	;volatile
  2598                           
  2599                           ;main.c: 158:     PORTD = 0;
  2600     0CDA  0188               	clrf	8	;volatile
  2601                           
  2602                           ;main.c: 159:     PORTE = 0;
  2603     0CDB  0189               	clrf	9	;volatile
  2604     0CDC                     l2081:
  2605                           
  2606                           ;main.c: 167:     INTCONbits.GIE = 1;
  2607     0CDC  178B               	bsf	11,7	;volatile
  2608     0CDD                     l2083:
  2609                           
  2610                           ;main.c: 168:     INTCONbits.PEIE = 1;
  2611     0CDD  170B               	bsf	11,6	;volatile
  2612     0CDE                     l2085:
  2613                           
  2614                           ;main.c: 181:     OSCCONbits.IRCF = 0b110 ;
  2615     0CDE  1683               	bsf	3,5	;RP0=1, select bank1
  2616     0CDF  1303               	bcf	3,6	;RP1=0, select bank1
  2617     0CE0  080F               	movf	15,w	;volatile
  2618     0CE1  398F               	andlw	-113
  2619     0CE2  3860               	iorlw	96
  2620     0CE3  008F               	movwf	15	;volatile
  2621     0CE4                     l2087:
  2622                           
  2623                           ;main.c: 182:     OSCCONbits.SCS = 1;
  2624     0CE4  140F               	bsf	15,0	;volatile
  2625     0CE5                     l98:
  2626     0CE5  0008               	return
  2627     0CE6                     __end_of_setup:
  2628                           
  2629                           	psect	text6
  2630     0EFD                     __ptext6:	
  2631 ;; *************** function _map_adc_volt *****************
  2632 ;; Defined at:
  2633 ;;		line 141 in file "ADC_setup.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  value           2   10[BANK1 ] int 
  2636 ;;  inputmin        2   12[BANK1 ] int 
  2637 ;;  inputmax        2   14[BANK1 ] int 
  2638 ;;  outmin          2   16[BANK1 ] int 
  2639 ;;  outmax          2   18[BANK1 ] int 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;		None
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  2   10[BANK1 ] int 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0, pclath, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2651 ;;      Params:         0       0      10       0       0
  2652 ;;      Locals:         0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0
  2654 ;;      Totals:         0       0      10       0       0
  2655 ;;Total ram usage:       10 bytes
  2656 ;; Hardware stack levels used: 1
  2657 ;; Hardware stack levels required when called: 4
  2658 ;; This function calls:
  2659 ;;		___awdiv
  2660 ;;		___wmul
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666     0EFD                     _map_adc_volt:	
  2667                           ;psect for function _map_adc_volt
  2668                           
  2669     0EFD                     l2757:	
  2670                           ;incstack = 0
  2671                           ; Regs used in _map_adc_volt: [wreg+status,2+status,0+pclath+cstack]
  2672                           
  2673                           
  2674                           ;ADC_setup.c: 142:     return ((value - inputmin)*(outmax-outmin)) / (inputmax-inputmin)
      +                          +outmin;}
  2675     0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  2676     0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  2677     0EFF  082C               	movf	map_adc_volt@inputmin^(0+128),w
  2678     0F00  022E               	subwf	map_adc_volt@inputmax^(0+128),w
  2679     0F01  00A2               	movwf	___awdiv@divisor^(0+128)
  2680     0F02  082D               	movf	(map_adc_volt@inputmin+1)^(0+128),w
  2681     0F03  1C03               	skipc
  2682     0F04  0A2D               	incf	(map_adc_volt@inputmin+1)^(0+128),w
  2683     0F05  022F               	subwf	(map_adc_volt@inputmax+1)^(0+128),w
  2684     0F06  00A3               	movwf	(___awdiv@divisor+1)^(0+128)
  2685     0F07  082C               	movf	map_adc_volt@inputmin^(0+128),w
  2686     0F08  022A               	subwf	map_adc_volt@value^(0+128),w
  2687     0F09  1283               	bcf	3,5	;RP0=0, select bank0
  2688     0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  2689     0F0B  00BD               	movwf	___wmul@multiplier
  2690     0F0C  1683               	bsf	3,5	;RP0=1, select bank1
  2691     0F0D  1303               	bcf	3,6	;RP1=0, select bank1
  2692     0F0E  082D               	movf	(map_adc_volt@inputmin+1)^(0+128),w
  2693     0F0F  1C03               	skipc
  2694     0F10  0A2D               	incf	(map_adc_volt@inputmin+1)^(0+128),w
  2695     0F11  022B               	subwf	(map_adc_volt@value+1)^(0+128),w
  2696     0F12  1283               	bcf	3,5	;RP0=0, select bank0
  2697     0F13  1303               	bcf	3,6	;RP1=0, select bank0
  2698     0F14  00BE               	movwf	___wmul@multiplier+1
  2699     0F15  1683               	bsf	3,5	;RP0=1, select bank1
  2700     0F16  1303               	bcf	3,6	;RP1=0, select bank1
  2701     0F17  0830               	movf	map_adc_volt@outmin^(0+128),w
  2702     0F18  0232               	subwf	map_adc_volt@outmax^(0+128),w
  2703     0F19  1283               	bcf	3,5	;RP0=0, select bank0
  2704     0F1A  1303               	bcf	3,6	;RP1=0, select bank0
  2705     0F1B  00BF               	movwf	___wmul@multiplicand
  2706     0F1C  1683               	bsf	3,5	;RP0=1, select bank1
  2707     0F1D  1303               	bcf	3,6	;RP1=0, select bank1
  2708     0F1E  0831               	movf	(map_adc_volt@outmin+1)^(0+128),w
  2709     0F1F  1C03               	skipc
  2710     0F20  0A31               	incf	(map_adc_volt@outmin+1)^(0+128),w
  2711     0F21  0233               	subwf	(map_adc_volt@outmax+1)^(0+128),w
  2712     0F22  1283               	bcf	3,5	;RP0=0, select bank0
  2713     0F23  1303               	bcf	3,6	;RP1=0, select bank0
  2714     0F24  00C0               	movwf	___wmul@multiplicand+1
  2715     0F25  120A  158A  25D0  120A  158A  	fcall	___wmul
  2716     0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  2717     0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  2718     0F2C  083E               	movf	?___wmul+1,w
  2719     0F2D  1683               	bsf	3,5	;RP0=1, select bank1
  2720     0F2E  1303               	bcf	3,6	;RP1=0, select bank1
  2721     0F2F  00A5               	movwf	(___awdiv@dividend+1)^(0+128)
  2722     0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2723     0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2724     0F32  083D               	movf	?___wmul,w
  2725     0F33  1683               	bsf	3,5	;RP0=1, select bank1
  2726     0F34  1303               	bcf	3,6	;RP1=0, select bank1
  2727     0F35  00A4               	movwf	___awdiv@dividend^(0+128)
  2728     0F36  120A  118A  26D0  120A  158A  	fcall	___awdiv
  2729     0F3B  1683               	bsf	3,5	;RP0=1, select bank1
  2730     0F3C  1303               	bcf	3,6	;RP1=0, select bank1
  2731     0F3D  0830               	movf	map_adc_volt@outmin^(0+128),w
  2732     0F3E  0722               	addwf	?___awdiv^(0+128),w
  2733     0F3F  00AA               	movwf	?_map_adc_volt^(0+128)
  2734     0F40  0831               	movf	(map_adc_volt@outmin+1)^(0+128),w
  2735     0F41  1803               	skipnc
  2736     0F42  0A31               	incf	(map_adc_volt@outmin+1)^(0+128),w
  2737     0F43  0723               	addwf	(?___awdiv+1)^(0+128),w
  2738     0F44  00AB               	movwf	(?_map_adc_volt+1)^(0+128)
  2739     0F45                     l223:
  2740     0F45  0008               	return
  2741     0F46                     __end_of_map_adc_volt:
  2742                           
  2743                           	psect	text7
  2744     0DD0                     __ptext7:	
  2745 ;; *************** function ___wmul *****************
  2746 ;; Defined at:
  2747 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  multiplier      2   29[BANK0 ] unsigned int 
  2750 ;;  multiplicand    2   31[BANK0 ] unsigned int 
  2751 ;; Auto vars:     Size  Location     Type
  2752 ;;  product         2    0[BANK1 ] unsigned int 
  2753 ;; Return value:  Size  Location     Type
  2754 ;;                  2   29[BANK0 ] unsigned int 
  2755 ;; Registers used:
  2756 ;;		wreg, status,2, status,0
  2757 ;; Tracked objects:
  2758 ;;		On entry : 0/0
  2759 ;;		On exit  : 0/0
  2760 ;;		Unchanged: 0/0
  2761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2762 ;;      Params:         0       4       0       0       0
  2763 ;;      Locals:         0       0       2       0       0
  2764 ;;      Temps:          0       0       0       0       0
  2765 ;;      Totals:         0       4       2       0       0
  2766 ;;Total ram usage:        6 bytes
  2767 ;; Hardware stack levels used: 1
  2768 ;; Hardware stack levels required when called: 3
  2769 ;; This function calls:
  2770 ;;		Nothing
  2771 ;; This function is called by:
  2772 ;;		_main
  2773 ;;		_map_adc_volt
  2774 ;;		_sprintf
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778     0DD0                     ___wmul:	
  2779                           ;psect for function ___wmul
  2780                           
  2781     0DD0                     l2617:	
  2782                           ;incstack = 0
  2783                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2784                           
  2785     0DD0  1683               	bsf	3,5	;RP0=1, select bank1
  2786     0DD1  1303               	bcf	3,6	;RP1=0, select bank1
  2787     0DD2  01A0               	clrf	___wmul@product^(0+128)
  2788     0DD3  01A1               	clrf	(___wmul@product+1)^(0+128)
  2789     0DD4                     l2619:
  2790     0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  2791     0DD5  1C3D               	btfss	___wmul@multiplier,0
  2792     0DD6  2DD8               	goto	u2841
  2793     0DD7  2DD9               	goto	u2840
  2794     0DD8                     u2841:
  2795     0DD8  2DE5               	goto	l380
  2796     0DD9                     u2840:
  2797     0DD9                     l2621:
  2798     0DD9  083F               	movf	___wmul@multiplicand,w
  2799     0DDA  1683               	bsf	3,5	;RP0=1, select bank1
  2800     0DDB  1303               	bcf	3,6	;RP1=0, select bank1
  2801     0DDC  07A0               	addwf	___wmul@product^(0+128),f
  2802     0DDD  1803               	skipnc
  2803     0DDE  0AA1               	incf	(___wmul@product+1)^(0+128),f
  2804     0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  2805     0DE0  1303               	bcf	3,6	;RP1=0, select bank0
  2806     0DE1  0840               	movf	___wmul@multiplicand+1,w
  2807     0DE2  1683               	bsf	3,5	;RP0=1, select bank1
  2808     0DE3  1303               	bcf	3,6	;RP1=0, select bank1
  2809     0DE4  07A1               	addwf	(___wmul@product+1)^(0+128),f
  2810     0DE5                     l380:
  2811     0DE5  3001               	movlw	1
  2812     0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  2813     0DE7                     u2855:
  2814     0DE7  1003               	clrc
  2815     0DE8  0DBF               	rlf	___wmul@multiplicand,f
  2816     0DE9  0DC0               	rlf	___wmul@multiplicand+1,f
  2817     0DEA  3EFF               	addlw	-1
  2818     0DEB  1D03               	skipz
  2819     0DEC  2DE7               	goto	u2855
  2820     0DED                     l2623:
  2821     0DED  3001               	movlw	1
  2822     0DEE                     u2865:
  2823     0DEE  1003               	clrc
  2824     0DEF  0CBE               	rrf	___wmul@multiplier+1,f
  2825     0DF0  0CBD               	rrf	___wmul@multiplier,f
  2826     0DF1  3EFF               	addlw	-1
  2827     0DF2  1D03               	skipz
  2828     0DF3  2DEE               	goto	u2865
  2829     0DF4                     l2625:
  2830     0DF4  083D               	movf	___wmul@multiplier,w
  2831     0DF5  043E               	iorwf	___wmul@multiplier+1,w
  2832     0DF6  1D03               	btfss	3,2
  2833     0DF7  2DF9               	goto	u2871
  2834     0DF8  2DFA               	goto	u2870
  2835     0DF9                     u2871:
  2836     0DF9  2DD4               	goto	l2619
  2837     0DFA                     u2870:
  2838     0DFA                     l2627:
  2839     0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  2840     0DFB  1303               	bcf	3,6	;RP1=0, select bank1
  2841     0DFC  0821               	movf	(___wmul@product+1)^(0+128),w
  2842     0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  2843     0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  2844     0DFF  00BE               	movwf	?___wmul+1
  2845     0E00  1683               	bsf	3,5	;RP0=1, select bank1
  2846     0E01  1303               	bcf	3,6	;RP1=0, select bank1
  2847     0E02  0820               	movf	___wmul@product^(0+128),w
  2848     0E03  1283               	bcf	3,5	;RP0=0, select bank0
  2849     0E04  1303               	bcf	3,6	;RP1=0, select bank0
  2850     0E05  00BD               	movwf	?___wmul
  2851     0E06                     l382:
  2852     0E06  0008               	return
  2853     0E07                     __end_of___wmul:
  2854                           
  2855                           	psect	text8
  2856     06D0                     __ptext8:	
  2857 ;; *************** function ___awdiv *****************
  2858 ;; Defined at:
  2859 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  divisor         2    2[BANK1 ] int 
  2862 ;;  dividend        2    4[BANK1 ] int 
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  quotient        2    8[BANK1 ] int 
  2865 ;;  sign            1    7[BANK1 ] unsigned char 
  2866 ;;  counter         1    6[BANK1 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  2    2[BANK1 ] int 
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, status,0
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2876 ;;      Params:         0       0       4       0       0
  2877 ;;      Locals:         0       0       4       0       0
  2878 ;;      Temps:          0       1       0       0       0
  2879 ;;      Totals:         0       1       8       0       0
  2880 ;;Total ram usage:        9 bytes
  2881 ;; Hardware stack levels used: 1
  2882 ;; Hardware stack levels required when called: 3
  2883 ;; This function calls:
  2884 ;;		Nothing
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;;		_map_adc_volt
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891     06D0                     ___awdiv:	
  2892                           ;psect for function ___awdiv
  2893                           
  2894     06D0                     l2631:	
  2895                           ;incstack = 0
  2896                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2897                           
  2898     06D0  1683               	bsf	3,5	;RP0=1, select bank1
  2899     06D1  1303               	bcf	3,6	;RP1=0, select bank1
  2900     06D2  01A7               	clrf	___awdiv@sign^(0+128)
  2901     06D3                     l2633:
  2902     06D3  1FA3               	btfss	(___awdiv@divisor+1)^(0+128),7
  2903     06D4  2ED6               	goto	u2881
  2904     06D5  2ED7               	goto	u2880
  2905     06D6                     u2881:
  2906     06D6  2EDE               	goto	l2639
  2907     06D7                     u2880:
  2908     06D7                     l2635:
  2909     06D7  09A2               	comf	___awdiv@divisor^(0+128),f
  2910     06D8  09A3               	comf	(___awdiv@divisor+1)^(0+128),f
  2911     06D9  0AA2               	incf	___awdiv@divisor^(0+128),f
  2912     06DA  1903               	skipnz
  2913     06DB  0AA3               	incf	(___awdiv@divisor+1)^(0+128),f
  2914     06DC                     l2637:
  2915     06DC  01A7               	clrf	___awdiv@sign^(0+128)
  2916     06DD  0AA7               	incf	___awdiv@sign^(0+128),f
  2917     06DE                     l2639:
  2918     06DE  1FA5               	btfss	(___awdiv@dividend+1)^(0+128),7
  2919     06DF  2EE1               	goto	u2891
  2920     06E0  2EE2               	goto	u2890
  2921     06E1                     u2891:
  2922     06E1  2EEF               	goto	l2645
  2923     06E2                     u2890:
  2924     06E2                     l2641:
  2925     06E2  09A4               	comf	___awdiv@dividend^(0+128),f
  2926     06E3  09A5               	comf	(___awdiv@dividend+1)^(0+128),f
  2927     06E4  0AA4               	incf	___awdiv@dividend^(0+128),f
  2928     06E5  1903               	skipnz
  2929     06E6  0AA5               	incf	(___awdiv@dividend+1)^(0+128),f
  2930     06E7                     l2643:
  2931     06E7  3001               	movlw	1
  2932     06E8  1283               	bcf	3,5	;RP0=0, select bank0
  2933     06E9  1303               	bcf	3,6	;RP1=0, select bank0
  2934     06EA  00C1               	movwf	??___awdiv
  2935     06EB  0841               	movf	??___awdiv,w
  2936     06EC  1683               	bsf	3,5	;RP0=1, select bank1
  2937     06ED  1303               	bcf	3,6	;RP1=0, select bank1
  2938     06EE  06A7               	xorwf	___awdiv@sign^(0+128),f
  2939     06EF                     l2645:
  2940     06EF  01A8               	clrf	___awdiv@quotient^(0+128)
  2941     06F0  01A9               	clrf	(___awdiv@quotient+1)^(0+128)
  2942     06F1                     l2647:
  2943     06F1  0822               	movf	___awdiv@divisor^(0+128),w
  2944     06F2  0423               	iorwf	(___awdiv@divisor+1)^(0+128),w
  2945     06F3  1903               	btfsc	3,2
  2946     06F4  2EF6               	goto	u2901
  2947     06F5  2EF7               	goto	u2900
  2948     06F6                     u2901:
  2949     06F6  2F32               	goto	l2667
  2950     06F7                     u2900:
  2951     06F7                     l2649:
  2952     06F7  01A6               	clrf	___awdiv@counter^(0+128)
  2953     06F8  0AA6               	incf	___awdiv@counter^(0+128),f
  2954     06F9  2F09               	goto	l2655
  2955     06FA                     l2651:
  2956     06FA  3001               	movlw	1
  2957     06FB                     u2915:
  2958     06FB  1003               	clrc
  2959     06FC  0DA2               	rlf	___awdiv@divisor^(0+128),f
  2960     06FD  0DA3               	rlf	(___awdiv@divisor+1)^(0+128),f
  2961     06FE  3EFF               	addlw	-1
  2962     06FF  1D03               	skipz
  2963     0700  2EFB               	goto	u2915
  2964     0701                     l2653:
  2965     0701  3001               	movlw	1
  2966     0702  1283               	bcf	3,5	;RP0=0, select bank0
  2967     0703  1303               	bcf	3,6	;RP1=0, select bank0
  2968     0704  00C1               	movwf	??___awdiv
  2969     0705  0841               	movf	??___awdiv,w
  2970     0706  1683               	bsf	3,5	;RP0=1, select bank1
  2971     0707  1303               	bcf	3,6	;RP1=0, select bank1
  2972     0708  07A6               	addwf	___awdiv@counter^(0+128),f
  2973     0709                     l2655:
  2974     0709  1FA3               	btfss	(___awdiv@divisor+1)^(0+128),7
  2975     070A  2F0C               	goto	u2921
  2976     070B  2F0D               	goto	u2920
  2977     070C                     u2921:
  2978     070C  2EFA               	goto	l2651
  2979     070D                     u2920:
  2980     070D                     l2657:
  2981     070D  3001               	movlw	1
  2982     070E                     u2935:
  2983     070E  1003               	clrc
  2984     070F  0DA8               	rlf	___awdiv@quotient^(0+128),f
  2985     0710  0DA9               	rlf	(___awdiv@quotient+1)^(0+128),f
  2986     0711  3EFF               	addlw	-1
  2987     0712  1D03               	skipz
  2988     0713  2F0E               	goto	u2935
  2989     0714  0823               	movf	(___awdiv@divisor+1)^(0+128),w
  2990     0715  0225               	subwf	(___awdiv@dividend+1)^(0+128),w
  2991     0716  1D03               	skipz
  2992     0717  2F1A               	goto	u2945
  2993     0718  0822               	movf	___awdiv@divisor^(0+128),w
  2994     0719  0224               	subwf	___awdiv@dividend^(0+128),w
  2995     071A                     u2945:
  2996     071A  1C03               	skipc
  2997     071B  2F1D               	goto	u2941
  2998     071C  2F1E               	goto	u2940
  2999     071D                     u2941:
  3000     071D  2F25               	goto	l2663
  3001     071E                     u2940:
  3002     071E                     l2659:
  3003     071E  0822               	movf	___awdiv@divisor^(0+128),w
  3004     071F  02A4               	subwf	___awdiv@dividend^(0+128),f
  3005     0720  0823               	movf	(___awdiv@divisor+1)^(0+128),w
  3006     0721  1C03               	skipc
  3007     0722  03A5               	decf	(___awdiv@dividend+1)^(0+128),f
  3008     0723  02A5               	subwf	(___awdiv@dividend+1)^(0+128),f
  3009     0724                     l2661:
  3010     0724  1428               	bsf	___awdiv@quotient^(0+128),0
  3011     0725                     l2663:
  3012     0725  3001               	movlw	1
  3013     0726                     u2955:
  3014     0726  1003               	clrc
  3015     0727  0CA3               	rrf	(___awdiv@divisor+1)^(0+128),f
  3016     0728  0CA2               	rrf	___awdiv@divisor^(0+128),f
  3017     0729  3EFF               	addlw	-1
  3018     072A  1D03               	skipz
  3019     072B  2F26               	goto	u2955
  3020     072C                     l2665:
  3021     072C  3001               	movlw	1
  3022     072D  02A6               	subwf	___awdiv@counter^(0+128),f
  3023     072E  1D03               	btfss	3,2
  3024     072F  2F31               	goto	u2961
  3025     0730  2F32               	goto	u2960
  3026     0731                     u2961:
  3027     0731  2F0D               	goto	l2657
  3028     0732                     u2960:
  3029     0732                     l2667:
  3030     0732  0827               	movf	___awdiv@sign^(0+128),w
  3031     0733  1903               	btfsc	3,2
  3032     0734  2F36               	goto	u2971
  3033     0735  2F37               	goto	u2970
  3034     0736                     u2971:
  3035     0736  2F3C               	goto	l2671
  3036     0737                     u2970:
  3037     0737                     l2669:
  3038     0737  09A8               	comf	___awdiv@quotient^(0+128),f
  3039     0738  09A9               	comf	(___awdiv@quotient+1)^(0+128),f
  3040     0739  0AA8               	incf	___awdiv@quotient^(0+128),f
  3041     073A  1903               	skipnz
  3042     073B  0AA9               	incf	(___awdiv@quotient+1)^(0+128),f
  3043     073C                     l2671:
  3044     073C  0829               	movf	(___awdiv@quotient+1)^(0+128),w
  3045     073D  00A3               	movwf	(?___awdiv+1)^(0+128)
  3046     073E  0828               	movf	___awdiv@quotient^(0+128),w
  3047     073F  00A2               	movwf	?___awdiv^(0+128)
  3048     0740                     l533:
  3049     0740  0008               	return
  3050     0741                     __end_of___awdiv:
  3051                           
  3052                           	psect	text9
  3053     0D38                     __ptext9:	
  3054 ;; *************** function _adc_init *****************
  3055 ;; Defined at:
  3056 ;;		line 15 in file "ADC_setup.c"
  3057 ;; Parameters:    Size  Location     Type
  3058 ;;  channel         2   31[BANK0 ] int 
  3059 ;; Auto vars:     Size  Location     Type
  3060 ;;		None
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  1    wreg      void 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0, pclath, cstack
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3070 ;;      Params:         0       2       0       0       0
  3071 ;;      Locals:         0       0       0       0       0
  3072 ;;      Temps:          0       1       0       0       0
  3073 ;;      Totals:         0       3       0       0       0
  3074 ;;Total ram usage:        3 bytes
  3075 ;; Hardware stack levels used: 1
  3076 ;; Hardware stack levels required when called: 4
  3077 ;; This function calls:
  3078 ;;		_adc_change_channel
  3079 ;; This function is called by:
  3080 ;;		_main
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084     0D38                     _adc_init:	
  3085                           ;psect for function _adc_init
  3086                           
  3087     0D38                     l2089:	
  3088                           ;incstack = 0
  3089                           ; Regs used in _adc_init: [wreg+status,2+status,0+pclath+cstack]
  3090                           
  3091                           
  3092                           ;ADC_setup.c: 17:     PIE1bits.ADIE = 1;
  3093     0D38  1683               	bsf	3,5	;RP0=1, select bank1
  3094     0D39  1303               	bcf	3,6	;RP1=0, select bank1
  3095     0D3A  170C               	bsf	12,6	;volatile
  3096                           
  3097                           ;ADC_setup.c: 18:     PIR1bits.ADIF = 0;
  3098     0D3B  1283               	bcf	3,5	;RP0=0, select bank0
  3099     0D3C  1303               	bcf	3,6	;RP1=0, select bank0
  3100     0D3D  130C               	bcf	12,6	;volatile
  3101                           
  3102                           ;ADC_setup.c: 20:     ADCON0bits.ADCS1 = 0;
  3103     0D3E  139F               	bcf	31,7	;volatile
  3104                           
  3105                           ;ADC_setup.c: 21:     ADCON0bits.ADCS0 = 0;
  3106     0D3F  131F               	bcf	31,6	;volatile
  3107                           
  3108                           ;ADC_setup.c: 23:     ADCON1bits.VCFG1 = 0;
  3109     0D40  1683               	bsf	3,5	;RP0=1, select bank1
  3110     0D41  1303               	bcf	3,6	;RP1=0, select bank1
  3111     0D42  129F               	bcf	31,5	;volatile
  3112                           
  3113                           ;ADC_setup.c: 24:     ADCON1bits.VCFG0 = 0;
  3114     0D43  121F               	bcf	31,4	;volatile
  3115                           
  3116                           ;ADC_setup.c: 26:     ADCON1bits.ADFM = 0;
  3117     0D44  139F               	bcf	31,7	;volatile
  3118     0D45                     l2091:
  3119                           
  3120                           ;ADC_setup.c: 28:     adc_change_channel(channel);
  3121     0D45  1283               	bcf	3,5	;RP0=0, select bank0
  3122     0D46  1303               	bcf	3,6	;RP1=0, select bank0
  3123     0D47  0840               	movf	adc_init@channel+1,w
  3124     0D48  00BE               	movwf	adc_change_channel@channel+1
  3125     0D49  083F               	movf	adc_init@channel,w
  3126     0D4A  00BD               	movwf	adc_change_channel@channel
  3127     0D4B  120A  118A  2549  120A  158A  	fcall	_adc_change_channel
  3128     0D50                     l2093:
  3129                           
  3130                           ;ADC_setup.c: 30:     ADCON0bits.ADON = 1;
  3131     0D50  1283               	bcf	3,5	;RP0=0, select bank0
  3132     0D51  1303               	bcf	3,6	;RP1=0, select bank0
  3133     0D52  141F               	bsf	31,0	;volatile
  3134     0D53                     l2095:
  3135                           
  3136                           ;ADC_setup.c: 31:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  3137     0D53  3020               	movlw	32
  3138     0D54  1283               	bcf	3,5	;RP0=0, select bank0
  3139     0D55  1303               	bcf	3,6	;RP1=0, select bank0
  3140     0D56  00C1               	movwf	??_adc_init
  3141     0D57                     u3457:
  3142     0D57  0BC1               	decfsz	??_adc_init,f
  3143     0D58  2D57               	goto	u3457
  3144     0D59  0000               	nop
  3145     0D5A                     l183:
  3146     0D5A  0008               	return
  3147     0D5B                     __end_of_adc_init:
  3148                           
  3149                           	psect	text10
  3150     0549                     __ptext10:	
  3151 ;; *************** function _adc_change_channel *****************
  3152 ;; Defined at:
  3153 ;;		line 38 in file "ADC_setup.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  channel         2   29[BANK0 ] int 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, status,2, status,0
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3167 ;;      Params:         0       2       0       0       0
  3168 ;;      Locals:         0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0
  3170 ;;      Totals:         0       2       0       0       0
  3171 ;;Total ram usage:        2 bytes
  3172 ;; Hardware stack levels used: 1
  3173 ;; Hardware stack levels required when called: 3
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_adc_init
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181     0549                     _adc_change_channel:	
  3182                           ;psect for function _adc_change_channel
  3183                           
  3184     0549                     l1803:	
  3185                           ;incstack = 0
  3186                           ; Regs used in _adc_change_channel: [wreg+status,2+status,0]
  3187                           
  3188                           
  3189                           ;ADC_setup.c: 39:     if(channel == 0){
  3190     0549  1283               	bcf	3,5	;RP0=0, select bank0
  3191     054A  1303               	bcf	3,6	;RP1=0, select bank0
  3192     054B  083D               	movf	adc_change_channel@channel,w
  3193     054C  043E               	iorwf	adc_change_channel@channel+1,w
  3194     054D  1D03               	btfss	3,2
  3195     054E  2D50               	goto	u1531
  3196     054F  2D51               	goto	u1530
  3197     0550                     u1531:
  3198     0550  2D58               	goto	l1809
  3199     0551                     u1530:
  3200     0551                     l1805:
  3201                           
  3202                           ;ADC_setup.c: 40:         ADCON0bits.CHS = 0b0000;
  3203     0551  30C3               	movlw	-61
  3204     0552  059F               	andwf	31,f	;volatile
  3205     0553                     l1807:
  3206                           
  3207                           ;ADC_setup.c: 41:         ANSEL = ANSEL | 0b00000001;
  3208     0553  1683               	bsf	3,5	;RP0=1, select bank3
  3209     0554  1703               	bsf	3,6	;RP1=1, select bank3
  3210     0555  0808               	movf	8,w	;volatile
  3211     0556  3801               	iorlw	1
  3212     0557  0088               	movwf	8	;volatile
  3213     0558                     l1809:
  3214                           
  3215                           ;ADC_setup.c: 43:     if(channel == 1){
  3216     0558  1283               	bcf	3,5	;RP0=0, select bank0
  3217     0559  1303               	bcf	3,6	;RP1=0, select bank0
  3218     055A  033D               	decf	adc_change_channel@channel,w
  3219     055B  043E               	iorwf	adc_change_channel@channel+1,w
  3220     055C  1D03               	btfss	3,2
  3221     055D  2D5F               	goto	u1541
  3222     055E  2D60               	goto	u1540
  3223     055F                     u1541:
  3224     055F  2D69               	goto	l1815
  3225     0560                     u1540:
  3226     0560                     l1811:
  3227                           
  3228                           ;ADC_setup.c: 44:         ADCON0bits.CHS = 0b0001;
  3229     0560  081F               	movf	31,w	;volatile
  3230     0561  39C3               	andlw	-61
  3231     0562  3804               	iorlw	4
  3232     0563  009F               	movwf	31	;volatile
  3233     0564                     l1813:
  3234                           
  3235                           ;ADC_setup.c: 45:         ANSEL = ANSEL | 0b00000010;
  3236     0564  1683               	bsf	3,5	;RP0=1, select bank3
  3237     0565  1703               	bsf	3,6	;RP1=1, select bank3
  3238     0566  0808               	movf	8,w	;volatile
  3239     0567  3802               	iorlw	2
  3240     0568  0088               	movwf	8	;volatile
  3241     0569                     l1815:
  3242                           
  3243                           ;ADC_setup.c: 47:     if(channel == 2){
  3244     0569  3002               	movlw	2
  3245     056A  1283               	bcf	3,5	;RP0=0, select bank0
  3246     056B  1303               	bcf	3,6	;RP1=0, select bank0
  3247     056C  063D               	xorwf	adc_change_channel@channel,w
  3248     056D  043E               	iorwf	adc_change_channel@channel+1,w
  3249     056E  1D03               	btfss	3,2
  3250     056F  2D71               	goto	u1551
  3251     0570  2D72               	goto	u1550
  3252     0571                     u1551:
  3253     0571  2D7B               	goto	l1821
  3254     0572                     u1550:
  3255     0572                     l1817:
  3256                           
  3257                           ;ADC_setup.c: 48:         ADCON0bits.CHS = 0b0010;
  3258     0572  081F               	movf	31,w	;volatile
  3259     0573  39C3               	andlw	-61
  3260     0574  3808               	iorlw	8
  3261     0575  009F               	movwf	31	;volatile
  3262     0576                     l1819:
  3263                           
  3264                           ;ADC_setup.c: 49:         ANSEL = ANSEL | 0b00000100;
  3265     0576  1683               	bsf	3,5	;RP0=1, select bank3
  3266     0577  1703               	bsf	3,6	;RP1=1, select bank3
  3267     0578  0808               	movf	8,w	;volatile
  3268     0579  3804               	iorlw	4
  3269     057A  0088               	movwf	8	;volatile
  3270     057B                     l1821:
  3271                           
  3272                           ;ADC_setup.c: 51:     if(channel == 3){
  3273     057B  3003               	movlw	3
  3274     057C  1283               	bcf	3,5	;RP0=0, select bank0
  3275     057D  1303               	bcf	3,6	;RP1=0, select bank0
  3276     057E  063D               	xorwf	adc_change_channel@channel,w
  3277     057F  043E               	iorwf	adc_change_channel@channel+1,w
  3278     0580  1D03               	btfss	3,2
  3279     0581  2D83               	goto	u1561
  3280     0582  2D84               	goto	u1560
  3281     0583                     u1561:
  3282     0583  2D8D               	goto	l1827
  3283     0584                     u1560:
  3284     0584                     l1823:
  3285                           
  3286                           ;ADC_setup.c: 52:         ADCON0bits.CHS = 0b0011;
  3287     0584  081F               	movf	31,w	;volatile
  3288     0585  39C3               	andlw	-61
  3289     0586  380C               	iorlw	12
  3290     0587  009F               	movwf	31	;volatile
  3291     0588                     l1825:
  3292                           
  3293                           ;ADC_setup.c: 53:         ANSEL = ANSEL | 0b00001000;
  3294     0588  1683               	bsf	3,5	;RP0=1, select bank3
  3295     0589  1703               	bsf	3,6	;RP1=1, select bank3
  3296     058A  0808               	movf	8,w	;volatile
  3297     058B  3808               	iorlw	8
  3298     058C  0088               	movwf	8	;volatile
  3299     058D                     l1827:
  3300                           
  3301                           ;ADC_setup.c: 55:     if(channel == 4){
  3302     058D  3004               	movlw	4
  3303     058E  1283               	bcf	3,5	;RP0=0, select bank0
  3304     058F  1303               	bcf	3,6	;RP1=0, select bank0
  3305     0590  063D               	xorwf	adc_change_channel@channel,w
  3306     0591  043E               	iorwf	adc_change_channel@channel+1,w
  3307     0592  1D03               	btfss	3,2
  3308     0593  2D95               	goto	u1571
  3309     0594  2D96               	goto	u1570
  3310     0595                     u1571:
  3311     0595  2D9F               	goto	l1833
  3312     0596                     u1570:
  3313     0596                     l1829:
  3314                           
  3315                           ;ADC_setup.c: 56:         ADCON0bits.CHS = 0b0100;
  3316     0596  081F               	movf	31,w	;volatile
  3317     0597  39C3               	andlw	-61
  3318     0598  3810               	iorlw	16
  3319     0599  009F               	movwf	31	;volatile
  3320     059A                     l1831:
  3321                           
  3322                           ;ADC_setup.c: 57:         ANSEL = ANSEL | 0b00010000;
  3323     059A  1683               	bsf	3,5	;RP0=1, select bank3
  3324     059B  1703               	bsf	3,6	;RP1=1, select bank3
  3325     059C  0808               	movf	8,w	;volatile
  3326     059D  3810               	iorlw	16
  3327     059E  0088               	movwf	8	;volatile
  3328     059F                     l1833:
  3329                           
  3330                           ;ADC_setup.c: 59:     if(channel == 5){
  3331     059F  3005               	movlw	5
  3332     05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3333     05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3334     05A2  063D               	xorwf	adc_change_channel@channel,w
  3335     05A3  043E               	iorwf	adc_change_channel@channel+1,w
  3336     05A4  1D03               	btfss	3,2
  3337     05A5  2DA7               	goto	u1581
  3338     05A6  2DA8               	goto	u1580
  3339     05A7                     u1581:
  3340     05A7  2DB1               	goto	l1839
  3341     05A8                     u1580:
  3342     05A8                     l1835:
  3343                           
  3344                           ;ADC_setup.c: 60:         ADCON0bits.CHS = 0b0101;
  3345     05A8  081F               	movf	31,w	;volatile
  3346     05A9  39C3               	andlw	-61
  3347     05AA  3814               	iorlw	20
  3348     05AB  009F               	movwf	31	;volatile
  3349     05AC                     l1837:
  3350                           
  3351                           ;ADC_setup.c: 61:         ANSEL = ANSEL | 0b00100000;
  3352     05AC  1683               	bsf	3,5	;RP0=1, select bank3
  3353     05AD  1703               	bsf	3,6	;RP1=1, select bank3
  3354     05AE  0808               	movf	8,w	;volatile
  3355     05AF  3820               	iorlw	32
  3356     05B0  0088               	movwf	8	;volatile
  3357     05B1                     l1839:
  3358                           
  3359                           ;ADC_setup.c: 63:     if(channel == 6){
  3360     05B1  3006               	movlw	6
  3361     05B2  1283               	bcf	3,5	;RP0=0, select bank0
  3362     05B3  1303               	bcf	3,6	;RP1=0, select bank0
  3363     05B4  063D               	xorwf	adc_change_channel@channel,w
  3364     05B5  043E               	iorwf	adc_change_channel@channel+1,w
  3365     05B6  1D03               	btfss	3,2
  3366     05B7  2DB9               	goto	u1591
  3367     05B8  2DBA               	goto	u1590
  3368     05B9                     u1591:
  3369     05B9  2DC3               	goto	l1845
  3370     05BA                     u1590:
  3371     05BA                     l1841:
  3372                           
  3373                           ;ADC_setup.c: 64:         ADCON0bits.CHS = 0b0110;
  3374     05BA  081F               	movf	31,w	;volatile
  3375     05BB  39C3               	andlw	-61
  3376     05BC  3818               	iorlw	24
  3377     05BD  009F               	movwf	31	;volatile
  3378     05BE                     l1843:
  3379                           
  3380                           ;ADC_setup.c: 65:         ANSEL = ANSEL | 0b01000000;
  3381     05BE  1683               	bsf	3,5	;RP0=1, select bank3
  3382     05BF  1703               	bsf	3,6	;RP1=1, select bank3
  3383     05C0  0808               	movf	8,w	;volatile
  3384     05C1  3840               	iorlw	64
  3385     05C2  0088               	movwf	8	;volatile
  3386     05C3                     l1845:
  3387                           
  3388                           ;ADC_setup.c: 67:     if(channel == 7){
  3389     05C3  3007               	movlw	7
  3390     05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3391     05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3392     05C6  063D               	xorwf	adc_change_channel@channel,w
  3393     05C7  043E               	iorwf	adc_change_channel@channel+1,w
  3394     05C8  1D03               	btfss	3,2
  3395     05C9  2DCB               	goto	u1601
  3396     05CA  2DCC               	goto	u1600
  3397     05CB                     u1601:
  3398     05CB  2DD5               	goto	l1851
  3399     05CC                     u1600:
  3400     05CC                     l1847:
  3401                           
  3402                           ;ADC_setup.c: 68:         ADCON0bits.CHS = 0b0111;
  3403     05CC  081F               	movf	31,w	;volatile
  3404     05CD  39C3               	andlw	-61
  3405     05CE  381C               	iorlw	28
  3406     05CF  009F               	movwf	31	;volatile
  3407     05D0                     l1849:
  3408                           
  3409                           ;ADC_setup.c: 69:         ANSEL = ANSEL | 0b10000000;
  3410     05D0  1683               	bsf	3,5	;RP0=1, select bank3
  3411     05D1  1703               	bsf	3,6	;RP1=1, select bank3
  3412     05D2  0808               	movf	8,w	;volatile
  3413     05D3  3880               	iorlw	128
  3414     05D4  0088               	movwf	8	;volatile
  3415     05D5                     l1851:
  3416                           
  3417                           ;ADC_setup.c: 71:     if(channel == 8){
  3418     05D5  3008               	movlw	8
  3419     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  3420     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  3421     05D8  063D               	xorwf	adc_change_channel@channel,w
  3422     05D9  043E               	iorwf	adc_change_channel@channel+1,w
  3423     05DA  1D03               	btfss	3,2
  3424     05DB  2DDD               	goto	u1611
  3425     05DC  2DDE               	goto	u1610
  3426     05DD                     u1611:
  3427     05DD  2DE7               	goto	l1857
  3428     05DE                     u1610:
  3429     05DE                     l1853:
  3430                           
  3431                           ;ADC_setup.c: 72:         ADCON0bits.CHS = 0b1000;
  3432     05DE  081F               	movf	31,w	;volatile
  3433     05DF  39C3               	andlw	-61
  3434     05E0  3820               	iorlw	32
  3435     05E1  009F               	movwf	31	;volatile
  3436     05E2                     l1855:
  3437                           
  3438                           ;ADC_setup.c: 73:         ANSELH = ANSELH | 0b00000001;
  3439     05E2  1683               	bsf	3,5	;RP0=1, select bank3
  3440     05E3  1703               	bsf	3,6	;RP1=1, select bank3
  3441     05E4  0809               	movf	9,w	;volatile
  3442     05E5  3801               	iorlw	1
  3443     05E6  0089               	movwf	9	;volatile
  3444     05E7                     l1857:
  3445                           
  3446                           ;ADC_setup.c: 75:     if(channel == 9){
  3447     05E7  3009               	movlw	9
  3448     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3449     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3450     05EA  063D               	xorwf	adc_change_channel@channel,w
  3451     05EB  043E               	iorwf	adc_change_channel@channel+1,w
  3452     05EC  1D03               	btfss	3,2
  3453     05ED  2DEF               	goto	u1621
  3454     05EE  2DF0               	goto	u1620
  3455     05EF                     u1621:
  3456     05EF  2DF9               	goto	l1863
  3457     05F0                     u1620:
  3458     05F0                     l1859:
  3459                           
  3460                           ;ADC_setup.c: 76:         ADCON0bits.CHS = 0b1001;
  3461     05F0  081F               	movf	31,w	;volatile
  3462     05F1  39C3               	andlw	-61
  3463     05F2  3824               	iorlw	36
  3464     05F3  009F               	movwf	31	;volatile
  3465     05F4                     l1861:
  3466                           
  3467                           ;ADC_setup.c: 77:         ANSELH = ANSELH | 0b00000010;
  3468     05F4  1683               	bsf	3,5	;RP0=1, select bank3
  3469     05F5  1703               	bsf	3,6	;RP1=1, select bank3
  3470     05F6  0809               	movf	9,w	;volatile
  3471     05F7  3802               	iorlw	2
  3472     05F8  0089               	movwf	9	;volatile
  3473     05F9                     l1863:
  3474                           
  3475                           ;ADC_setup.c: 79:     if(channel == 10){
  3476     05F9  300A               	movlw	10
  3477     05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3478     05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3479     05FC  063D               	xorwf	adc_change_channel@channel,w
  3480     05FD  043E               	iorwf	adc_change_channel@channel+1,w
  3481     05FE  1D03               	btfss	3,2
  3482     05FF  2E01               	goto	u1631
  3483     0600  2E02               	goto	u1630
  3484     0601                     u1631:
  3485     0601  2E0B               	goto	l1869
  3486     0602                     u1630:
  3487     0602                     l1865:
  3488                           
  3489                           ;ADC_setup.c: 80:         ADCON0bits.CHS = 0b1010;
  3490     0602  081F               	movf	31,w	;volatile
  3491     0603  39C3               	andlw	-61
  3492     0604  3828               	iorlw	40
  3493     0605  009F               	movwf	31	;volatile
  3494     0606                     l1867:
  3495                           
  3496                           ;ADC_setup.c: 81:         ANSELH = ANSELH | 0b00000100;
  3497     0606  1683               	bsf	3,5	;RP0=1, select bank3
  3498     0607  1703               	bsf	3,6	;RP1=1, select bank3
  3499     0608  0809               	movf	9,w	;volatile
  3500     0609  3804               	iorlw	4
  3501     060A  0089               	movwf	9	;volatile
  3502     060B                     l1869:
  3503                           
  3504                           ;ADC_setup.c: 83:     if(channel == 11){
  3505     060B  300B               	movlw	11
  3506     060C  1283               	bcf	3,5	;RP0=0, select bank0
  3507     060D  1303               	bcf	3,6	;RP1=0, select bank0
  3508     060E  063D               	xorwf	adc_change_channel@channel,w
  3509     060F  043E               	iorwf	adc_change_channel@channel+1,w
  3510     0610  1D03               	btfss	3,2
  3511     0611  2E13               	goto	u1641
  3512     0612  2E14               	goto	u1640
  3513     0613                     u1641:
  3514     0613  2E1D               	goto	l1875
  3515     0614                     u1640:
  3516     0614                     l1871:
  3517                           
  3518                           ;ADC_setup.c: 84:         ADCON0bits.CHS = 0b1011;
  3519     0614  081F               	movf	31,w	;volatile
  3520     0615  39C3               	andlw	-61
  3521     0616  382C               	iorlw	44
  3522     0617  009F               	movwf	31	;volatile
  3523     0618                     l1873:
  3524                           
  3525                           ;ADC_setup.c: 85:         ANSELH = ANSELH | 0b00001000;
  3526     0618  1683               	bsf	3,5	;RP0=1, select bank3
  3527     0619  1703               	bsf	3,6	;RP1=1, select bank3
  3528     061A  0809               	movf	9,w	;volatile
  3529     061B  3808               	iorlw	8
  3530     061C  0089               	movwf	9	;volatile
  3531     061D                     l1875:
  3532                           
  3533                           ;ADC_setup.c: 87:     if(channel == 12){
  3534     061D  300C               	movlw	12
  3535     061E  1283               	bcf	3,5	;RP0=0, select bank0
  3536     061F  1303               	bcf	3,6	;RP1=0, select bank0
  3537     0620  063D               	xorwf	adc_change_channel@channel,w
  3538     0621  043E               	iorwf	adc_change_channel@channel+1,w
  3539     0622  1D03               	btfss	3,2
  3540     0623  2E25               	goto	u1651
  3541     0624  2E26               	goto	u1650
  3542     0625                     u1651:
  3543     0625  2E2F               	goto	l1881
  3544     0626                     u1650:
  3545     0626                     l1877:
  3546                           
  3547                           ;ADC_setup.c: 88:         ADCON0bits.CHS = 0b1100;
  3548     0626  081F               	movf	31,w	;volatile
  3549     0627  39C3               	andlw	-61
  3550     0628  3830               	iorlw	48
  3551     0629  009F               	movwf	31	;volatile
  3552     062A                     l1879:
  3553                           
  3554                           ;ADC_setup.c: 89:         ANSELH = ANSELH | 0b00010000;
  3555     062A  1683               	bsf	3,5	;RP0=1, select bank3
  3556     062B  1703               	bsf	3,6	;RP1=1, select bank3
  3557     062C  0809               	movf	9,w	;volatile
  3558     062D  3810               	iorlw	16
  3559     062E  0089               	movwf	9	;volatile
  3560     062F                     l1881:
  3561                           
  3562                           ;ADC_setup.c: 91:     if(channel == 13){
  3563     062F  300D               	movlw	13
  3564     0630  1283               	bcf	3,5	;RP0=0, select bank0
  3565     0631  1303               	bcf	3,6	;RP1=0, select bank0
  3566     0632  063D               	xorwf	adc_change_channel@channel,w
  3567     0633  043E               	iorwf	adc_change_channel@channel+1,w
  3568     0634  1D03               	btfss	3,2
  3569     0635  2E37               	goto	u1661
  3570     0636  2E38               	goto	u1660
  3571     0637                     u1661:
  3572     0637  2E41               	goto	l203
  3573     0638                     u1660:
  3574     0638                     l1883:
  3575                           
  3576                           ;ADC_setup.c: 92:         ADCON0bits.CHS = 0b1101;
  3577     0638  081F               	movf	31,w	;volatile
  3578     0639  39C3               	andlw	-61
  3579     063A  3834               	iorlw	52
  3580     063B  009F               	movwf	31	;volatile
  3581     063C                     l1885:
  3582                           
  3583                           ;ADC_setup.c: 93:         ANSELH = ANSELH | 0b00100000;
  3584     063C  1683               	bsf	3,5	;RP0=1, select bank3
  3585     063D  1703               	bsf	3,6	;RP1=1, select bank3
  3586     063E  0809               	movf	9,w	;volatile
  3587     063F  3820               	iorlw	32
  3588     0640  0089               	movwf	9	;volatile
  3589     0641                     l203:
  3590     0641  0008               	return
  3591     0642                     __end_of_adc_change_channel:
  3592                           
  3593                           	psect	text11
  3594     07A5                     __ptext11:	
  3595 ;; *************** function ___awmod *****************
  3596 ;; Defined at:
  3597 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  divisor         2   10[BANK1 ] int 
  3600 ;;  dividend        2   12[BANK1 ] int 
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;  sign            1   16[BANK1 ] unsigned char 
  3603 ;;  counter         1   15[BANK1 ] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  2   10[BANK1 ] int 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3613 ;;      Params:         0       0       4       0       0
  3614 ;;      Locals:         0       0       2       0       0
  3615 ;;      Temps:          0       0       1       0       0
  3616 ;;      Totals:         0       0       7       0       0
  3617 ;;Total ram usage:        7 bytes
  3618 ;; Hardware stack levels used: 1
  3619 ;; Hardware stack levels required when called: 3
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_main
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627     07A5                     ___awmod:	
  3628                           ;psect for function ___awmod
  3629                           
  3630     07A5                     l2879:	
  3631                           ;incstack = 0
  3632                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3633                           
  3634     07A5  1683               	bsf	3,5	;RP0=1, select bank1
  3635     07A6  1303               	bcf	3,6	;RP1=0, select bank1
  3636     07A7  01B0               	clrf	___awmod@sign^(0+128)
  3637     07A8                     l2881:
  3638     07A8  1FAD               	btfss	(___awmod@dividend+1)^(0+128),7
  3639     07A9  2FAB               	goto	u3341
  3640     07AA  2FAC               	goto	u3340
  3641     07AB                     u3341:
  3642     07AB  2FB3               	goto	l2887
  3643     07AC                     u3340:
  3644     07AC                     l2883:
  3645     07AC  09AC               	comf	___awmod@dividend^(0+128),f
  3646     07AD  09AD               	comf	(___awmod@dividend+1)^(0+128),f
  3647     07AE  0AAC               	incf	___awmod@dividend^(0+128),f
  3648     07AF  1903               	skipnz
  3649     07B0  0AAD               	incf	(___awmod@dividend+1)^(0+128),f
  3650     07B1                     l2885:
  3651     07B1  01B0               	clrf	___awmod@sign^(0+128)
  3652     07B2  0AB0               	incf	___awmod@sign^(0+128),f
  3653     07B3                     l2887:
  3654     07B3  1FAB               	btfss	(___awmod@divisor+1)^(0+128),7
  3655     07B4  2FB6               	goto	u3351
  3656     07B5  2FB7               	goto	u3350
  3657     07B6                     u3351:
  3658     07B6  2FBC               	goto	l2891
  3659     07B7                     u3350:
  3660     07B7                     l2889:
  3661     07B7  09AA               	comf	___awmod@divisor^(0+128),f
  3662     07B8  09AB               	comf	(___awmod@divisor+1)^(0+128),f
  3663     07B9  0AAA               	incf	___awmod@divisor^(0+128),f
  3664     07BA  1903               	skipnz
  3665     07BB  0AAB               	incf	(___awmod@divisor+1)^(0+128),f
  3666     07BC                     l2891:
  3667     07BC  082A               	movf	___awmod@divisor^(0+128),w
  3668     07BD  042B               	iorwf	(___awmod@divisor+1)^(0+128),w
  3669     07BE  1903               	btfsc	3,2
  3670     07BF  2FC1               	goto	u3361
  3671     07C0  2FC2               	goto	u3360
  3672     07C1                     u3361:
  3673     07C1  2FF1               	goto	l2909
  3674     07C2                     u3360:
  3675     07C2                     l2893:
  3676     07C2  01AF               	clrf	___awmod@counter^(0+128)
  3677     07C3  0AAF               	incf	___awmod@counter^(0+128),f
  3678     07C4  2FD0               	goto	l2899
  3679     07C5                     l2895:
  3680     07C5  3001               	movlw	1
  3681     07C6                     u3375:
  3682     07C6  1003               	clrc
  3683     07C7  0DAA               	rlf	___awmod@divisor^(0+128),f
  3684     07C8  0DAB               	rlf	(___awmod@divisor+1)^(0+128),f
  3685     07C9  3EFF               	addlw	-1
  3686     07CA  1D03               	skipz
  3687     07CB  2FC6               	goto	u3375
  3688     07CC                     l2897:
  3689     07CC  3001               	movlw	1
  3690     07CD  00AE               	movwf	??___awmod^(0+128)
  3691     07CE  082E               	movf	??___awmod^(0+128),w
  3692     07CF  07AF               	addwf	___awmod@counter^(0+128),f
  3693     07D0                     l2899:
  3694     07D0  1FAB               	btfss	(___awmod@divisor+1)^(0+128),7
  3695     07D1  2FD3               	goto	u3381
  3696     07D2  2FD4               	goto	u3380
  3697     07D3                     u3381:
  3698     07D3  2FC5               	goto	l2895
  3699     07D4                     u3380:
  3700     07D4                     l2901:
  3701     07D4  082B               	movf	(___awmod@divisor+1)^(0+128),w
  3702     07D5  022D               	subwf	(___awmod@dividend+1)^(0+128),w
  3703     07D6  1D03               	skipz
  3704     07D7  2FDA               	goto	u3395
  3705     07D8  082A               	movf	___awmod@divisor^(0+128),w
  3706     07D9  022C               	subwf	___awmod@dividend^(0+128),w
  3707     07DA                     u3395:
  3708     07DA  1C03               	skipc
  3709     07DB  2FDD               	goto	u3391
  3710     07DC  2FDE               	goto	u3390
  3711     07DD                     u3391:
  3712     07DD  2FE4               	goto	l2905
  3713     07DE                     u3390:
  3714     07DE                     l2903:
  3715     07DE  082A               	movf	___awmod@divisor^(0+128),w
  3716     07DF  02AC               	subwf	___awmod@dividend^(0+128),f
  3717     07E0  082B               	movf	(___awmod@divisor+1)^(0+128),w
  3718     07E1  1C03               	skipc
  3719     07E2  03AD               	decf	(___awmod@dividend+1)^(0+128),f
  3720     07E3  02AD               	subwf	(___awmod@dividend+1)^(0+128),f
  3721     07E4                     l2905:
  3722     07E4  3001               	movlw	1
  3723     07E5                     u3405:
  3724     07E5  1003               	clrc
  3725     07E6  0CAB               	rrf	(___awmod@divisor+1)^(0+128),f
  3726     07E7  0CAA               	rrf	___awmod@divisor^(0+128),f
  3727     07E8  3EFF               	addlw	-1
  3728     07E9  1D03               	skipz
  3729     07EA  2FE5               	goto	u3405
  3730     07EB                     l2907:
  3731     07EB  3001               	movlw	1
  3732     07EC  02AF               	subwf	___awmod@counter^(0+128),f
  3733     07ED  1D03               	btfss	3,2
  3734     07EE  2FF0               	goto	u3411
  3735     07EF  2FF1               	goto	u3410
  3736     07F0                     u3411:
  3737     07F0  2FD4               	goto	l2901
  3738     07F1                     u3410:
  3739     07F1                     l2909:
  3740     07F1  0830               	movf	___awmod@sign^(0+128),w
  3741     07F2  1903               	btfsc	3,2
  3742     07F3  2FF5               	goto	u3421
  3743     07F4  2FF6               	goto	u3420
  3744     07F5                     u3421:
  3745     07F5  2FFB               	goto	l2913
  3746     07F6                     u3420:
  3747     07F6                     l2911:
  3748     07F6  09AC               	comf	___awmod@dividend^(0+128),f
  3749     07F7  09AD               	comf	(___awmod@dividend+1)^(0+128),f
  3750     07F8  0AAC               	incf	___awmod@dividend^(0+128),f
  3751     07F9  1903               	skipnz
  3752     07FA  0AAD               	incf	(___awmod@dividend+1)^(0+128),f
  3753     07FB                     l2913:
  3754     07FB  082D               	movf	(___awmod@dividend+1)^(0+128),w
  3755     07FC  00AB               	movwf	(?___awmod+1)^(0+128)
  3756     07FD  082C               	movf	___awmod@dividend^(0+128),w
  3757     07FE  00AA               	movwf	?___awmod^(0+128)
  3758     07FF                     l546:
  3759     07FF  0008               	return
  3760     0800                     __end_of___awmod:
  3761                           
  3762                           	psect	text12
  3763     0D1A                     __ptext12:	
  3764 ;; *************** function _UART_config *****************
  3765 ;; Defined at:
  3766 ;;		line 11 in file "UART.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;  baudrate        2   29[BANK0 ] unsigned int 
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;                  1    wreg      void 
  3773 ;; Registers used:
  3774 ;;		wreg, status,2, status,0
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3780 ;;      Params:         0       2       0       0       0
  3781 ;;      Locals:         0       0       0       0       0
  3782 ;;      Temps:          0       0       0       0       0
  3783 ;;      Totals:         0       2       0       0       0
  3784 ;;Total ram usage:        2 bytes
  3785 ;; Hardware stack levels used: 1
  3786 ;; Hardware stack levels required when called: 3
  3787 ;; This function calls:
  3788 ;;		Nothing
  3789 ;; This function is called by:
  3790 ;;		_main
  3791 ;; This function uses a non-reentrant model
  3792 ;;
  3793                           
  3794     0D1A                     _UART_config:	
  3795                           ;psect for function _UART_config
  3796                           
  3797     0D1A                     l2097:	
  3798                           ;incstack = 0
  3799                           ; Regs used in _UART_config: [wreg+status,2+status,0]
  3800                           
  3801                           
  3802                           ;UART.c: 12:     PIE1bits.RCIE = 1;
  3803     0D1A  1683               	bsf	3,5	;RP0=1, select bank1
  3804     0D1B  1303               	bcf	3,6	;RP1=0, select bank1
  3805     0D1C  168C               	bsf	12,5	;volatile
  3806     0D1D                     l2099:
  3807                           
  3808                           ;UART.c: 14:     if (baudrate == 4800){
  3809     0D1D  30C0               	movlw	192
  3810     0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  3811     0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  3812     0D20  063D               	xorwf	UART_config@baudrate,w
  3813     0D21  3012               	movlw	18
  3814     0D22  1903               	skipnz
  3815     0D23  063E               	xorwf	UART_config@baudrate+1,w
  3816     0D24  1D03               	btfss	3,2
  3817     0D25  2D27               	goto	u2151
  3818     0D26  2D28               	goto	u2150
  3819     0D27                     u2151:
  3820     0D27  2D37               	goto	l237
  3821     0D28                     u2150:
  3822     0D28                     l2101:
  3823                           
  3824                           ;UART.c: 15:     SPBRG = 12;
  3825     0D28  300C               	movlw	12
  3826     0D29  1683               	bsf	3,5	;RP0=1, select bank1
  3827     0D2A  1303               	bcf	3,6	;RP1=0, select bank1
  3828     0D2B  0099               	movwf	25	;volatile
  3829     0D2C                     l2103:
  3830                           
  3831                           ;UART.c: 17:     TXSTAbits.SYNC = 0;
  3832     0D2C  1218               	bcf	24,4	;volatile
  3833     0D2D                     l2105:
  3834                           
  3835                           ;UART.c: 18:     RCSTAbits.SPEN = 1;
  3836     0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  3837     0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  3838     0D2F  1798               	bsf	24,7	;volatile
  3839     0D30                     l2107:
  3840                           
  3841                           ;UART.c: 20:     TXSTAbits.TXEN = 1;
  3842     0D30  1683               	bsf	3,5	;RP0=1, select bank1
  3843     0D31  1303               	bcf	3,6	;RP1=0, select bank1
  3844     0D32  1698               	bsf	24,5	;volatile
  3845     0D33                     l2109:
  3846                           
  3847                           ;UART.c: 21:     PIR1bits.TXIF = 0;
  3848     0D33  1283               	bcf	3,5	;RP0=0, select bank0
  3849     0D34  1303               	bcf	3,6	;RP1=0, select bank0
  3850     0D35  120C               	bcf	12,4	;volatile
  3851     0D36                     l2111:
  3852                           
  3853                           ;UART.c: 22:     RCSTAbits.CREN = 1;
  3854     0D36  1618               	bsf	24,4	;volatile
  3855     0D37                     l237:
  3856     0D37  0008               	return
  3857     0D38                     __end_of_UART_config:
  3858                           
  3859                           	psect	text13
  3860     0741                     __ptext13:	
  3861 ;; *************** function _Lcd_Write_String *****************
  3862 ;; Defined at:
  3863 ;;		line 103 in file "LCD.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  a               2   32[BANK0 ] PTR unsigned char 
  3866 ;;		 -> display_counter(1), display(3), STR_2(7), STR_1(6), 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  i               2    3[BANK1 ] int 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3878 ;;      Params:         0       2       0       0       0
  3879 ;;      Locals:         0       0       2       0       0
  3880 ;;      Temps:          0       0       3       0       0
  3881 ;;      Totals:         0       2       5       0       0
  3882 ;;Total ram usage:        7 bytes
  3883 ;; Hardware stack levels used: 1
  3884 ;; Hardware stack levels required when called: 5
  3885 ;; This function calls:
  3886 ;;		_Lcd_Write_Char
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892     0741                     _Lcd_Write_String:	
  3893                           ;psect for function _Lcd_Write_String
  3894                           
  3895     0741                     l2749:	
  3896                           ;incstack = 0
  3897                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3898                           
  3899                           
  3900                           ;LCD.c: 104:     int i;;LCD.c: 105:     for (i = 0; a[i] != '\0'; i++)
  3901     0741  1683               	bsf	3,5	;RP0=1, select bank1
  3902     0742  1303               	bcf	3,6	;RP1=0, select bank1
  3903     0743  01A3               	clrf	Lcd_Write_String@i^(0+128)
  3904     0744  01A4               	clrf	(Lcd_Write_String@i+1)^(0+128)
  3905     0745  2F7A               	goto	l2755
  3906     0746                     l2751:
  3907                           
  3908                           ;LCD.c: 106:         Lcd_Write_Char(a[i]);
  3909     0746  1683               	bsf	3,5	;RP0=1, select bank1
  3910     0747  1303               	bcf	3,6	;RP1=0, select bank1
  3911     0748  0823               	movf	Lcd_Write_String@i^(0+128),w
  3912     0749  1283               	bcf	3,5	;RP0=0, select bank0
  3913     074A  1303               	bcf	3,6	;RP1=0, select bank0
  3914     074B  0740               	addwf	Lcd_Write_String@a,w
  3915     074C  1683               	bsf	3,5	;RP0=1, select bank1
  3916     074D  1303               	bcf	3,6	;RP1=0, select bank1
  3917     074E  00A1               	movwf	(??_Lcd_Write_String+1)^(0+128)
  3918     074F  1283               	bcf	3,5	;RP0=0, select bank0
  3919     0750  1303               	bcf	3,6	;RP1=0, select bank0
  3920     0751  0841               	movf	Lcd_Write_String@a+1,w
  3921     0752  1683               	bsf	3,5	;RP0=1, select bank1
  3922     0753  1303               	bcf	3,6	;RP1=0, select bank1
  3923     0754  00A0               	movwf	??_Lcd_Write_String^(0+128)
  3924     0755  1803               	skipnc
  3925     0756  0AA0               	incf	??_Lcd_Write_String^(0+128),f
  3926     0757  1FA3               	btfss	Lcd_Write_String@i^(0+128),7
  3927     0758  2F5A               	goto	u3130
  3928     0759  03A0               	decf	??_Lcd_Write_String^(0+128),f
  3929     075A                     u3130:
  3930     075A  1683               	bsf	3,5	;RP0=1, select bank1
  3931     075B  1303               	bcf	3,6	;RP1=0, select bank1
  3932     075C  0820               	movf	??_Lcd_Write_String^(0+128),w
  3933     075D  00A2               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  3934     075E  0822               	movf	(??_Lcd_Write_String+2)^(0+128),w
  3935     075F  1283               	bcf	3,5	;RP0=0, select bank0
  3936     0760  1303               	bcf	3,6	;RP1=0, select bank0
  3937     0761  00FF               	movwf	btemp+1
  3938     0762  1683               	bsf	3,5	;RP0=1, select bank1
  3939     0763  1303               	bcf	3,6	;RP1=0, select bank1
  3940     0764  0821               	movf	(??_Lcd_Write_String+1)^(0+128),w
  3941     0765  0084               	movwf	4
  3942     0766  1283               	bcf	3,5	;RP0=0, select bank0
  3943     0767  1303               	bcf	3,6	;RP1=0, select bank0
  3944     0768  120A  158A  2000  120A  118A  	fcall	stringtab
  3945     076D  120A  158A  24E6  120A  118A  	fcall	_Lcd_Write_Char
  3946     0772                     l2753:
  3947     0772  3001               	movlw	1
  3948     0773  1683               	bsf	3,5	;RP0=1, select bank1
  3949     0774  1303               	bcf	3,6	;RP1=0, select bank1
  3950     0775  07A3               	addwf	Lcd_Write_String@i^(0+128),f
  3951     0776  1803               	skipnc
  3952     0777  0AA4               	incf	(Lcd_Write_String@i+1)^(0+128),f
  3953     0778  3000               	movlw	0
  3954     0779  07A4               	addwf	(Lcd_Write_String@i+1)^(0+128),f
  3955     077A                     l2755:
  3956     077A  0823               	movf	Lcd_Write_String@i^(0+128),w
  3957     077B  1283               	bcf	3,5	;RP0=0, select bank0
  3958     077C  1303               	bcf	3,6	;RP1=0, select bank0
  3959     077D  0740               	addwf	Lcd_Write_String@a,w
  3960     077E  1683               	bsf	3,5	;RP0=1, select bank1
  3961     077F  1303               	bcf	3,6	;RP1=0, select bank1
  3962     0780  00A1               	movwf	(??_Lcd_Write_String+1)^(0+128)
  3963     0781  1283               	bcf	3,5	;RP0=0, select bank0
  3964     0782  1303               	bcf	3,6	;RP1=0, select bank0
  3965     0783  0841               	movf	Lcd_Write_String@a+1,w
  3966     0784  1683               	bsf	3,5	;RP0=1, select bank1
  3967     0785  1303               	bcf	3,6	;RP1=0, select bank1
  3968     0786  00A0               	movwf	??_Lcd_Write_String^(0+128)
  3969     0787  1803               	skipnc
  3970     0788  0AA0               	incf	??_Lcd_Write_String^(0+128),f
  3971     0789  1FA3               	btfss	Lcd_Write_String@i^(0+128),7
  3972     078A  2F8C               	goto	u3140
  3973     078B  03A0               	decf	??_Lcd_Write_String^(0+128),f
  3974     078C                     u3140:
  3975     078C  1683               	bsf	3,5	;RP0=1, select bank1
  3976     078D  1303               	bcf	3,6	;RP1=0, select bank1
  3977     078E  0820               	movf	??_Lcd_Write_String^(0+128),w
  3978     078F  00A2               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  3979     0790  0822               	movf	(??_Lcd_Write_String+2)^(0+128),w
  3980     0791  1283               	bcf	3,5	;RP0=0, select bank0
  3981     0792  1303               	bcf	3,6	;RP1=0, select bank0
  3982     0793  00FF               	movwf	btemp+1
  3983     0794  1683               	bsf	3,5	;RP0=1, select bank1
  3984     0795  1303               	bcf	3,6	;RP1=0, select bank1
  3985     0796  0821               	movf	(??_Lcd_Write_String+1)^(0+128),w
  3986     0797  0084               	movwf	4
  3987     0798  1283               	bcf	3,5	;RP0=0, select bank0
  3988     0799  1303               	bcf	3,6	;RP1=0, select bank0
  3989     079A  120A  158A  2000  120A  118A  	fcall	stringtab
  3990     079F  3A00               	xorlw	0
  3991     07A0  1D03               	skipz
  3992     07A1  2FA3               	goto	u3151
  3993     07A2  2FA4               	goto	u3150
  3994     07A3                     u3151:
  3995     07A3  2F46               	goto	l2751
  3996     07A4                     u3150:
  3997     07A4                     l156:
  3998     07A4  0008               	return
  3999     07A5                     __end_of_Lcd_Write_String:
  4000                           
  4001                           	psect	text14
  4002     0CE6                     __ptext14:	
  4003 ;; *************** function _Lcd_Write_Char *****************
  4004 ;; Defined at:
  4005 ;;		line 95 in file "LCD.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  a               1    wreg     unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  a               1   31[BANK0 ] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4019 ;;      Params:         0       0       0       0       0
  4020 ;;      Locals:         0       1       0       0       0
  4021 ;;      Temps:          0       1       0       0       0
  4022 ;;      Totals:         0       2       0       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used: 1
  4025 ;; Hardware stack levels required when called: 4
  4026 ;; This function calls:
  4027 ;;		_Lcd_Port
  4028 ;; This function is called by:
  4029 ;;		_Lcd_Write_String
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033     0CE6                     _Lcd_Write_Char:	
  4034                           ;psect for function _Lcd_Write_Char
  4035                           
  4036                           
  4037                           ;incstack = 0
  4038                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  4039                           ;Lcd_Write_Char@a stored from wreg
  4040     0CE6  1283               	bcf	3,5	;RP0=0, select bank0
  4041     0CE7  1303               	bcf	3,6	;RP1=0, select bank0
  4042     0CE8  00BF               	movwf	Lcd_Write_Char@a
  4043     0CE9                     l2607:
  4044                           
  4045                           ;LCD.c: 96:     PORTCbits.RC4 = 1;
  4046     0CE9  1607               	bsf	7,4	;volatile
  4047     0CEA                     l2609:
  4048                           
  4049                           ;LCD.c: 97:     Lcd_Port(a);
  4050     0CEA  083F               	movf	Lcd_Write_Char@a,w
  4051     0CEB  120A  158A  2641  120A  158A  	fcall	_Lcd_Port
  4052     0CF0                     l2611:
  4053                           
  4054                           ;LCD.c: 98:     PORTCbits.RC5 = 1;
  4055     0CF0  1283               	bcf	3,5	;RP0=0, select bank0
  4056     0CF1  1303               	bcf	3,6	;RP1=0, select bank0
  4057     0CF2  1687               	bsf	7,5	;volatile
  4058     0CF3                     l2613:
  4059                           
  4060                           ;LCD.c: 99:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  4061     0CF3  300C               	movlw	12
  4062     0CF4  1283               	bcf	3,5	;RP0=0, select bank0
  4063     0CF5  1303               	bcf	3,6	;RP1=0, select bank0
  4064     0CF6  00BE               	movwf	??_Lcd_Write_Char
  4065     0CF7                     u3467:
  4066     0CF7  0BBE               	decfsz	??_Lcd_Write_Char,f
  4067     0CF8  2CF7               	goto	u3467
  4068     0CF9  0000               	nop
  4069     0CFA                     l2615:
  4070                           
  4071                           ;LCD.c: 100:     PORTCbits.RC5 = 0;
  4072     0CFA  1283               	bcf	3,5	;RP0=0, select bank0
  4073     0CFB  1303               	bcf	3,6	;RP1=0, select bank0
  4074     0CFC  1287               	bcf	7,5	;volatile
  4075     0CFD                     l150:
  4076     0CFD  0008               	return
  4077     0CFE                     __end_of_Lcd_Write_Char:
  4078                           
  4079                           	psect	text15
  4080     0DA6                     __ptext15:	
  4081 ;; *************** function _Lcd_Set_Cursor *****************
  4082 ;; Defined at:
  4083 ;;		line 68 in file "LCD.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  a               1    wreg     unsigned char 
  4086 ;;  b               1   33[BANK0 ] unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  a               1    0[BANK1 ] unsigned char 
  4089 ;;  temp            1    1[BANK1 ] unsigned char 
  4090 ;;  y               1    0        unsigned char 
  4091 ;;  z               1    0        unsigned char 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      void 
  4094 ;; Registers used:
  4095 ;;		wreg, status,2, status,0, pclath, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4101 ;;      Params:         0       1       0       0       0
  4102 ;;      Locals:         0       0       2       0       0
  4103 ;;      Temps:          0       0       0       0       0
  4104 ;;      Totals:         0       1       2       0       0
  4105 ;;Total ram usage:        3 bytes
  4106 ;; Hardware stack levels used: 1
  4107 ;; Hardware stack levels required when called: 5
  4108 ;; This function calls:
  4109 ;;		_Lcd_Cmd
  4110 ;; This function is called by:
  4111 ;;		_main
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115     0DA6                     _Lcd_Set_Cursor:	
  4116                           ;psect for function _Lcd_Set_Cursor
  4117                           
  4118                           
  4119                           ;incstack = 0
  4120                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  4121                           ;Lcd_Set_Cursor@a stored from wreg
  4122     0DA6  1683               	bsf	3,5	;RP0=1, select bank1
  4123     0DA7  1303               	bcf	3,6	;RP1=0, select bank1
  4124     0DA8  00A0               	movwf	Lcd_Set_Cursor@a^(0+128)
  4125     0DA9                     l2737:
  4126                           
  4127                           ;LCD.c: 69:     char temp, z, y;;LCD.c: 70:     if (a == 1) {
  4128     0DA9  0320               	decf	Lcd_Set_Cursor@a^(0+128),w
  4129     0DAA  1D03               	btfss	3,2
  4130     0DAB  2DAD               	goto	u3111
  4131     0DAC  2DAE               	goto	u3110
  4132     0DAD                     u3111:
  4133     0DAD  2DBC               	goto	l2743
  4134     0DAE                     u3110:
  4135     0DAE                     l2739:
  4136                           
  4137                           ;LCD.c: 71:         temp = 0x80 + b - 1;
  4138     0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  4139     0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  4140     0DB0  0841               	movf	Lcd_Set_Cursor@b,w
  4141     0DB1  3E7F               	addlw	127
  4142     0DB2  1683               	bsf	3,5	;RP0=1, select bank1
  4143     0DB3  1303               	bcf	3,6	;RP1=0, select bank1
  4144     0DB4  00A1               	movwf	Lcd_Set_Cursor@temp^(0+128)
  4145     0DB5                     l2741:
  4146                           
  4147                           ;LCD.c: 72:         Lcd_Cmd(temp);
  4148     0DB5  0821               	movf	Lcd_Set_Cursor@temp^(0+128),w
  4149     0DB6  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4150                           
  4151                           ;LCD.c: 73:     } else if (a == 2) {
  4152     0DBB  2DCF               	goto	l144
  4153     0DBC                     l2743:
  4154     0DBC  3002               	movlw	2
  4155     0DBD  0620               	xorwf	Lcd_Set_Cursor@a^(0+128),w
  4156     0DBE  1D03               	btfss	3,2
  4157     0DBF  2DC1               	goto	u3121
  4158     0DC0  2DC2               	goto	u3120
  4159     0DC1                     u3121:
  4160     0DC1  2DCF               	goto	l144
  4161     0DC2                     u3120:
  4162     0DC2                     l2745:
  4163                           
  4164                           ;LCD.c: 74:         temp = 0xC0 + b - 1;
  4165     0DC2  1283               	bcf	3,5	;RP0=0, select bank0
  4166     0DC3  1303               	bcf	3,6	;RP1=0, select bank0
  4167     0DC4  0841               	movf	Lcd_Set_Cursor@b,w
  4168     0DC5  3EBF               	addlw	191
  4169     0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  4170     0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  4171     0DC8  00A1               	movwf	Lcd_Set_Cursor@temp^(0+128)
  4172     0DC9                     l2747:
  4173                           
  4174                           ;LCD.c: 75:         Lcd_Cmd(temp);
  4175     0DC9  0821               	movf	Lcd_Set_Cursor@temp^(0+128),w
  4176     0DCA  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4177     0DCF                     l144:
  4178     0DCF  0008               	return
  4179     0DD0                     __end_of_Lcd_Set_Cursor:
  4180                           
  4181                           	psect	text16
  4182     0F46                     __ptext16:	
  4183 ;; *************** function _Lcd_Init *****************
  4184 ;; Defined at:
  4185 ;;		line 79 in file "LCD.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0, pclath, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4199 ;;      Params:         0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0
  4201 ;;      Temps:          0       0       2       0       0
  4202 ;;      Totals:         0       0       2       0       0
  4203 ;;Total ram usage:        2 bytes
  4204 ;; Hardware stack levels used: 1
  4205 ;; Hardware stack levels required when called: 5
  4206 ;; This function calls:
  4207 ;;		_Lcd_Cmd
  4208 ;;		_Lcd_Port
  4209 ;; This function is called by:
  4210 ;;		_main
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214     0F46                     _Lcd_Init:	
  4215                           ;psect for function _Lcd_Init
  4216                           
  4217     0F46                     l2723:	
  4218                           ;incstack = 0
  4219                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4220                           
  4221                           
  4222                           ;LCD.c: 80:     Lcd_Port(0x00);
  4223     0F46  3000               	movlw	0
  4224     0F47  120A  158A  2641  120A  158A  	fcall	_Lcd_Port
  4225     0F4C                     l2725:
  4226                           
  4227                           ;LCD.c: 81:     _delay((unsigned long)((20)*(4000000/4000.0)));
  4228     0F4C  301A               	movlw	26
  4229     0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  4230     0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  4231     0F4F  00A1               	movwf	(??_Lcd_Init^(0+128)+1)
  4232     0F50  30F7               	movlw	247
  4233     0F51  00A0               	movwf	??_Lcd_Init^(0+128)
  4234     0F52                     u3477:
  4235     0F52  0BA0               	decfsz	??_Lcd_Init^(0+128),f
  4236     0F53  2F52               	goto	u3477
  4237     0F54  0BA1               	decfsz	(??_Lcd_Init^(0+128)+1),f
  4238     0F55  2F52               	goto	u3477
  4239     0F56  2F57               	nop2
  4240     0F57                     l2727:
  4241                           
  4242                           ;LCD.c: 82:     Lcd_Cmd(0x030);
  4243     0F57  3030               	movlw	48
  4244     0F58  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4245                           
  4246                           ;LCD.c: 83:     _delay((unsigned long)((5)*(4000000/4000.0)));
  4247     0F5D  3007               	movlw	7
  4248     0F5E  1683               	bsf	3,5	;RP0=1, select bank1
  4249     0F5F  1303               	bcf	3,6	;RP1=0, select bank1
  4250     0F60  00A1               	movwf	(??_Lcd_Init^(0+128)+1)
  4251     0F61  307C               	movlw	124
  4252     0F62  00A0               	movwf	??_Lcd_Init^(0+128)
  4253     0F63                     u3487:
  4254     0F63  0BA0               	decfsz	??_Lcd_Init^(0+128),f
  4255     0F64  2F63               	goto	u3487
  4256     0F65  0BA1               	decfsz	(??_Lcd_Init^(0+128)+1),f
  4257     0F66  2F63               	goto	u3487
  4258     0F67  0000               	nop
  4259     0F68                     l2729:
  4260                           
  4261                           ;LCD.c: 84:     Lcd_Cmd(0x030);
  4262     0F68  3030               	movlw	48
  4263     0F69  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4264     0F6E                     l2731:
  4265                           
  4266                           ;LCD.c: 85:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  4267     0F6E  3041               	movlw	65
  4268     0F6F  1683               	bsf	3,5	;RP0=1, select bank1
  4269     0F70  1303               	bcf	3,6	;RP1=0, select bank1
  4270     0F71  00A0               	movwf	??_Lcd_Init^(0+128)
  4271     0F72                     u3497:
  4272     0F72  0BA0               	decfsz	??_Lcd_Init^(0+128),f
  4273     0F73  2F72               	goto	u3497
  4274     0F74  2F75               	nop2
  4275                           
  4276                           ;LCD.c: 86:     Lcd_Cmd(0x030);
  4277     0F75  3030               	movlw	48
  4278     0F76  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4279                           
  4280                           ;LCD.c: 87:     Lcd_Cmd(0x38);
  4281     0F7B  3038               	movlw	56
  4282     0F7C  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4283                           
  4284                           ;LCD.c: 88:     Lcd_Cmd(0x08);
  4285     0F81  3008               	movlw	8
  4286     0F82  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4287                           
  4288                           ;LCD.c: 89:     Lcd_Cmd(0x01);
  4289     0F87  3001               	movlw	1
  4290     0F88  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4291                           
  4292                           ;LCD.c: 90:     Lcd_Cmd(0x06);
  4293     0F8D  3006               	movlw	6
  4294     0F8E  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4295                           
  4296                           ;LCD.c: 91:     Lcd_Cmd(0x0C);
  4297     0F93  300C               	movlw	12
  4298     0F94  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4299     0F99                     l2733:
  4300                           
  4301                           ;LCD.c: 92:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  4302     0F99  3020               	movlw	32
  4303     0F9A  1683               	bsf	3,5	;RP0=1, select bank1
  4304     0F9B  1303               	bcf	3,6	;RP1=0, select bank1
  4305     0F9C  00A0               	movwf	??_Lcd_Init^(0+128)
  4306     0F9D                     u3507:
  4307     0F9D  0BA0               	decfsz	??_Lcd_Init^(0+128),f
  4308     0F9E  2F9D               	goto	u3507
  4309     0F9F  0000               	nop
  4310     0FA0                     l147:
  4311     0FA0  0008               	return
  4312     0FA1                     __end_of_Lcd_Init:
  4313                           
  4314                           	psect	text17
  4315     0C9D                     __ptext17:	
  4316 ;; *************** function _Lcd_Clear *****************
  4317 ;; Defined at:
  4318 ;;		line 63 in file "LCD.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;                  1    wreg      void 
  4325 ;; Registers used:
  4326 ;;		wreg, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4332 ;;      Params:         0       0       0       0       0
  4333 ;;      Locals:         0       0       0       0       0
  4334 ;;      Temps:          0       0       0       0       0
  4335 ;;      Totals:         0       0       0       0       0
  4336 ;;Total ram usage:        0 bytes
  4337 ;; Hardware stack levels used: 1
  4338 ;; Hardware stack levels required when called: 5
  4339 ;; This function calls:
  4340 ;;		_Lcd_Cmd
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346     0C9D                     _Lcd_Clear:	
  4347                           ;psect for function _Lcd_Clear
  4348                           
  4349     0C9D                     l2735:	
  4350                           ;incstack = 0
  4351                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4352                           
  4353                           
  4354                           ;LCD.c: 64:     Lcd_Cmd(0);
  4355     0C9D  3000               	movlw	0
  4356     0C9E  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4357                           
  4358                           ;LCD.c: 65:     Lcd_Cmd(1);
  4359     0CA3  3001               	movlw	1
  4360     0CA4  120A  158A  24FE  120A  158A  	fcall	_Lcd_Cmd
  4361     0CA9                     l138:
  4362     0CA9  0008               	return
  4363     0CAA                     __end_of_Lcd_Clear:
  4364                           
  4365                           	psect	text18
  4366     0CFE                     __ptext18:	
  4367 ;; *************** function _Lcd_Cmd *****************
  4368 ;; Defined at:
  4369 ;;		line 55 in file "LCD.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  a               1    wreg     unsigned char 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  a               1   32[BANK0 ] unsigned char 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      void 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0, pclath, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4383 ;;      Params:         0       0       0       0       0
  4384 ;;      Locals:         0       1       0       0       0
  4385 ;;      Temps:          0       2       0       0       0
  4386 ;;      Totals:         0       3       0       0       0
  4387 ;;Total ram usage:        3 bytes
  4388 ;; Hardware stack levels used: 1
  4389 ;; Hardware stack levels required when called: 4
  4390 ;; This function calls:
  4391 ;;		_Lcd_Port
  4392 ;; This function is called by:
  4393 ;;		_Lcd_Clear
  4394 ;;		_Lcd_Set_Cursor
  4395 ;;		_Lcd_Init
  4396 ;;		_Lcd_Shift_Right
  4397 ;;		_Lcd_Shift_Left
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401     0CFE                     _Lcd_Cmd:	
  4402                           ;psect for function _Lcd_Cmd
  4403                           
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4407                           ;Lcd_Cmd@a stored from wreg
  4408     0CFE  1283               	bcf	3,5	;RP0=0, select bank0
  4409     0CFF  1303               	bcf	3,6	;RP1=0, select bank0
  4410     0D00  00C0               	movwf	Lcd_Cmd@a
  4411     0D01                     l2597:
  4412                           
  4413                           ;LCD.c: 56:     PORTCbits.RC4 = 0;
  4414     0D01  1207               	bcf	7,4	;volatile
  4415     0D02                     l2599:
  4416                           
  4417                           ;LCD.c: 57:     Lcd_Port(a);
  4418     0D02  0840               	movf	Lcd_Cmd@a,w
  4419     0D03  120A  158A  2641  120A  158A  	fcall	_Lcd_Port
  4420     0D08                     l2601:
  4421                           
  4422                           ;LCD.c: 58:     PORTCbits.RC5 = 1;
  4423     0D08  1283               	bcf	3,5	;RP0=0, select bank0
  4424     0D09  1303               	bcf	3,6	;RP1=0, select bank0
  4425     0D0A  1687               	bsf	7,5	;volatile
  4426     0D0B                     l2603:
  4427                           
  4428                           ;LCD.c: 59:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4429     0D0B  3006               	movlw	6
  4430     0D0C  1283               	bcf	3,5	;RP0=0, select bank0
  4431     0D0D  1303               	bcf	3,6	;RP1=0, select bank0
  4432     0D0E  00BF               	movwf	??_Lcd_Cmd+1
  4433     0D0F  302F               	movlw	47
  4434     0D10  00BE               	movwf	??_Lcd_Cmd
  4435     0D11                     u3517:
  4436     0D11  0BBE               	decfsz	??_Lcd_Cmd,f
  4437     0D12  2D11               	goto	u3517
  4438     0D13  0BBF               	decfsz	??_Lcd_Cmd+1,f
  4439     0D14  2D11               	goto	u3517
  4440     0D15  2D16               	nop2
  4441     0D16                     l2605:
  4442                           
  4443                           ;LCD.c: 60:     PORTCbits.RC5 = 0;
  4444     0D16  1283               	bcf	3,5	;RP0=0, select bank0
  4445     0D17  1303               	bcf	3,6	;RP1=0, select bank0
  4446     0D18  1287               	bcf	7,5	;volatile
  4447     0D19                     l135:
  4448     0D19  0008               	return
  4449     0D1A                     __end_of_Lcd_Cmd:
  4450                           
  4451                           	psect	text19
  4452     0E41                     __ptext19:	
  4453 ;; *************** function _Lcd_Port *****************
  4454 ;; Defined at:
  4455 ;;		line 13 in file "LCD.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  a               1    wreg     unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  a               1   29[BANK0 ] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4469 ;;      Params:         0       0       0       0       0
  4470 ;;      Locals:         0       1       0       0       0
  4471 ;;      Temps:          0       0       0       0       0
  4472 ;;      Totals:         0       1       0       0       0
  4473 ;;Total ram usage:        1 bytes
  4474 ;; Hardware stack levels used: 1
  4475 ;; Hardware stack levels required when called: 3
  4476 ;; This function calls:
  4477 ;;		Nothing
  4478 ;; This function is called by:
  4479 ;;		_Lcd_Cmd
  4480 ;;		_Lcd_Init
  4481 ;;		_Lcd_Write_Char
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485     0E41                     _Lcd_Port:	
  4486                           ;psect for function _Lcd_Port
  4487                           
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _Lcd_Port: [wreg]
  4491                           ;Lcd_Port@a stored from wreg
  4492     0E41  1283               	bcf	3,5	;RP0=0, select bank0
  4493     0E42  1303               	bcf	3,6	;RP1=0, select bank0
  4494     0E43  00BD               	movwf	Lcd_Port@a
  4495     0E44                     l2579:
  4496                           
  4497                           ;LCD.c: 14:     if (a & 1)
  4498     0E44  1C3D               	btfss	Lcd_Port@a,0
  4499     0E45  2E47               	goto	u2761
  4500     0E46  2E48               	goto	u2760
  4501     0E47                     u2761:
  4502     0E47  2E4A               	goto	l116
  4503     0E48                     u2760:
  4504     0E48                     l2581:
  4505                           
  4506                           ;LCD.c: 15:         PORTDbits.RD0 = 1;
  4507     0E48  1408               	bsf	8,0	;volatile
  4508     0E49  2E4B               	goto	l117
  4509     0E4A                     l116:	
  4510                           ;LCD.c: 16:     else
  4511                           
  4512                           
  4513                           ;LCD.c: 17:         PORTDbits.RD0 = 0;
  4514     0E4A  1008               	bcf	8,0	;volatile
  4515     0E4B                     l117:
  4516                           
  4517                           ;LCD.c: 19:     if (a & 2)
  4518     0E4B  1CBD               	btfss	Lcd_Port@a,1
  4519     0E4C  2E4E               	goto	u2771
  4520     0E4D  2E4F               	goto	u2770
  4521     0E4E                     u2771:
  4522     0E4E  2E51               	goto	l118
  4523     0E4F                     u2770:
  4524     0E4F                     l2583:
  4525                           
  4526                           ;LCD.c: 20:         PORTDbits.RD1 = 1;
  4527     0E4F  1488               	bsf	8,1	;volatile
  4528     0E50  2E52               	goto	l119
  4529     0E51                     l118:	
  4530                           ;LCD.c: 21:     else
  4531                           
  4532                           
  4533                           ;LCD.c: 22:         PORTDbits.RD1 = 0;
  4534     0E51  1088               	bcf	8,1	;volatile
  4535     0E52                     l119:
  4536                           
  4537                           ;LCD.c: 24:     if (a & 4)
  4538     0E52  1D3D               	btfss	Lcd_Port@a,2
  4539     0E53  2E55               	goto	u2781
  4540     0E54  2E56               	goto	u2780
  4541     0E55                     u2781:
  4542     0E55  2E58               	goto	l120
  4543     0E56                     u2780:
  4544     0E56                     l2585:
  4545                           
  4546                           ;LCD.c: 25:         PORTDbits.RD2 = 1;
  4547     0E56  1508               	bsf	8,2	;volatile
  4548     0E57  2E59               	goto	l121
  4549     0E58                     l120:	
  4550                           ;LCD.c: 26:     else
  4551                           
  4552                           
  4553                           ;LCD.c: 27:         PORTDbits.RD2 = 0;
  4554     0E58  1108               	bcf	8,2	;volatile
  4555     0E59                     l121:
  4556                           
  4557                           ;LCD.c: 29:     if (a & 8)
  4558     0E59  1DBD               	btfss	Lcd_Port@a,3
  4559     0E5A  2E5C               	goto	u2791
  4560     0E5B  2E5D               	goto	u2790
  4561     0E5C                     u2791:
  4562     0E5C  2E5F               	goto	l122
  4563     0E5D                     u2790:
  4564     0E5D                     l2587:
  4565                           
  4566                           ;LCD.c: 30:         PORTDbits.RD3 = 1;
  4567     0E5D  1588               	bsf	8,3	;volatile
  4568     0E5E  2E60               	goto	l123
  4569     0E5F                     l122:	
  4570                           ;LCD.c: 31:     else
  4571                           
  4572                           
  4573                           ;LCD.c: 32:         PORTDbits.RD3 = 0;
  4574     0E5F  1188               	bcf	8,3	;volatile
  4575     0E60                     l123:
  4576                           
  4577                           ;LCD.c: 34:     if (a & 16)
  4578     0E60  1E3D               	btfss	Lcd_Port@a,4
  4579     0E61  2E63               	goto	u2801
  4580     0E62  2E64               	goto	u2800
  4581     0E63                     u2801:
  4582     0E63  2E66               	goto	l124
  4583     0E64                     u2800:
  4584     0E64                     l2589:
  4585                           
  4586                           ;LCD.c: 35:         PORTDbits.RD4 = 1;
  4587     0E64  1608               	bsf	8,4	;volatile
  4588     0E65  2E67               	goto	l125
  4589     0E66                     l124:	
  4590                           ;LCD.c: 36:     else
  4591                           
  4592                           
  4593                           ;LCD.c: 37:         PORTDbits.RD4 = 0;
  4594     0E66  1208               	bcf	8,4	;volatile
  4595     0E67                     l125:
  4596                           
  4597                           ;LCD.c: 39:     if (a & 32)
  4598     0E67  1EBD               	btfss	Lcd_Port@a,5
  4599     0E68  2E6A               	goto	u2811
  4600     0E69  2E6B               	goto	u2810
  4601     0E6A                     u2811:
  4602     0E6A  2E6D               	goto	l126
  4603     0E6B                     u2810:
  4604     0E6B                     l2591:
  4605                           
  4606                           ;LCD.c: 40:         PORTDbits.RD5 = 1;
  4607     0E6B  1688               	bsf	8,5	;volatile
  4608     0E6C  2E6E               	goto	l127
  4609     0E6D                     l126:	
  4610                           ;LCD.c: 41:     else
  4611                           
  4612                           
  4613                           ;LCD.c: 42:         PORTDbits.RD5 = 0;
  4614     0E6D  1288               	bcf	8,5	;volatile
  4615     0E6E                     l127:
  4616                           
  4617                           ;LCD.c: 44:     if (a & 64)
  4618     0E6E  1F3D               	btfss	Lcd_Port@a,6
  4619     0E6F  2E71               	goto	u2821
  4620     0E70  2E72               	goto	u2820
  4621     0E71                     u2821:
  4622     0E71  2E74               	goto	l128
  4623     0E72                     u2820:
  4624     0E72                     l2593:
  4625                           
  4626                           ;LCD.c: 45:         PORTDbits.RD6 = 1;
  4627     0E72  1708               	bsf	8,6	;volatile
  4628     0E73  2E75               	goto	l129
  4629     0E74                     l128:	
  4630                           ;LCD.c: 46:     else
  4631                           
  4632                           
  4633                           ;LCD.c: 47:         PORTDbits.RD6 = 0;
  4634     0E74  1308               	bcf	8,6	;volatile
  4635     0E75                     l129:
  4636                           
  4637                           ;LCD.c: 49:     if (a & 128)
  4638     0E75  1FBD               	btfss	Lcd_Port@a,7
  4639     0E76  2E78               	goto	u2831
  4640     0E77  2E79               	goto	u2830
  4641     0E78                     u2831:
  4642     0E78  2E7B               	goto	l130
  4643     0E79                     u2830:
  4644     0E79                     l2595:
  4645                           
  4646                           ;LCD.c: 50:         PORTDbits.RD7 = 1;
  4647     0E79  1788               	bsf	8,7	;volatile
  4648     0E7A  2E7C               	goto	l132
  4649     0E7B                     l130:	
  4650                           ;LCD.c: 51:     else
  4651                           
  4652                           
  4653                           ;LCD.c: 52:         PORTDbits.RD7 = 0;
  4654     0E7B  1388               	bcf	8,7	;volatile
  4655     0E7C                     l132:
  4656     0E7C  0008               	return
  4657     0E7D                     __end_of_Lcd_Port:
  4658                           
  4659                           	psect	text20
  4660     0642                     __ptext20:	
  4661 ;; *************** function _isr *****************
  4662 ;; Defined at:
  4663 ;;		line 103 in file "main.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      void 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4677 ;;      Params:         0       0       0       0       0
  4678 ;;      Locals:         0       0       0       0       0
  4679 ;;      Temps:          0      10       0       0       0
  4680 ;;      Totals:         0      10       0       0       0
  4681 ;;Total ram usage:       10 bytes
  4682 ;; Hardware stack levels used: 1
  4683 ;; Hardware stack levels required when called: 2
  4684 ;; This function calls:
  4685 ;;		_adc_read
  4686 ;;		_cadena
  4687 ;;		i1_sprintf
  4688 ;; This function is called by:
  4689 ;;		Interrupt level 1
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693     0642                     _isr:	
  4694                           ;psect for function _isr
  4695                           
  4696     0642                     i1l2465:
  4697                           
  4698                           ;main.c: 104:     if (PIR1bits.ADIF == 1){
  4699     0642  1F0C               	btfss	12,6	;volatile
  4700     0643  2E45               	goto	u269_21
  4701     0644  2E46               	goto	u269_20
  4702     0645                     u269_21:
  4703     0645  2E52               	goto	i1l2471
  4704     0646                     u269_20:
  4705     0646                     i1l2467:
  4706                           
  4707                           ;main.c: 105:         adc_var = adc_read();
  4708     0646  120A  158A  2493  120A  118A  	fcall	_adc_read
  4709     064B  0871               	movf	?_adc_read+1,w
  4710     064C  1283               	bcf	3,5	;RP0=0, select bank0
  4711     064D  1303               	bcf	3,6	;RP1=0, select bank0
  4712     064E  00C9               	movwf	_adc_var+1
  4713     064F  0870               	movf	?_adc_read,w
  4714     0650  00C8               	movwf	_adc_var
  4715     0651                     i1l2469:
  4716                           
  4717                           ;main.c: 106:         PIR1bits.ADIF = 0;
  4718     0651  130C               	bcf	12,6	;volatile
  4719     0652                     i1l2471:
  4720                           
  4721                           ;main.c: 108:     if (PIR1bits.RCIF == 1){
  4722     0652  1E8C               	btfss	12,5	;volatile
  4723     0653  2E55               	goto	u270_21
  4724     0654  2E56               	goto	u270_20
  4725     0655                     u270_21:
  4726     0655  2EC3               	goto	i1l95
  4727     0656                     u270_20:
  4728     0656                     i1l2473:
  4729                           
  4730                           ;main.c: 109:         PIR1bits.RCIF = 0;
  4731     0656  128C               	bcf	12,5	;volatile
  4732     0657                     i1l2475:
  4733                           
  4734                           ;main.c: 110:         if (RCREG == '+'){
  4735     0657  302B               	movlw	43
  4736     0658  061A               	xorwf	26,w	;volatile
  4737     0659  1D03               	btfss	3,2
  4738     065A  2E5C               	goto	u271_21
  4739     065B  2E5D               	goto	u271_20
  4740     065C                     u271_21:
  4741     065C  2E6C               	goto	i1l2483
  4742     065D                     u271_20:
  4743     065D                     i1l2477:
  4744                           
  4745                           ;main.c: 111:             if (counter == 255){
  4746     065D  0A42               	incf	_counter,w
  4747     065E  0443               	iorwf	_counter+1,w
  4748     065F  1D03               	btfss	3,2
  4749     0660  2E62               	goto	u272_21
  4750     0661  2E63               	goto	u272_20
  4751     0662                     u272_21:
  4752     0662  2E66               	goto	i1l2481
  4753     0663                     u272_20:
  4754     0663                     i1l2479:
  4755                           
  4756                           ;main.c: 112:                 counter = 0;
  4757     0663  01C2               	clrf	_counter
  4758     0664  01C3               	clrf	_counter+1
  4759                           
  4760                           ;main.c: 113:             }
  4761     0665  2E6C               	goto	i1l2483
  4762     0666                     i1l2481:
  4763                           
  4764                           ;main.c: 115:             counter++;
  4765     0666  3001               	movlw	1
  4766     0667  07C2               	addwf	_counter,f
  4767     0668  1803               	skipnc
  4768     0669  0AC3               	incf	_counter+1,f
  4769     066A  3000               	movlw	0
  4770     066B  07C3               	addwf	_counter+1,f
  4771     066C                     i1l2483:
  4772                           
  4773                           ;main.c: 118:         if (RCREG == '-'){
  4774     066C  302D               	movlw	45
  4775     066D  061A               	xorwf	26,w	;volatile
  4776     066E  1D03               	btfss	3,2
  4777     066F  2E71               	goto	u273_21
  4778     0670  2E72               	goto	u273_20
  4779     0671                     u273_21:
  4780     0671  2E83               	goto	i1l2491
  4781     0672                     u273_20:
  4782     0672                     i1l2485:
  4783                           
  4784                           ;main.c: 119:             if (counter == 0){
  4785     0672  0842               	movf	_counter,w
  4786     0673  0443               	iorwf	_counter+1,w
  4787     0674  1D03               	btfss	3,2
  4788     0675  2E77               	goto	u274_21
  4789     0676  2E78               	goto	u274_20
  4790     0677                     u274_21:
  4791     0677  2E7D               	goto	i1l2489
  4792     0678                     u274_20:
  4793     0678                     i1l2487:
  4794                           
  4795                           ;main.c: 120:                 counter = 255;
  4796     0678  30FF               	movlw	255
  4797     0679  00C2               	movwf	_counter
  4798     067A  3000               	movlw	0
  4799     067B  00C3               	movwf	_counter+1
  4800                           
  4801                           ;main.c: 121:             }
  4802     067C  2E83               	goto	i1l2491
  4803     067D                     i1l2489:
  4804                           
  4805                           ;main.c: 123:             counter--;
  4806     067D  30FF               	movlw	255
  4807     067E  07C2               	addwf	_counter,f
  4808     067F  1803               	skipnc
  4809     0680  0AC3               	incf	_counter+1,f
  4810     0681  30FF               	movlw	255
  4811     0682  07C3               	addwf	_counter+1,f
  4812     0683                     i1l2491:
  4813                           
  4814                           ;main.c: 126:         if (RCREG == 13){
  4815     0683  300D               	movlw	13
  4816     0684  061A               	xorwf	26,w	;volatile
  4817     0685  1D03               	btfss	3,2
  4818     0686  2E88               	goto	u275_21
  4819     0687  2E89               	goto	u275_20
  4820     0688                     u275_21:
  4821     0688  2EC3               	goto	i1l95
  4822     0689                     u275_20:
  4823     0689                     i1l2493:
  4824                           
  4825                           ;main.c: 127:             cadena("Voltaje Potenciometro: \r\n");
  4826     0689  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  4827     068A  00F0               	movwf	cadena@cursor
  4828     068B  3080               	movlw	128
  4829     068C  00F1               	movwf	cadena@cursor+1
  4830     068D  120A  158A  2580  120A  118A  	fcall	_cadena
  4831                           
  4832                           ;main.c: 128:             sprintf(display, "%d.%d%dV", uni_volt, dec_volt, cen_volt);
  4833     0692  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  4834     0693  1283               	bcf	3,5	;RP0=0, select bank0
  4835     0694  1303               	bcf	3,6	;RP1=0, select bank0
  4836     0695  00A0               	movwf	i1sprintf@f
  4837     0696  084E               	movf	_uni_volt,w
  4838     0697  00B3               	movwf	??_isr
  4839     0698  01B4               	clrf	??_isr+1
  4840     0699  0833               	movf	??_isr,w
  4841     069A  00A1               	movwf	?i1_sprintf+1
  4842     069B  0834               	movf	??_isr+1,w
  4843     069C  00A2               	movwf	?i1_sprintf+2
  4844     069D  084D               	movf	_dec_volt,w
  4845     069E  00B5               	movwf	??_isr+2
  4846     069F  01B6               	clrf	??_isr+3
  4847     06A0  0835               	movf	??_isr+2,w
  4848     06A1  00A3               	movwf	?i1_sprintf+3
  4849     06A2  0836               	movf	??_isr+3,w
  4850     06A3  00A4               	movwf	?i1_sprintf+4
  4851     06A4  084C               	movf	_cen_volt,w
  4852     06A5  00B7               	movwf	??_isr+4
  4853     06A6  01B8               	clrf	??_isr+5
  4854     06A7  0837               	movf	??_isr+4,w
  4855     06A8  00A5               	movwf	?i1_sprintf+5
  4856     06A9  0838               	movf	??_isr+5,w
  4857     06AA  00A6               	movwf	?i1_sprintf+6
  4858     06AB  304F               	movlw	(low (_display| 0))& (0+255)
  4859     06AC  120A  118A  2200  120A  118A  	fcall	i1_sprintf
  4860                           
  4861                           ;main.c: 129:             cadena(display);
  4862     06B1  304F               	movlw	(low (_display| 0))& (0+255)
  4863     06B2  00F0               	movwf	cadena@cursor
  4864     06B3  3000               	movlw	0
  4865     06B4  00F1               	movwf	cadena@cursor+1
  4866     06B5  120A  158A  2580  120A  118A  	fcall	_cadena
  4867                           
  4868                           ;main.c: 130:             cadena("\n\r");
  4869     06BA  3040               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  4870     06BB  00F0               	movwf	cadena@cursor
  4871     06BC  3080               	movlw	128
  4872     06BD  00F1               	movwf	cadena@cursor+1
  4873     06BE  120A  158A  2580  120A  118A  	fcall	_cadena
  4874     06C3                     i1l95:
  4875     06C3  1283               	bcf	3,5	;RP0=0, select bank0
  4876     06C4  1303               	bcf	3,6	;RP1=0, select bank0
  4877     06C5  083C               	movf	??_isr+9,w
  4878     06C6  00FF               	movwf	btemp+1
  4879     06C7  083B               	movf	??_isr+8,w
  4880     06C8  008A               	movwf	10
  4881     06C9  083A               	movf	??_isr+7,w
  4882     06CA  0084               	movwf	4
  4883     06CB  0E39               	swapf	??_isr+6,w
  4884     06CC  0083               	movwf	3
  4885     06CD  0EFE               	swapf	btemp,f
  4886     06CE  0E7E               	swapf	btemp,w
  4887     06CF  0009               	retfie
  4888     06D0                     __end_of_isr:
  4889                           
  4890                           	psect	intentry
  4891     0004                     __pintentry:	
  4892                           ;incstack = 0
  4893                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4894                           
  4895     0004                     interrupt_function:
  4896     007E                     saved_w	set	btemp
  4897     0004  00FE               	movwf	btemp
  4898     0005  0E03               	swapf	3,w
  4899     0006  1283               	bcf	3,5	;RP0=0, select bank0
  4900     0007  1303               	bcf	3,6	;RP1=0, select bank0
  4901     0008  00B9               	movwf	??_isr+6
  4902     0009  0804               	movf	4,w
  4903     000A  00BA               	movwf	??_isr+7
  4904     000B  080A               	movf	10,w
  4905     000C  00BB               	movwf	??_isr+8
  4906     000D  087F               	movf	btemp+1,w
  4907     000E  00BC               	movwf	??_isr+9
  4908     000F  120A  118A  2E42   	ljmp	_isr
  4909                           
  4910                           	psect	text21
  4911     0200                     __ptext21:	
  4912 ;; *************** function i1_sprintf *****************
  4913 ;; Defined at:
  4914 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  sp              1    wreg     PTR unsigned char 
  4917 ;;		 -> display_counter(1), display(3), 
  4918 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4919 ;;		 -> STR_6(9), STR_4(5), STR_3(9), 
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;  sp              1   17[BANK0 ] PTR unsigned char 
  4922 ;;		 -> display_counter(1), display(3), 
  4923 ;;  tmpval          4    0        struct .
  4924 ;;  width           2   15[BANK0 ] int 
  4925 ;;  val             2   12[BANK0 ] unsigned int 
  4926 ;;  cp              2    0        PTR const unsigned char 
  4927 ;;  len             2    0        unsigned int 
  4928 ;;  c               1   18[BANK0 ] unsigned char 
  4929 ;;  flag            1   14[BANK0 ] unsigned char 
  4930 ;;  prec            1   11[BANK0 ] char 
  4931 ;;  ap              1   10[BANK0 ] PTR void [1]
  4932 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  2    0[BANK0 ] int 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4942 ;;      Params:         0       7       0       0       0
  4943 ;;      Locals:         0       9       0       0       0
  4944 ;;      Temps:          0       3       0       0       0
  4945 ;;      Totals:         0      19       0       0       0
  4946 ;;Total ram usage:       19 bytes
  4947 ;; Hardware stack levels used: 1
  4948 ;; Hardware stack levels required when called: 1
  4949 ;; This function calls:
  4950 ;;		i1___lwdiv
  4951 ;;		i1___lwmod
  4952 ;;		i1___wmul
  4953 ;;		i1_isdigit
  4954 ;; This function is called by:
  4955 ;;		_isr
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959     0200                     i1_sprintf:	
  4960                           ;psect for function i1_sprintf
  4961                           
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4965                           ;i1sprintf@sp stored from wreg
  4966     0200  1283               	bcf	3,5	;RP0=0, select bank0
  4967     0201  1303               	bcf	3,6	;RP1=0, select bank0
  4968     0202  00B1               	movwf	i1sprintf@sp
  4969     0203                     i1l2319:
  4970                           
  4971                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  4972     0203  3021               	movlw	(low ((?i1_sprintf| 0+1)))& (0+255)
  4973     0204  00AA               	movwf	i1sprintf@ap
  4974                           
  4975                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4976     0205  2BA9               	goto	i1l2423
  4977     0206                     i1l2321:
  4978                           
  4979                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4980     0206  3025               	movlw	37
  4981     0207  0632               	xorwf	i1sprintf@c,w
  4982     0208  1903               	btfsc	3,2
  4983     0209  2A0B               	goto	u250_21
  4984     020A  2A0C               	goto	u250_20
  4985     020B                     u250_21:
  4986     020B  2A16               	goto	i1l2327
  4987     020C                     u250_20:
  4988     020C                     i1l2323:
  4989                           
  4990                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4991     020C  0831               	movf	i1sprintf@sp,w
  4992     020D  0084               	movwf	4
  4993     020E  0832               	movf	i1sprintf@c,w
  4994     020F  1383               	bcf	3,7	;select IRP bank0
  4995     0210  0080               	movwf	0
  4996     0211                     i1l2325:
  4997     0211  3001               	movlw	1
  4998     0212  00A7               	movwf	??i1_sprintf
  4999     0213  0827               	movf	??i1_sprintf,w
  5000     0214  07B1               	addwf	i1sprintf@sp,f
  5001                           
  5002                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  5003     0215  2BA9               	goto	i1l2423
  5004     0216                     i1l2327:
  5005                           
  5006                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  5007     0216  01AF               	clrf	i1sprintf@width
  5008     0217  01B0               	clrf	i1sprintf@width+1
  5009                           
  5010                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  5011     0218  01AE               	clrf	i1sprintf@flag
  5012     0219  2A1F               	goto	i1l2333
  5013     021A                     i1l341:	
  5014                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 596:    case '0':
  5015                           
  5016                           
  5017                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  5018     021A  152E               	bsf	i1sprintf@flag,2
  5019     021B                     i1l2329:
  5020                           
  5021                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 598:     f++;
  5022     021B  3001               	movlw	1
  5023     021C  00A7               	movwf	??i1_sprintf
  5024     021D  0827               	movf	??i1_sprintf,w
  5025     021E  07A0               	addwf	i1sprintf@f,f
  5026     021F                     i1l2333:	
  5027                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  5028                           
  5029     021F  0820               	movf	i1sprintf@f,w
  5030     0220  0084               	movwf	4
  5031     0221  120A  158A  200A  120A  118A  	fcall	stringdir
  5032     0226  00A7               	movwf	??i1_sprintf
  5033     0227  01A8               	clrf	??i1_sprintf+1
  5034                           
  5035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5036                           ; Switch size 1, requested type "simple"
  5037                           ; Number of cases is 1, Range of values is 0 to 0
  5038                           ; switch strategies available:
  5039                           ; Name         Instructions Cycles
  5040                           ; simple_byte            4     3 (average)
  5041                           ; direct_byte           11     8 (fixed)
  5042                           ; jumptable            260     6 (fixed)
  5043                           ;	Chosen strategy is simple_byte
  5044     0228  0828               	movf	??i1_sprintf+1,w
  5045     0229  3A00               	xorlw	0	; case 0
  5046     022A  1903               	skipnz
  5047     022B  2A2D               	goto	i1l3033
  5048     022C  2A32               	goto	i1l2335
  5049     022D                     i1l3033:
  5050                           
  5051                           ; Switch size 1, requested type "simple"
  5052                           ; Number of cases is 1, Range of values is 48 to 48
  5053                           ; switch strategies available:
  5054                           ; Name         Instructions Cycles
  5055                           ; simple_byte            4     3 (average)
  5056                           ; direct_byte           14    11 (fixed)
  5057                           ; jumptable            263     9 (fixed)
  5058                           ;	Chosen strategy is simple_byte
  5059     022D  0827               	movf	??i1_sprintf,w
  5060     022E  3A30               	xorlw	48	; case 48
  5061     022F  1903               	skipnz
  5062     0230  2A1A               	goto	i1l341
  5063     0231  2A32               	goto	i1l2335
  5064     0232                     i1l2335:
  5065                           
  5066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  5067     0232  0820               	movf	i1sprintf@f,w
  5068     0233  0084               	movwf	4
  5069     0234  120A  158A  200A  120A  118A  	fcall	stringdir
  5070     0239  120A  158A  24AA  120A  118A  	fcall	i1_isdigit
  5071     023E  1C03               	btfss	3,0
  5072     023F  2A41               	goto	u251_21
  5073     0240  2A42               	goto	u251_20
  5074     0241                     u251_21:
  5075     0241  2A82               	goto	i1l2349
  5076     0242                     u251_20:
  5077     0242                     i1l2337:
  5078                           
  5079                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  5080     0242  1283               	bcf	3,5	;RP0=0, select bank0
  5081     0243  1303               	bcf	3,6	;RP1=0, select bank0
  5082     0244  01AF               	clrf	i1sprintf@width
  5083     0245  01B0               	clrf	i1sprintf@width+1
  5084     0246                     i1l2339:
  5085                           
  5086                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  5087     0246  300A               	movlw	10
  5088     0247  00F0               	movwf	i1___wmul@multiplier
  5089     0248  3000               	movlw	0
  5090     0249  00F1               	movwf	i1___wmul@multiplier+1
  5091     024A  1283               	bcf	3,5	;RP0=0, select bank0
  5092     024B  1303               	bcf	3,6	;RP1=0, select bank0
  5093     024C  0830               	movf	i1sprintf@width+1,w
  5094     024D  00F3               	movwf	i1___wmul@multiplicand+1
  5095     024E  082F               	movf	i1sprintf@width,w
  5096     024F  00F2               	movwf	i1___wmul@multiplicand
  5097     0250  120A  158A  255B  120A  118A  	fcall	i1___wmul
  5098     0255  0871               	movf	?i1___wmul+1,w
  5099     0256  1283               	bcf	3,5	;RP0=0, select bank0
  5100     0257  1303               	bcf	3,6	;RP1=0, select bank0
  5101     0258  00B0               	movwf	i1sprintf@width+1
  5102     0259  0870               	movf	?i1___wmul,w
  5103     025A  00AF               	movwf	i1sprintf@width
  5104     025B                     i1l2341:
  5105                           
  5106                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  5107     025B  0820               	movf	i1sprintf@f,w
  5108     025C  0084               	movwf	4
  5109     025D  120A  158A  200A  120A  118A  	fcall	stringdir
  5110     0262  3ED0               	addlw	208
  5111     0263  00A7               	movwf	??i1_sprintf
  5112     0264  30FF               	movlw	255
  5113     0265  1803               	skipnc
  5114     0266  3000               	movlw	0
  5115     0267  00A8               	movwf	??i1_sprintf+1
  5116     0268  0827               	movf	??i1_sprintf,w
  5117     0269  07AF               	addwf	i1sprintf@width,f
  5118     026A  1803               	skipnc
  5119     026B  0AB0               	incf	i1sprintf@width+1,f
  5120     026C  0828               	movf	??i1_sprintf+1,w
  5121     026D  07B0               	addwf	i1sprintf@width+1,f
  5122     026E                     i1l2343:
  5123     026E  3001               	movlw	1
  5124     026F  00A7               	movwf	??i1_sprintf
  5125     0270  0827               	movf	??i1_sprintf,w
  5126     0271  07A0               	addwf	i1sprintf@f,f
  5127     0272                     i1l2345:
  5128                           
  5129                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  5130     0272  0820               	movf	i1sprintf@f,w
  5131     0273  0084               	movwf	4
  5132     0274  120A  158A  200A  120A  118A  	fcall	stringdir
  5133     0279  120A  158A  24AA  120A  118A  	fcall	i1_isdigit
  5134     027E  1803               	btfsc	3,0
  5135     027F  2A81               	goto	u252_21
  5136     0280  2A82               	goto	u252_20
  5137     0281                     u252_21:
  5138     0281  2A46               	goto	i1l2339
  5139     0282                     u252_20:
  5140     0282                     i1l2349:
  5141     0282  3001               	movlw	1
  5142     0283  1283               	bcf	3,5	;RP0=0, select bank0
  5143     0284  1303               	bcf	3,6	;RP1=0, select bank0
  5144     0285  07A0               	addwf	i1sprintf@f,f
  5145     0286  30FF               	movlw	-1
  5146     0287  0720               	addwf	i1sprintf@f,w
  5147     0288  0084               	movwf	4
  5148     0289  120A  158A  200A  120A  118A  	fcall	stringdir
  5149     028E  00B2               	movwf	i1sprintf@c
  5150     028F  00A7               	movwf	??i1_sprintf
  5151     0290  01A8               	clrf	??i1_sprintf+1
  5152                           
  5153                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5154                           ; Switch size 1, requested type "simple"
  5155                           ; Number of cases is 1, Range of values is 0 to 0
  5156                           ; switch strategies available:
  5157                           ; Name         Instructions Cycles
  5158                           ; simple_byte            4     3 (average)
  5159                           ; direct_byte           11     8 (fixed)
  5160                           ; jumptable            260     6 (fixed)
  5161                           ;	Chosen strategy is simple_byte
  5162     0291  0828               	movf	??i1_sprintf+1,w
  5163     0292  3A00               	xorlw	0	; case 0
  5164     0293  1903               	skipnz
  5165     0294  2A96               	goto	i1l3035
  5166     0295  2BA9               	goto	i1l2423
  5167     0296                     i1l3035:
  5168                           
  5169                           ; Switch size 1, requested type "simple"
  5170                           ; Number of cases is 3, Range of values is 0 to 105
  5171                           ; switch strategies available:
  5172                           ; Name         Instructions Cycles
  5173                           ; simple_byte           10     6 (average)
  5174                           ; jumptable            260     6 (fixed)
  5175                           ;	Chosen strategy is simple_byte
  5176     0296  0827               	movf	??i1_sprintf,w
  5177     0297  3A00               	xorlw	0	; case 0
  5178     0298  1903               	skipnz
  5179     0299  2BB9               	goto	i1l2425
  5180     029A  3A64               	xorlw	100	; case 100
  5181     029B  1903               	skipnz
  5182     029C  2AA1               	goto	i1l2351
  5183     029D  3A0D               	xorlw	13	; case 105
  5184     029E  1903               	skipnz
  5185     029F  2AA1               	goto	i1l2351
  5186     02A0  2BA9               	goto	i1l2423
  5187     02A1                     i1l2351:
  5188                           
  5189                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5190     02A1  082A               	movf	i1sprintf@ap,w
  5191     02A2  0084               	movwf	4
  5192     02A3  1383               	bcf	3,7	;select IRP bank0
  5193     02A4  0800               	movf	0,w
  5194     02A5  00AC               	movwf	i1sprintf@val
  5195     02A6  0A84               	incf	4,f
  5196     02A7  0800               	movf	0,w
  5197     02A8  00AD               	movwf	i1sprintf@val+1
  5198     02A9                     i1l2353:
  5199     02A9  3002               	movlw	2
  5200     02AA  00A7               	movwf	??i1_sprintf
  5201     02AB  0827               	movf	??i1_sprintf,w
  5202     02AC  07AA               	addwf	i1sprintf@ap,f
  5203     02AD                     i1l2355:
  5204                           
  5205                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  5206     02AD  1FAD               	btfss	i1sprintf@val+1,7
  5207     02AE  2AB0               	goto	u253_21
  5208     02AF  2AB1               	goto	u253_20
  5209     02B0                     u253_21:
  5210     02B0  2ABA               	goto	i1l2361
  5211     02B1                     u253_20:
  5212     02B1                     i1l2357:
  5213                           
  5214                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  5215     02B1  3003               	movlw	3
  5216     02B2  00A7               	movwf	??i1_sprintf
  5217     02B3  0827               	movf	??i1_sprintf,w
  5218     02B4  04AE               	iorwf	i1sprintf@flag,f
  5219     02B5                     i1l2359:
  5220                           
  5221                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  5222     02B5  09AC               	comf	i1sprintf@val,f
  5223     02B6  09AD               	comf	i1sprintf@val+1,f
  5224     02B7  0AAC               	incf	i1sprintf@val,f
  5225     02B8  1903               	skipnz
  5226     02B9  0AAD               	incf	i1sprintf@val+1,f
  5227     02BA                     i1l2361:
  5228                           
  5229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  5230     02BA  01B2               	clrf	i1sprintf@c
  5231     02BB  0AB2               	incf	i1sprintf@c,f
  5232     02BC                     i1l2367:
  5233                           
  5234                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  5235     02BC  0832               	movf	i1sprintf@c,w
  5236     02BD  00A7               	movwf	??i1_sprintf
  5237     02BE  0727               	addwf	??i1_sprintf,w
  5238     02BF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5239     02C0  0084               	movwf	4
  5240     02C1  120A  158A  200A  120A  118A  	fcall	stringdir
  5241     02C6  00A8               	movwf	??i1_sprintf+1
  5242     02C7  120A  158A  200A  120A  118A  	fcall	stringdir
  5243     02CC  00A9               	movwf	??i1_sprintf+2
  5244     02CD  0829               	movf	??i1_sprintf+2,w
  5245     02CE  022D               	subwf	i1sprintf@val+1,w
  5246     02CF  1D03               	skipz
  5247     02D0  2AD3               	goto	u254_25
  5248     02D1  0828               	movf	??i1_sprintf+1,w
  5249     02D2  022C               	subwf	i1sprintf@val,w
  5250     02D3                     u254_25:
  5251     02D3  1803               	skipnc
  5252     02D4  2AD6               	goto	u254_21
  5253     02D5  2AD7               	goto	u254_20
  5254     02D6                     u254_21:
  5255     02D6  2AD8               	goto	i1l2371
  5256     02D7                     u254_20:
  5257     02D7  2AE2               	goto	i1l2373
  5258     02D8                     i1l2371:
  5259     02D8  3001               	movlw	1
  5260     02D9  00A7               	movwf	??i1_sprintf
  5261     02DA  0827               	movf	??i1_sprintf,w
  5262     02DB  07B2               	addwf	i1sprintf@c,f
  5263     02DC  3005               	movlw	5
  5264     02DD  0632               	xorwf	i1sprintf@c,w
  5265     02DE  1D03               	btfss	3,2
  5266     02DF  2AE1               	goto	u255_21
  5267     02E0  2AE2               	goto	u255_20
  5268     02E1                     u255_21:
  5269     02E1  2ABC               	goto	i1l2367
  5270     02E2                     u255_20:
  5271     02E2                     i1l2373:
  5272                           
  5273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  5274     02E2  082F               	movf	i1sprintf@width,w
  5275     02E3  0430               	iorwf	i1sprintf@width+1,w
  5276     02E4  1903               	btfsc	3,2
  5277     02E5  2AE7               	goto	u256_21
  5278     02E6  2AE8               	goto	u256_20
  5279     02E7                     u256_21:
  5280     02E7  2AF4               	goto	i1l359
  5281     02E8                     u256_20:
  5282     02E8                     i1l2375:
  5283     02E8  082E               	movf	i1sprintf@flag,w
  5284     02E9  3903               	andlw	3
  5285     02EA  1903               	btfsc	3,2
  5286     02EB  2AED               	goto	u257_21
  5287     02EC  2AEE               	goto	u257_20
  5288     02ED                     u257_21:
  5289     02ED  2AF4               	goto	i1l359
  5290     02EE                     u257_20:
  5291     02EE                     i1l2377:
  5292                           
  5293                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1372:    width--;
  5294     02EE  30FF               	movlw	255
  5295     02EF  07AF               	addwf	i1sprintf@width,f
  5296     02F0  1803               	skipnc
  5297     02F1  0AB0               	incf	i1sprintf@width+1,f
  5298     02F2  30FF               	movlw	255
  5299     02F3  07B0               	addwf	i1sprintf@width+1,f
  5300     02F4                     i1l359:
  5301                           
  5302                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  5303     02F4  0830               	movf	i1sprintf@width+1,w
  5304     02F5  3A80               	xorlw	128
  5305     02F6  3C80               	sublw	128
  5306     02F7  1D03               	skipz
  5307     02F8  2AFB               	goto	u258_25
  5308     02F9  082F               	movf	i1sprintf@width,w
  5309     02FA  0232               	subwf	i1sprintf@c,w
  5310     02FB                     u258_25:
  5311     02FB  1803               	skipnc
  5312     02FC  2AFE               	goto	u258_21
  5313     02FD  2AFF               	goto	u258_20
  5314     02FE                     u258_21:
  5315     02FE  2B0B               	goto	i1l2381
  5316     02FF                     u258_20:
  5317     02FF                     i1l2379:
  5318                           
  5319                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  5320     02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5321     0300  1303               	bcf	3,6	;RP1=0, select bank0
  5322     0301  0832               	movf	i1sprintf@c,w
  5323     0302  00A7               	movwf	??i1_sprintf
  5324     0303  01A8               	clrf	??i1_sprintf+1
  5325     0304  0827               	movf	??i1_sprintf,w
  5326     0305  02AF               	subwf	i1sprintf@width,f
  5327     0306  0828               	movf	??i1_sprintf+1,w
  5328     0307  1C03               	skipc
  5329     0308  03B0               	decf	i1sprintf@width+1,f
  5330     0309  02B0               	subwf	i1sprintf@width+1,f
  5331     030A  2B0F               	goto	i1l2383
  5332     030B                     i1l2381:
  5333                           
  5334                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  5335     030B  1283               	bcf	3,5	;RP0=0, select bank0
  5336     030C  1303               	bcf	3,6	;RP1=0, select bank0
  5337     030D  01AF               	clrf	i1sprintf@width
  5338     030E  01B0               	clrf	i1sprintf@width+1
  5339     030F                     i1l2383:
  5340                           
  5341                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  5342     030F  1D2E               	btfss	i1sprintf@flag,2
  5343     0310  2B12               	goto	u259_21
  5344     0311  2B13               	goto	u259_20
  5345     0312                     u259_21:
  5346     0312  2B3E               	goto	i1l2399
  5347     0313                     u259_20:
  5348     0313                     i1l2385:
  5349                           
  5350                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  5351     0313  082E               	movf	i1sprintf@flag,w
  5352     0314  3903               	andlw	3
  5353     0315  1903               	btfsc	3,2
  5354     0316  2B18               	goto	u260_21
  5355     0317  2B19               	goto	u260_20
  5356     0318                     u260_21:
  5357     0318  2B22               	goto	i1l2391
  5358     0319                     u260_20:
  5359     0319                     i1l2387:
  5360                           
  5361                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  5362     0319  0831               	movf	i1sprintf@sp,w
  5363     031A  0084               	movwf	4
  5364     031B  302D               	movlw	45
  5365     031C  1383               	bcf	3,7	;select IRP bank0
  5366     031D  0080               	movwf	0
  5367     031E                     i1l2389:
  5368     031E  3001               	movlw	1
  5369     031F  00A7               	movwf	??i1_sprintf
  5370     0320  0827               	movf	??i1_sprintf,w
  5371     0321  07B1               	addwf	i1sprintf@sp,f
  5372     0322                     i1l2391:
  5373                           
  5374                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  5375     0322  082F               	movf	i1sprintf@width,w
  5376     0323  0430               	iorwf	i1sprintf@width+1,w
  5377     0324  1903               	btfsc	3,2
  5378     0325  2B27               	goto	u261_21
  5379     0326  2B28               	goto	u261_20
  5380     0327                     u261_21:
  5381     0327  2B68               	goto	i1l2413
  5382     0328                     u261_20:
  5383     0328                     i1l2393:
  5384                           
  5385                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  5386     0328  0831               	movf	i1sprintf@sp,w
  5387     0329  0084               	movwf	4
  5388     032A  3030               	movlw	48
  5389     032B  1383               	bcf	3,7	;select IRP bank0
  5390     032C  0080               	movwf	0
  5391     032D                     i1l2395:
  5392     032D  3001               	movlw	1
  5393     032E  00A7               	movwf	??i1_sprintf
  5394     032F  0827               	movf	??i1_sprintf,w
  5395     0330  07B1               	addwf	i1sprintf@sp,f
  5396     0331                     i1l2397:
  5397     0331  30FF               	movlw	255
  5398     0332  07AF               	addwf	i1sprintf@width,f
  5399     0333  1803               	skipnc
  5400     0334  0AB0               	incf	i1sprintf@width+1,f
  5401     0335  30FF               	movlw	255
  5402     0336  07B0               	addwf	i1sprintf@width+1,f
  5403     0337  082F               	movf	i1sprintf@width,w
  5404     0338  0430               	iorwf	i1sprintf@width+1,w
  5405     0339  1D03               	btfss	3,2
  5406     033A  2B3C               	goto	u262_21
  5407     033B  2B3D               	goto	u262_20
  5408     033C                     u262_21:
  5409     033C  2B28               	goto	i1l2393
  5410     033D                     u262_20:
  5411     033D  2B68               	goto	i1l2413
  5412     033E                     i1l2399:
  5413                           
  5414                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1450:    if(width
  5415     033E  082F               	movf	i1sprintf@width,w
  5416     033F  0430               	iorwf	i1sprintf@width+1,w
  5417     0340  1903               	btfsc	3,2
  5418     0341  2B43               	goto	u263_21
  5419     0342  2B44               	goto	u263_20
  5420     0343                     u263_21:
  5421     0343  2B59               	goto	i1l2407
  5422     0344                     u263_20:
  5423     0344                     i1l2401:
  5424                           
  5425                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  5426     0344  0831               	movf	i1sprintf@sp,w
  5427     0345  0084               	movwf	4
  5428     0346  3020               	movlw	32
  5429     0347  1383               	bcf	3,7	;select IRP bank0
  5430     0348  0080               	movwf	0
  5431     0349                     i1l2403:
  5432     0349  3001               	movlw	1
  5433     034A  00A7               	movwf	??i1_sprintf
  5434     034B  0827               	movf	??i1_sprintf,w
  5435     034C  07B1               	addwf	i1sprintf@sp,f
  5436     034D                     i1l2405:
  5437     034D  30FF               	movlw	255
  5438     034E  07AF               	addwf	i1sprintf@width,f
  5439     034F  1803               	skipnc
  5440     0350  0AB0               	incf	i1sprintf@width+1,f
  5441     0351  30FF               	movlw	255
  5442     0352  07B0               	addwf	i1sprintf@width+1,f
  5443     0353  082F               	movf	i1sprintf@width,w
  5444     0354  0430               	iorwf	i1sprintf@width+1,w
  5445     0355  1D03               	btfss	3,2
  5446     0356  2B58               	goto	u264_21
  5447     0357  2B59               	goto	u264_20
  5448     0358                     u264_21:
  5449     0358  2B44               	goto	i1l2401
  5450     0359                     u264_20:
  5451     0359                     i1l2407:
  5452                           
  5453                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  5454     0359  082E               	movf	i1sprintf@flag,w
  5455     035A  3903               	andlw	3
  5456     035B  1903               	btfsc	3,2
  5457     035C  2B5E               	goto	u265_21
  5458     035D  2B5F               	goto	u265_20
  5459     035E                     u265_21:
  5460     035E  2B68               	goto	i1l2413
  5461     035F                     u265_20:
  5462     035F                     i1l2409:
  5463                           
  5464                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  5465     035F  0831               	movf	i1sprintf@sp,w
  5466     0360  0084               	movwf	4
  5467     0361  302D               	movlw	45
  5468     0362  1383               	bcf	3,7	;select IRP bank0
  5469     0363  0080               	movwf	0
  5470     0364                     i1l2411:
  5471     0364  3001               	movlw	1
  5472     0365  00A7               	movwf	??i1_sprintf
  5473     0366  0827               	movf	??i1_sprintf,w
  5474     0367  07B1               	addwf	i1sprintf@sp,f
  5475     0368                     i1l2413:
  5476                           
  5477                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  5478     0368  0832               	movf	i1sprintf@c,w
  5479     0369  00AB               	movwf	i1sprintf@prec
  5480                           
  5481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  5482     036A  2BA0               	goto	i1l2421
  5483     036B                     i1l2415:
  5484                           
  5485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  5486     036B  300A               	movlw	10
  5487     036C  00F8               	movwf	i1___lwmod@divisor
  5488     036D  3000               	movlw	0
  5489     036E  00F9               	movwf	i1___lwmod@divisor+1
  5490     036F  082B               	movf	i1sprintf@prec,w
  5491     0370  00A7               	movwf	??i1_sprintf
  5492     0371  0727               	addwf	??i1_sprintf,w
  5493     0372  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  5494     0373  0084               	movwf	4
  5495     0374  120A  158A  200A  120A  118A  	fcall	stringdir
  5496     0379  00F0               	movwf	i1___lwdiv@divisor
  5497     037A  120A  158A  200A  120A  118A  	fcall	stringdir
  5498     037F  00F1               	movwf	i1___lwdiv@divisor+1
  5499     0380  082D               	movf	i1sprintf@val+1,w
  5500     0381  00F3               	movwf	i1___lwdiv@dividend+1
  5501     0382  082C               	movf	i1sprintf@val,w
  5502     0383  00F2               	movwf	i1___lwdiv@dividend
  5503     0384  120A  158A  26B9  120A  118A  	fcall	i1___lwdiv
  5504     0389  0871               	movf	?i1___lwdiv+1,w
  5505     038A  00FB               	movwf	i1___lwmod@dividend+1
  5506     038B  0870               	movf	?i1___lwdiv,w
  5507     038C  00FA               	movwf	i1___lwmod@dividend
  5508     038D  120A  158A  2607  120A  118A  	fcall	i1___lwmod
  5509     0392  0878               	movf	?i1___lwmod,w
  5510     0393  3E30               	addlw	48
  5511     0394  1283               	bcf	3,5	;RP0=0, select bank0
  5512     0395  1303               	bcf	3,6	;RP1=0, select bank0
  5513     0396  00B2               	movwf	i1sprintf@c
  5514     0397                     i1l2417:
  5515                           
  5516                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  5517     0397  0831               	movf	i1sprintf@sp,w
  5518     0398  0084               	movwf	4
  5519     0399  0832               	movf	i1sprintf@c,w
  5520     039A  1383               	bcf	3,7	;select IRP bank0
  5521     039B  0080               	movwf	0
  5522     039C                     i1l2419:
  5523     039C  3001               	movlw	1
  5524     039D  00A7               	movwf	??i1_sprintf
  5525     039E  0827               	movf	??i1_sprintf,w
  5526     039F  07B1               	addwf	i1sprintf@sp,f
  5527     03A0                     i1l2421:
  5528                           
  5529                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  5530     03A0  30FF               	movlw	255
  5531     03A1  00A7               	movwf	??i1_sprintf
  5532     03A2  0827               	movf	??i1_sprintf,w
  5533     03A3  07AB               	addwf	i1sprintf@prec,f
  5534     03A4  0A2B               	incf	i1sprintf@prec,w
  5535     03A5  1D03               	btfss	3,2
  5536     03A6  2BA8               	goto	u266_21
  5537     03A7  2BA9               	goto	u266_20
  5538     03A8                     u266_21:
  5539     03A8  2B6B               	goto	i1l2415
  5540     03A9                     u266_20:
  5541     03A9                     i1l2423:
  5542                           
  5543                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  5544     03A9  3001               	movlw	1
  5545     03AA  07A0               	addwf	i1sprintf@f,f
  5546     03AB  30FF               	movlw	-1
  5547     03AC  0720               	addwf	i1sprintf@f,w
  5548     03AD  0084               	movwf	4
  5549     03AE  120A  158A  200A  120A  118A  	fcall	stringdir
  5550     03B3  00B2               	movwf	i1sprintf@c
  5551     03B4  0832               	movf	i1sprintf@c,w
  5552     03B5  1D03               	btfss	3,2
  5553     03B6  2BB8               	goto	u267_21
  5554     03B7  2BB9               	goto	u267_20
  5555     03B8                     u267_21:
  5556     03B8  2A06               	goto	i1l2321
  5557     03B9                     u267_20:
  5558     03B9                     i1l2425:
  5559                           
  5560                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  5561     03B9  0831               	movf	i1sprintf@sp,w
  5562     03BA  0084               	movwf	4
  5563     03BB  1383               	bcf	3,7	;select IRP bank0
  5564     03BC  0180               	clrf	0
  5565     03BD                     i1l376:
  5566     03BD  0008               	return
  5567     03BE                     __end_ofi1_sprintf:
  5568                           
  5569                           	psect	text22
  5570     0CAA                     __ptext22:	
  5571 ;; *************** function i1_isdigit *****************
  5572 ;; Defined at:
  5573 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\isdigit.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  c               1    wreg     unsigned char 
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;  c               1    1[COMMON] unsigned char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;		None               void
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5587 ;;      Params:         0       0       0       0       0
  5588 ;;      Locals:         2       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0
  5590 ;;      Totals:         2       0       0       0       0
  5591 ;;Total ram usage:        2 bytes
  5592 ;; Hardware stack levels used: 1
  5593 ;; This function calls:
  5594 ;;		Nothing
  5595 ;; This function is called by:
  5596 ;;		i1_sprintf
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600     0CAA                     i1_isdigit:	
  5601                           ;psect for function i1_isdigit
  5602                           
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in i1_isdigit: [wreg+status,2+status,0]
  5606                           ;i1isdigit@c stored from wreg
  5607     0CAA  00F1               	movwf	i1isdigit@c
  5608     0CAB                     i1l2067:
  5609     0CAB  01F0               	clrf	i1_isdigit$1045
  5610     0CAC                     i1l2069:
  5611     0CAC  303A               	movlw	58
  5612     0CAD  0271               	subwf	i1isdigit@c,w
  5613     0CAE  1803               	skipnc
  5614     0CAF  2CB1               	goto	u213_21
  5615     0CB0  2CB2               	goto	u213_20
  5616     0CB1                     u213_21:
  5617     0CB1  2CBA               	goto	i1l2075
  5618     0CB2                     u213_20:
  5619     0CB2                     i1l2071:
  5620     0CB2  3030               	movlw	48
  5621     0CB3  0271               	subwf	i1isdigit@c,w
  5622     0CB4  1C03               	skipc
  5623     0CB5  2CB7               	goto	u214_21
  5624     0CB6  2CB8               	goto	u214_20
  5625     0CB7                     u214_21:
  5626     0CB7  2CBA               	goto	i1l2075
  5627     0CB8                     u214_20:
  5628     0CB8                     i1l2073:
  5629     0CB8  01F0               	clrf	i1_isdigit$1045
  5630     0CB9  0AF0               	incf	i1_isdigit$1045,f
  5631     0CBA                     i1l2075:
  5632     0CBA  0C70               	rrf	i1_isdigit$1045,w
  5633     0CBB                     i1l833:
  5634     0CBB  0008               	return
  5635     0CBC                     __end_ofi1_isdigit:
  5636                           
  5637                           	psect	text23
  5638     0D5B                     __ptext23:	
  5639 ;; *************** function i1___wmul *****************
  5640 ;; Defined at:
  5641 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;  multiplier      2    0[COMMON] unsigned int 
  5644 ;;  multiplicand    2    2[COMMON] unsigned int 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;  product         2    4[COMMON] unsigned int 
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  2    0[COMMON] unsigned int 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5656 ;;      Params:         4       0       0       0       0
  5657 ;;      Locals:         2       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0
  5659 ;;      Totals:         6       0       0       0       0
  5660 ;;Total ram usage:        6 bytes
  5661 ;; Hardware stack levels used: 1
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		i1_sprintf
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669     0D5B                     i1___wmul:	
  5670                           ;psect for function i1___wmul
  5671                           
  5672     0D5B                     i1l2005:	
  5673                           ;incstack = 0
  5674                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  5675                           
  5676     0D5B  01F4               	clrf	i1___wmul@product
  5677     0D5C  01F5               	clrf	i1___wmul@product+1
  5678     0D5D                     i1l2007:
  5679     0D5D  1C70               	btfss	i1___wmul@multiplier,0
  5680     0D5E  2D60               	goto	u196_21
  5681     0D5F  2D61               	goto	u196_20
  5682     0D60                     u196_21:
  5683     0D60  2D67               	goto	i1l380
  5684     0D61                     u196_20:
  5685     0D61                     i1l2009:
  5686     0D61  0872               	movf	i1___wmul@multiplicand,w
  5687     0D62  07F4               	addwf	i1___wmul@product,f
  5688     0D63  1803               	skipnc
  5689     0D64  0AF5               	incf	i1___wmul@product+1,f
  5690     0D65  0873               	movf	i1___wmul@multiplicand+1,w
  5691     0D66  07F5               	addwf	i1___wmul@product+1,f
  5692     0D67                     i1l380:
  5693     0D67  3001               	movlw	1
  5694     0D68                     u197_25:
  5695     0D68  1003               	clrc
  5696     0D69  0DF2               	rlf	i1___wmul@multiplicand,f
  5697     0D6A  0DF3               	rlf	i1___wmul@multiplicand+1,f
  5698     0D6B  3EFF               	addlw	-1
  5699     0D6C  1D03               	skipz
  5700     0D6D  2D68               	goto	u197_25
  5701     0D6E                     i1l2011:
  5702     0D6E  3001               	movlw	1
  5703     0D6F                     u198_25:
  5704     0D6F  1003               	clrc
  5705     0D70  0CF1               	rrf	i1___wmul@multiplier+1,f
  5706     0D71  0CF0               	rrf	i1___wmul@multiplier,f
  5707     0D72  3EFF               	addlw	-1
  5708     0D73  1D03               	skipz
  5709     0D74  2D6F               	goto	u198_25
  5710     0D75                     i1l2013:
  5711     0D75  0870               	movf	i1___wmul@multiplier,w
  5712     0D76  0471               	iorwf	i1___wmul@multiplier+1,w
  5713     0D77  1D03               	btfss	3,2
  5714     0D78  2D7A               	goto	u199_21
  5715     0D79  2D7B               	goto	u199_20
  5716     0D7A                     u199_21:
  5717     0D7A  2D5D               	goto	i1l2007
  5718     0D7B                     u199_20:
  5719     0D7B                     i1l2015:
  5720     0D7B  0875               	movf	i1___wmul@product+1,w
  5721     0D7C  00F1               	movwf	?i1___wmul+1
  5722     0D7D  0874               	movf	i1___wmul@product,w
  5723     0D7E  00F0               	movwf	?i1___wmul
  5724     0D7F                     i1l382:
  5725     0D7F  0008               	return
  5726     0D80                     __end_ofi1___wmul:
  5727                           
  5728                           	psect	text24
  5729     0E07                     __ptext24:	
  5730 ;; *************** function i1___lwmod *****************
  5731 ;; Defined at:
  5732 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;  divisor         2    8[COMMON] unsigned int 
  5735 ;;  dividend        2   10[COMMON] unsigned int 
  5736 ;; Auto vars:     Size  Location     Type
  5737 ;;  counter         1   13[COMMON] unsigned char 
  5738 ;; Return value:  Size  Location     Type
  5739 ;;                  2    8[COMMON] unsigned int 
  5740 ;; Registers used:
  5741 ;;		wreg, status,2, status,0
  5742 ;; Tracked objects:
  5743 ;;		On entry : 0/0
  5744 ;;		On exit  : 0/0
  5745 ;;		Unchanged: 0/0
  5746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5747 ;;      Params:         4       0       0       0       0
  5748 ;;      Locals:         1       0       0       0       0
  5749 ;;      Temps:          1       0       0       0       0
  5750 ;;      Totals:         6       0       0       0       0
  5751 ;;Total ram usage:        6 bytes
  5752 ;; Hardware stack levels used: 1
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		i1_sprintf
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760     0E07                     i1___lwmod:	
  5761                           ;psect for function i1___lwmod
  5762                           
  5763     0E07                     i1l2045:	
  5764                           ;incstack = 0
  5765                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  5766                           
  5767     0E07  0878               	movf	i1___lwmod@divisor,w
  5768     0E08  0479               	iorwf	i1___lwmod@divisor+1,w
  5769     0E09  1903               	btfsc	3,2
  5770     0E0A  2E0C               	goto	u207_21
  5771     0E0B  2E0D               	goto	u207_20
  5772     0E0C                     u207_21:
  5773     0E0C  2E3C               	goto	i1l2063
  5774     0E0D                     u207_20:
  5775     0E0D                     i1l2047:
  5776     0E0D  01FD               	clrf	i1___lwmod@counter
  5777     0E0E  0AFD               	incf	i1___lwmod@counter,f
  5778     0E0F  2E1B               	goto	i1l2053
  5779     0E10                     i1l2049:
  5780     0E10  3001               	movlw	1
  5781     0E11                     u208_25:
  5782     0E11  1003               	clrc
  5783     0E12  0DF8               	rlf	i1___lwmod@divisor,f
  5784     0E13  0DF9               	rlf	i1___lwmod@divisor+1,f
  5785     0E14  3EFF               	addlw	-1
  5786     0E15  1D03               	skipz
  5787     0E16  2E11               	goto	u208_25
  5788     0E17                     i1l2051:
  5789     0E17  3001               	movlw	1
  5790     0E18  00FC               	movwf	??i1___lwmod
  5791     0E19  087C               	movf	??i1___lwmod,w
  5792     0E1A  07FD               	addwf	i1___lwmod@counter,f
  5793     0E1B                     i1l2053:
  5794     0E1B  1FF9               	btfss	i1___lwmod@divisor+1,7
  5795     0E1C  2E1E               	goto	u209_21
  5796     0E1D  2E1F               	goto	u209_20
  5797     0E1E                     u209_21:
  5798     0E1E  2E10               	goto	i1l2049
  5799     0E1F                     u209_20:
  5800     0E1F                     i1l2055:
  5801     0E1F  0879               	movf	i1___lwmod@divisor+1,w
  5802     0E20  027B               	subwf	i1___lwmod@dividend+1,w
  5803     0E21  1D03               	skipz
  5804     0E22  2E25               	goto	u210_25
  5805     0E23  0878               	movf	i1___lwmod@divisor,w
  5806     0E24  027A               	subwf	i1___lwmod@dividend,w
  5807     0E25                     u210_25:
  5808     0E25  1C03               	skipc
  5809     0E26  2E28               	goto	u210_21
  5810     0E27  2E29               	goto	u210_20
  5811     0E28                     u210_21:
  5812     0E28  2E2F               	goto	i1l2059
  5813     0E29                     u210_20:
  5814     0E29                     i1l2057:
  5815     0E29  0878               	movf	i1___lwmod@divisor,w
  5816     0E2A  02FA               	subwf	i1___lwmod@dividend,f
  5817     0E2B  0879               	movf	i1___lwmod@divisor+1,w
  5818     0E2C  1C03               	skipc
  5819     0E2D  03FB               	decf	i1___lwmod@dividend+1,f
  5820     0E2E  02FB               	subwf	i1___lwmod@dividend+1,f
  5821     0E2F                     i1l2059:
  5822     0E2F  3001               	movlw	1
  5823     0E30                     u211_25:
  5824     0E30  1003               	clrc
  5825     0E31  0CF9               	rrf	i1___lwmod@divisor+1,f
  5826     0E32  0CF8               	rrf	i1___lwmod@divisor,f
  5827     0E33  3EFF               	addlw	-1
  5828     0E34  1D03               	skipz
  5829     0E35  2E30               	goto	u211_25
  5830     0E36                     i1l2061:
  5831     0E36  3001               	movlw	1
  5832     0E37  02FD               	subwf	i1___lwmod@counter,f
  5833     0E38  1D03               	btfss	3,2
  5834     0E39  2E3B               	goto	u212_21
  5835     0E3A  2E3C               	goto	u212_20
  5836     0E3B                     u212_21:
  5837     0E3B  2E1F               	goto	i1l2055
  5838     0E3C                     u212_20:
  5839     0E3C                     i1l2063:
  5840     0E3C  087B               	movf	i1___lwmod@dividend+1,w
  5841     0E3D  00F9               	movwf	?i1___lwmod+1
  5842     0E3E  087A               	movf	i1___lwmod@dividend,w
  5843     0E3F  00F8               	movwf	?i1___lwmod
  5844     0E40                     i1l662:
  5845     0E40  0008               	return
  5846     0E41                     __end_ofi1___lwmod:
  5847                           
  5848                           	psect	text25
  5849     0EB9                     __ptext25:	
  5850 ;; *************** function i1___lwdiv *****************
  5851 ;; Defined at:
  5852 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  divisor         2    0[COMMON] unsigned int 
  5855 ;;  dividend        2    2[COMMON] unsigned int 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  quotient        2    5[COMMON] unsigned int 
  5858 ;;  counter         1    7[COMMON] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  2    0[COMMON] unsigned int 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0
  5863 ;; Tracked objects:
  5864 ;;		On entry : 0/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5868 ;;      Params:         4       0       0       0       0
  5869 ;;      Locals:         3       0       0       0       0
  5870 ;;      Temps:          1       0       0       0       0
  5871 ;;      Totals:         8       0       0       0       0
  5872 ;;Total ram usage:        8 bytes
  5873 ;; Hardware stack levels used: 1
  5874 ;; This function calls:
  5875 ;;		Nothing
  5876 ;; This function is called by:
  5877 ;;		i1_sprintf
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881     0EB9                     i1___lwdiv:	
  5882                           ;psect for function i1___lwdiv
  5883                           
  5884     0EB9                     i1l2019:	
  5885                           ;incstack = 0
  5886                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  5887                           
  5888     0EB9  01F5               	clrf	i1___lwdiv@quotient
  5889     0EBA  01F6               	clrf	i1___lwdiv@quotient+1
  5890     0EBB                     i1l2021:
  5891     0EBB  0870               	movf	i1___lwdiv@divisor,w
  5892     0EBC  0471               	iorwf	i1___lwdiv@divisor+1,w
  5893     0EBD  1903               	btfsc	3,2
  5894     0EBE  2EC0               	goto	u200_21
  5895     0EBF  2EC1               	goto	u200_20
  5896     0EC0                     u200_21:
  5897     0EC0  2EF8               	goto	i1l2041
  5898     0EC1                     u200_20:
  5899     0EC1                     i1l2023:
  5900     0EC1  01F7               	clrf	i1___lwdiv@counter
  5901     0EC2  0AF7               	incf	i1___lwdiv@counter,f
  5902     0EC3  2ECF               	goto	i1l2029
  5903     0EC4                     i1l2025:
  5904     0EC4  3001               	movlw	1
  5905     0EC5                     u201_25:
  5906     0EC5  1003               	clrc
  5907     0EC6  0DF0               	rlf	i1___lwdiv@divisor,f
  5908     0EC7  0DF1               	rlf	i1___lwdiv@divisor+1,f
  5909     0EC8  3EFF               	addlw	-1
  5910     0EC9  1D03               	skipz
  5911     0ECA  2EC5               	goto	u201_25
  5912     0ECB                     i1l2027:
  5913     0ECB  3001               	movlw	1
  5914     0ECC  00F4               	movwf	??i1___lwdiv
  5915     0ECD  0874               	movf	??i1___lwdiv,w
  5916     0ECE  07F7               	addwf	i1___lwdiv@counter,f
  5917     0ECF                     i1l2029:
  5918     0ECF  1FF1               	btfss	i1___lwdiv@divisor+1,7
  5919     0ED0  2ED2               	goto	u202_21
  5920     0ED1  2ED3               	goto	u202_20
  5921     0ED2                     u202_21:
  5922     0ED2  2EC4               	goto	i1l2025
  5923     0ED3                     u202_20:
  5924     0ED3                     i1l2031:
  5925     0ED3  3001               	movlw	1
  5926     0ED4                     u203_25:
  5927     0ED4  1003               	clrc
  5928     0ED5  0DF5               	rlf	i1___lwdiv@quotient,f
  5929     0ED6  0DF6               	rlf	i1___lwdiv@quotient+1,f
  5930     0ED7  3EFF               	addlw	-1
  5931     0ED8  1D03               	skipz
  5932     0ED9  2ED4               	goto	u203_25
  5933     0EDA  0871               	movf	i1___lwdiv@divisor+1,w
  5934     0EDB  0273               	subwf	i1___lwdiv@dividend+1,w
  5935     0EDC  1D03               	skipz
  5936     0EDD  2EE0               	goto	u204_25
  5937     0EDE  0870               	movf	i1___lwdiv@divisor,w
  5938     0EDF  0272               	subwf	i1___lwdiv@dividend,w
  5939     0EE0                     u204_25:
  5940     0EE0  1C03               	skipc
  5941     0EE1  2EE3               	goto	u204_21
  5942     0EE2  2EE4               	goto	u204_20
  5943     0EE3                     u204_21:
  5944     0EE3  2EEB               	goto	i1l2037
  5945     0EE4                     u204_20:
  5946     0EE4                     i1l2033:
  5947     0EE4  0870               	movf	i1___lwdiv@divisor,w
  5948     0EE5  02F2               	subwf	i1___lwdiv@dividend,f
  5949     0EE6  0871               	movf	i1___lwdiv@divisor+1,w
  5950     0EE7  1C03               	skipc
  5951     0EE8  03F3               	decf	i1___lwdiv@dividend+1,f
  5952     0EE9  02F3               	subwf	i1___lwdiv@dividend+1,f
  5953     0EEA                     i1l2035:
  5954     0EEA  1475               	bsf	i1___lwdiv@quotient,0
  5955     0EEB                     i1l2037:
  5956     0EEB  3001               	movlw	1
  5957     0EEC                     u205_25:
  5958     0EEC  1003               	clrc
  5959     0EED  0CF1               	rrf	i1___lwdiv@divisor+1,f
  5960     0EEE  0CF0               	rrf	i1___lwdiv@divisor,f
  5961     0EEF  3EFF               	addlw	-1
  5962     0EF0  1D03               	skipz
  5963     0EF1  2EEC               	goto	u205_25
  5964     0EF2                     i1l2039:
  5965     0EF2  3001               	movlw	1
  5966     0EF3  02F7               	subwf	i1___lwdiv@counter,f
  5967     0EF4  1D03               	btfss	3,2
  5968     0EF5  2EF7               	goto	u206_21
  5969     0EF6  2EF8               	goto	u206_20
  5970     0EF7                     u206_21:
  5971     0EF7  2ED3               	goto	i1l2031
  5972     0EF8                     u206_20:
  5973     0EF8                     i1l2041:
  5974     0EF8  0876               	movf	i1___lwdiv@quotient+1,w
  5975     0EF9  00F1               	movwf	?i1___lwdiv+1
  5976     0EFA  0875               	movf	i1___lwdiv@quotient,w
  5977     0EFB  00F0               	movwf	?i1___lwdiv
  5978     0EFC                     i1l652:
  5979     0EFC  0008               	return
  5980     0EFD                     __end_ofi1___lwdiv:
  5981                           
  5982                           	psect	text26
  5983     0D80                     __ptext26:	
  5984 ;; *************** function _cadena *****************
  5985 ;; Defined at:
  5986 ;;		line 186 in file "main.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  cursor          2    0[COMMON] PTR unsigned char 
  5989 ;;		 -> STR_7(3), STR_5(26), display(3), 
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;		None
  5992 ;; Return value:  Size  Location     Type
  5993 ;;                  1    wreg      void 
  5994 ;; Registers used:
  5995 ;;		wreg, fsr0l, fsr0h, btemp+1, pclath
  5996 ;; Tracked objects:
  5997 ;;		On entry : 0/0
  5998 ;;		On exit  : 0/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6001 ;;      Params:         2       0       0       0       0
  6002 ;;      Locals:         0       0       0       0       0
  6003 ;;      Temps:          0       0       0       0       0
  6004 ;;      Totals:         2       0       0       0       0
  6005 ;;Total ram usage:        2 bytes
  6006 ;; Hardware stack levels used: 2
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_isr
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014     0D80                     _cadena:	
  6015                           ;psect for function _cadena
  6016                           
  6017     0D80                     i1l2273:	
  6018                           ;incstack = 0
  6019                           ; Regs used in _cadena: [wreg-fsr0h+btemp+1+pclath]
  6020                           
  6021                           
  6022                           ;main.c: 187:     while (*cursor != '\0'){
  6023     0D80  2D95               	goto	i1l2279
  6024     0D81                     i1l103:
  6025     0D81  1E0C               	btfss	12,4	;volatile
  6026     0D82  2D84               	goto	u239_21
  6027     0D83  2D85               	goto	u239_20
  6028     0D84                     u239_21:
  6029     0D84  2D81               	goto	i1l103
  6030     0D85                     u239_20:
  6031     0D85                     i1l2275:
  6032                           
  6033                           ;main.c: 189:             TXREG = *cursor;
  6034     0D85  0871               	movf	cadena@cursor+1,w
  6035     0D86  00FF               	movwf	btemp+1
  6036     0D87  0870               	movf	cadena@cursor,w
  6037     0D88  0084               	movwf	4
  6038     0D89  120A  158A  2000  120A  158A  	fcall	stringtab
  6039     0D8E  0099               	movwf	25	;volatile
  6040     0D8F                     i1l2277:
  6041                           
  6042                           ;main.c: 190:             *cursor++;
  6043     0D8F  3001               	movlw	1
  6044     0D90  07F0               	addwf	cadena@cursor,f
  6045     0D91  1803               	skipnc
  6046     0D92  0AF1               	incf	cadena@cursor+1,f
  6047     0D93  3000               	movlw	0
  6048     0D94  07F1               	addwf	cadena@cursor+1,f
  6049     0D95                     i1l2279:
  6050                           
  6051                           ;main.c: 187:     while (*cursor != '\0'){
  6052     0D95  0871               	movf	cadena@cursor+1,w
  6053     0D96  1283               	bcf	3,5	;RP0=0, select bank0
  6054     0D97  1303               	bcf	3,6	;RP1=0, select bank0
  6055     0D98  00FF               	movwf	btemp+1
  6056     0D99  0870               	movf	cadena@cursor,w
  6057     0D9A  0084               	movwf	4
  6058     0D9B  120A  158A  2000  120A  158A  	fcall	stringtab
  6059     0DA0  3A00               	xorlw	0
  6060     0DA1  1D03               	skipz
  6061     0DA2  2DA4               	goto	u240_21
  6062     0DA3  2DA5               	goto	u240_20
  6063     0DA4                     u240_21:
  6064     0DA4  2D81               	goto	i1l103
  6065     0DA5                     u240_20:
  6066     0DA5                     i1l107:
  6067     0DA5  0008               	return
  6068     0DA6                     __end_of_cadena:
  6069                           
  6070                           	psect	text27
  6071     0C93                     __ptext27:	
  6072 ;; *************** function _adc_read *****************
  6073 ;; Defined at:
  6074 ;;		line 34 in file "ADC_setup.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;		None
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  2    0[COMMON] int 
  6081 ;; Registers used:
  6082 ;;		wreg
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6088 ;;      Params:         2       0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0
  6090 ;;      Temps:          2       0       0       0       0
  6091 ;;      Totals:         4       0       0       0       0
  6092 ;;Total ram usage:        4 bytes
  6093 ;; Hardware stack levels used: 1
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_isr
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101     0C93                     _adc_read:	
  6102                           ;psect for function _adc_read
  6103                           
  6104     0C93                     i1l2269:	
  6105                           ;incstack = 0
  6106                           ; Regs used in _adc_read: [wreg]
  6107                           
  6108                           
  6109                           ;ADC_setup.c: 35:     return ADRESH;
  6110     0C93  1283               	bcf	3,5	;RP0=0, select bank0
  6111     0C94  1303               	bcf	3,6	;RP1=0, select bank0
  6112     0C95  081E               	movf	30,w	;volatile
  6113     0C96  00F2               	movwf	??_adc_read
  6114     0C97  01F3               	clrf	??_adc_read+1
  6115     0C98  0872               	movf	??_adc_read,w
  6116     0C99  00F0               	movwf	?_adc_read
  6117     0C9A  0873               	movf	??_adc_read+1,w
  6118     0C9B  00F1               	movwf	?_adc_read+1
  6119     0C9C                     i1l186:
  6120     0C9C  0008               	return
  6121     0C9D                     __end_of_adc_read:
  6122     007E                     btemp	set	126	;btemp
  6123     007E                     wtemp0	set	126
  6124                           
  6125                           	psect	idloc
  6126                           
  6127                           ;Config register IDLOC0 @ 0x2000
  6128                           ;	unspecified, using default values
  6129     2000                     	org	8192
  6130     2000  3FFF               	dw	16383
  6131                           
  6132                           ;Config register IDLOC1 @ 0x2001
  6133                           ;	unspecified, using default values
  6134     2001                     	org	8193
  6135     2001  3FFF               	dw	16383
  6136                           
  6137                           ;Config register IDLOC2 @ 0x2002
  6138                           ;	unspecified, using default values
  6139     2002                     	org	8194
  6140     2002  3FFF               	dw	16383
  6141                           
  6142                           ;Config register IDLOC3 @ 0x2003
  6143                           ;	unspecified, using default values
  6144     2003                     	org	8195
  6145     2003  3FFF               	dw	16383
  6146                           
  6147                           	psect	config
  6148                           
  6149                           ;Config register CONFIG1 @ 0x2007
  6150                           ;	Oscillator Selection bits
  6151                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  6152                           ;	Watchdog Timer Enable bit
  6153                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  6154                           ;	Power-up Timer Enable bit
  6155                           ;	PWRTE = OFF, PWRT disabled
  6156                           ;	RE3/MCLR pin function select bit
  6157                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  6158                           ;	Code Protection bit
  6159                           ;	CP = OFF, Program memory code protection is disabled
  6160                           ;	Data Code Protection bit
  6161                           ;	CPD = OFF, Data memory code protection is disabled
  6162                           ;	Brown Out Reset Selection bits
  6163                           ;	BOREN = OFF, BOR disabled
  6164                           ;	Internal External Switchover bit
  6165                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  6166                           ;	Fail-Safe Clock Monitor Enabled bit
  6167                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  6168                           ;	Low Voltage Programming Enable bit
  6169                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  6170                           ;	In-Circuit Debugger Mode bit
  6171                           ;	DEBUG = 0x1, unprogramme  6172     2007                     	org	8199
  6173     2007  20D4               	dw	8404
  6174                           
  6175                           ;Config register CONFIG2 @ 0x2008
  6176                           ;	Brown-out Reset Selection bit
  6177                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  6178                           ;	Flash Program Memory Self Write Enable bits
  6179                           ;	WRT = OFF, Write protection off
  6180     2008                     	org	8200
  6181     2008  3FFF               	dw	16383

Data Sizes:
    Strings     56
    Constant    10
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     34      51
    BANK1            80     34      34
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_6(CODE[9]), STR_4(CODE[5]), STR_3(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 3
		 -> display_counter(BANK0[1]), display(BANK0[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 7
		 -> display_counter(BANK0[1]), display(BANK0[3]), STR_2(CODE[7]), STR_1(CODE[6]), 

    cadena@cursor	PTR unsigned char  size(2) Largest target is 26
		 -> STR_7(CODE[3]), STR_5(CODE[26]), display(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK0

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _main->___awdiv
    _main->_adc_init
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _map_adc_volt->___awdiv
    ___awdiv->___wmul
    _adc_init->_adc_change_channel
    ___awmod->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->i1_sprintf

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _map_adc_volt->___awdiv
    ___awdiv->___wmul
    ___awmod->___awdiv

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   12092
                                             28 BANK1      6     6      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                        _UART_config
                            ___awdiv
                            ___awmod
                             ___wmul
                           _adc_init
                       _map_adc_volt
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    3604
                                              9 BANK1     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                             29 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              3 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                             29 BANK0      5     1      4
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _map_adc_volt                                        10     0     10    2688
                                             10 BANK1     10     0     10
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1036
                                             29 BANK0      4     0      4
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     985
                                             33 BANK0      1     1      0
                                              2 BANK1      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             3     1      2     482
                                             31 BANK0      3     1      2
                 _adc_change_channel
 ---------------------------------------------------------------------------------
 (2) _adc_change_channel                                   2     0      2     384
                                             29 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     793
                                             10 BANK1      7     3      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_config                                          2     0      2      98
                                             29 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     769
                                             32 BANK0      2     0      2
                                              0 BANK1      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     279
                                             30 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     831
                                             33 BANK0      1     0      1
                                              0 BANK1      2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              0 BANK1      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                             30 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                             29 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 10    10      0    1844
                                             19 BANK0     10    10      0
                           _adc_read
                             _cadena
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (5) i1_sprintf                                           27    20      7    1571
                                              0 BANK0     19    12      7
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (6) i1_isdigit                                            2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) _cadena                                               2     0      2     273
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _adc_read                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_config
   ___awdiv
     ___wmul (ARG)
   ___awmod
     ___awdiv (ARG)
     ___wmul (ARG)
   ___wmul
   _adc_init
     _adc_change_channel
   _map_adc_volt
     ___awdiv
     ___wmul
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _isr (ROOT)
   _adc_read
   _cadena
   i1_sprintf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      63       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      33       5       63.7%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     22      22       7       42.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      63      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jul 26 23:52:54 2023

                         pc 0002                          l98 0CE5                ___awdiv@sign 00A7  
                        fsr 0004         ___wmul@multiplicand 003F            i1___wmul@product 0074  
                       l120 0E58                         l121 0E59                         l130 0E7B  
                       l122 0E5F                         l123 0E60                         l203 0641  
                       l132 0E7C                         l124 0E66                         l116 0E4A  
                       l125 0E67                         l117 0E4B                         l126 0E6D  
                       l118 0E51                         l150 0CFD                         l127 0E6E  
                       l119 0E52                         l135 0D19                         l223 0F45  
                       l128 0E74                         l144 0DCF                         l129 0E75  
                       l138 0CA9                         l147 0FA0                         l156 07A4  
                       l237 0D37                         l341 003C                         l183 0D5A  
                       l380 0DE5                         l533 0740                         l382 0E06  
                       l359 0124                         l376 01FF                         l546 07FF  
                       l652 0FFF                         l662 0EB8                         l833 0CCF  
                       _isr 0642                         fsr0 0004                         indf 0000  
              ___awmod@sign 00B0                        l2101 0D28                        l2111 0D36  
                      l2103 0D2C                        l2105 0D2D                        l2107 0D30  
                      l2109 0D33                        l3031 00C6                        l2081 0CDC  
                      l2091 0D45                        l2083 0CDD                        l2093 0D50  
                      l2085 0CDE                        l3029 004F                        l2095 0D53  
                      l2087 0CE4                        l2079 0CD0                        l2601 0D08  
                      l2097 0D1A                        l2089 0D38                        l2603 0D0B  
                      l2611 0CF0                        l2099 0D1D                        l1811 0560  
                      l1803 0549                        l2605 0D16                        l2613 0CF3  
                      l1821 057B                        l1813 0564                        l1805 0551  
                      l2621 0DD9                        l2701 0E7D                        l2615 0CFA  
                      l2607 0CE9                        l1831 059A                        l1823 0584  
                      l1815 0569                        l1807 0553                        l2631 06D0  
                      l2623 0DED                        l2711 0E97                        l2703 0E85  
                      l2609 0CEA                        l1841 05BA                        l1833 059F  
                      l1825 0588                        l1817 0572                        l1809 0558  
                      l2641 06E2                        l2633 06D3                        l2625 0DF4  
                      l2617 0DD0                        l2713 0EA1                        l2705 0E88  
                      l2801 00E5                        l2731 0F6E                        l2723 0F46  
                      l1851 05D5                        l1843 05BE                        l1835 05A8  
                      l1827 058D                        l1819 0576                        l2651 06FA  
                      l2643 06E7                        l2635 06D7                        l2627 0DFA  
                      l2619 0DD4                        l2715 0EA7                        l2707 0E8F  
                      l2803 00EA                        l2581 0E48                        l2733 0F99  
                      l2725 0F4C                        l2741 0DB5                        l2901 07D4  
                      l1861 05F4                        l1853 05DE                        l1845 05C3  
                      l1837 05AC                        l1829 0596                        l2661 0724  
                      l2653 0701                        l2645 06EF                        l2637 06DC  
                      l2717 0EAE                        l2709 0E93                        l2821 012F  
                      l2813 0108                        l2591 0E6B                        l2583 0E4F  
                      l2735 0C9D                        l2727 0F57                        l2743 0DBC  
                      l2751 0746                        l2911 07F6                        l2903 07DE  
                      l1871 0614                        l1863 05F9                        l1855 05E2  
                      l1847 05CC                        l1839 05B1                        l2671 073C  
                      l2663 0725                        l2655 0709                        l2647 06F1  
                      l2639 06DE                        l2719 0EB4                        l2831 014E  
                      l2823 013B                        l2815 0112                        l2593 0E72  
                      l2585 0E56                        l2729 0F68                        l2745 0DC2  
                      l2737 0DA9                        l2753 0772                        l2913 07FB  
                      l2905 07E4                        l1881 062F                        l1873 0618  
                      l1865 0602                        l1857 05E7                        l1849 05D0  
                      l2665 072C                        l2657 070D                        l2649 06F7  
                      l2681 0FB2                        l2833 0152                        l2841 016E  
                      l2825 013F                        l2817 0118                        l2809 00EC  
                      l2761 0025                        l2921 03F7                        l2595 0E79  
                      l2587 0E5D                        l2579 0E44                        l2747 0DC9  
                      l2739 0DAE                        l2755 077A                        l2907 07EB  
                      l1883 0638                        l1875 061D                        l1867 0606  
                      l1859 05F0                        l2659 071E                        l2667 0732  
                      l2691 0FE0                        l2683 0FB9                        l2675 0FA1  
                      l1891 0CC6                        l2851 018F                        l2843 0174  
                      l2835 0158                        l2827 0143                        l2819 011E  
                      l2771 003D                        l2763 0028                        l2931 04CA  
                      l2923 040C                        l2589 0E64                        l2597 0D01  
                      l2749 0741                        l2909 07F1                        l1885 063C  
                      l1877 0626                        l1869 060B                        l2669 0737  
                      l2757 0EFD                        l2693 0FE3                        l2685 0FBF  
                      l2677 0FA5                        l1893 0CCC                        l2861 01DE  
                      l2853 0194                        l2845 0179                        l2837 015D  
                      l2829 0149                        l2781 0068                        l2765 002E  
                      l2941 0539                        l2933 04D2                        l2925 0437  
                      l2917 03BE                        l2599 0D02                        l1879 062A  
                      l2695 0FEB                        l2687 0FC5                        l2679 0FAD  
                      l1895 0CCE                        l1887 0CBF                        l2863 01E2  
                      l2847 017D                        l2839 0161                        l2855 0198  
                      l2783 008B                        l2791 00B2                        l2775 0041  
                      l2767 0033                        l2943 053A                        l2935 04FD  
                      l2927 0463                        l2919 03EC                        l2881 07A8  
                      l2689 0FDA                        l2697 0FF3                        l1889 0CC0  
                      l2857 019B                        l2849 0189                        l2793 00D1  
                      l2785 009E                        l2777 0054                        l2769 0038  
                      l2865 01EB                        l2937 0508                        l2929 049E  
                      l2891 07BC                        l2883 07AC                        l2859 01D9  
                      l2795 00D9                        l2867 01FB                        l2787 00A2  
                      l2779 0064                        l2939 0533                        l2893 07C2  
                      l2885 07B1                        l2797 00DD                        l2895 07C5  
                      l2887 07B3                        l2879 07A5                        l2799 00E1  
                      l2897 07CC                        l2889 07B7                        l2899 07D0  
                      ?_isr 0070                        STR_1 0844                        STR_2 083D  
                      STR_3 0834                        STR_4 084A                        STR_5 081A  
                      STR_6 0834                        STR_7 084F                        u3000 0FC5  
                      u3001 0FC4                        u3020 0FDA                        u3100 0EB4  
                      u3021 0FD9                        u3101 0EB3                        u3110 0DAE  
                      u2150 0D28                        u3111 0DAD                        u2151 0D27  
                      u3015 0FC8                        u3120 0DC2                        u1600 05CC  
                      u3040 0FF3                        u3200 0107                        u3121 0DC1  
                      u1601 05CB                        u3041 0FF2                        u3025 0FD6  
                      u3201 0106                        u3130 075A                        u1610 05DE  
                      u1530 0551                        u3050 0E85                        u3210 0112  
                      u1611 05DD                        u1531 0550                        u3035 0FE5  
                      u3051 0E84                        u3211 0111                        u3140 078C  
                      u1620 05F0                        u1540 0560                        u3300 0189  
                      u3220 0118                        u1621 05EF                        u1541 055F  
                      u3301 0188                        u3221 0117                        u3205 0103  
                      u3150 07A4                        u1630 0602                        u1550 0572  
                      u3070 0E97                        u3310 018F                        u3230 011E  
                      u3151 07A3                        u1631 0601                        u1551 0571  
                      u3071 0E96                        u3311 018E                        u3231 011D  
                      u1640 0614                        u1560 0584                        u3080 0EA1  
                      u3320 01EB                        u3240 012F                        u3160 002E  
                      u1641 0613                        u1561 0583                        u3081 0EA0  
                      u3065 0E89                        u3321 01EA                        u3241 012E  
                      u3161 002D                        u3410 07F1                        u1650 0626  
                      u1570 0596                        u3330 01FB                        u3250 0143  
                      u3170 0064                        u3411 07F0                        u1651 0625  
                      u1571 0595                        u3331 01FA                        u3251 0142  
                      u3171 0063                        u3420 07F6                        u3340 07AC  
                      u1660 0638                        u1580 05A8                        u3260 0149  
                      u3180 00B2                        u3421 07F5                        u3405 07E5  
                      u3341 07AB                        u1661 0637                        u1581 05A7  
                      u3085 0E9D                        u3261 0148                        u3245 012B  
                      u3181 00B1                        u3350 07B7                        u1590 05BA  
                      u1670 0CC6                        u3270 0158                        u3190 00E1  
                      u3430 0539                        u3351 07B6                        u1591 05B9  
                      u3095 0EA8                        u1671 0CC5                        u3271 0157  
                      u3191 00E0                        u3431 0538                        u2800 0E64  
                      u3360 07C2                        u1680 0CCC                        u3280 016D  
                      u2801 0E63                        u3361 07C1                        u1681 0CCB  
                      u3281 016C                        u2810 0E6B                        u3290 0174  
                      u2811 0E6A                        u3507 0F9D                        u3291 0173  
                      u2820 0E72                        u3380 07D4                        u2900 06F7  
                      u2821 0E71                        u3517 0D11                        u3381 07D3  
                      u2901 06F6                        u2830 0E79                        u3390 07DE  
                      u2831 0E78                        u3391 07DD                        u3375 07C6  
                      u3447 0540                        u2760 0E48                        u2920 070D  
                      u2840 0DD9                        u2761 0E47                        u3457 0D57  
                      u2921 070C                        u2841 0DD8                        u2770 0E4F  
                      u2771 0E4E                        u3467 0CF7                        u3395 07DA  
                      u2915 06FB                        u2780 0E56                        u2940 071E  
                      u2781 0E55                        u3477 0F52                        u2941 071D  
                      u2790 0E5D                        u2870 0DFA                        u2791 0E5C  
                      u3487 0F63                        u2935 070E                        u2871 0DF9  
                      u2855 0DE7                        u2960 0732                        u2880 06D7  
                      u3497 0F72                        u2961 0731                        u2945 071A  
                      u2881 06D6                        u2865 0DEE                        u2970 0737  
                      u2890 06E2                        u2971 0736                        u2955 0726  
                      u2891 06E1                        u2980 0FAD                        u2981 0FAC  
                      u2995 0FB3                        i1l95 06C3           ?_Lcd_Write_String 0040  
                      _main 03BE                        btemp 007E                        start 0012  
        ??_Lcd_Write_String 00A0             __end_of_Lcd_Cmd 0D1A               ?_map_adc_volt 00AA  
                     ??_isr 0033                       ?_main 0070             __end_of___awdiv 0741  
           __end_of___awmod 0800                       _ANSEL 0188             ___awdiv@divisor 00A2  
           __end_of___lwdiv 1000                       i1l103 0D81                       i1l107 0DA5  
                     i1l341 021A             __end_of___lwmod 0EB9                       i1l186 0C9C  
                     i1l380 0D67                       i1l382 0D7F                       i1l359 02F4  
                     i1l376 03BD                       i1l652 0EFC                       i1l662 0E40  
                     i1l833 0CBB             ___awdiv@counter 00A6                       _RCREG 001A  
                     _SPBRG 0099                       _PORTA 0005                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _PORTE 0009  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
                     _TXREG 0019                  i1isdigit@c 0071          i1___lwmod@dividend 007A  
           __end_of_dpowers 081A             __end_of_isdigit 0CD0                       _setup 0CD0  
                     pclath 000A            __end_ofi1___wmul 0D80                       status 0003  
       i1___wmul@multiplier 0070                       wtemp0 007E             __end_of_sprintf 0200  
            ??_map_adc_volt 0042            __end_of_Lcd_Init 0FA1            __end_of_Lcd_Port 0E7D  
           __initialization 0015                __end_of_main 0549                  i1sprintf@c 0032  
                i1sprintf@f 0020                      ??_main 00BC                      _ADRESH 001E  
          ___awdiv@dividend 00A4                      ?_setup 0070                      _ANSELH 0189  
          __end_of_adc_init 0D5B            __end_of_adc_read 0C9D                      i1l2011 0D6E  
                    i1l2021 0EBB                      i1l2013 0D75                      i1l2005 0D5B  
                    i1l2031 0ED3                      i1l2023 0EC1                      i1l2015 0D7B  
                    i1l2007 0D5D                      i1l2033 0EE4                      i1l2025 0EC4  
                    i1l2041 0EF8                      i1l2009 0D61                      i1l2035 0EEA  
                    i1l2027 0ECB                      i1l2019 0EB9                      i1l2051 0E17  
                    i1l2037 0EEB                      i1l2029 0ECF                      i1l2061 0E36  
                    i1l2053 0E1B                      i1l2045 0E07                      i1l2039 0EF2  
                    i1l2055 0E1F                      i1l2047 0E0D                      i1l2063 0E3C  
                    i1l2071 0CB2                      u200_20 0EC1                      u200_21 0EC0  
                    i1l2057 0E29                      i1l2049 0E10                      i1l2073 0CB8  
                    i1l2401 0344                      i1l3033 022D                      i1l2321 0206  
                    i1l2059 0E2F                      i1l2075 0CBA                      i1l2067 0CAB  
                    i1l2411 0364                      i1l2403 0349                      i1l3035 0296  
                    i1l2323 020C                      i1l2069 0CAC                      i1l2421 03A0  
                    i1l2405 034D                      i1l2413 0368                      i1l2341 025B  
                    i1l2333 021F                      i1l2325 0211                      i1l2415 036B  
                    i1l2407 0359                      i1l2351 02A1                      i1l2343 026E  
                    i1l2335 0232                      i1l2327 0216                      i1l2423 03A9  
                    i1l2319 0203                      i1l2273 0D80                      i1l2417 0397  
                    i1l2409 035F                      i1l2361 02BA                      i1l2353 02A9  
                    i1l2425 03B9                      i1l2345 0272                      i1l2337 0242  
                    i1l2329 021B                      i1l2275 0D85                      i1l2419 039C  
                    i1l2371 02D8                      i1l2355 02AD                      i1l2339 0246  
                    i1l2269 0C93                      i1l2277 0D8F                      u201_25 0EC5  
                    i1l2381 030B                      i1l2373 02E2                      i1l2357 02B1  
                    i1l2349 0282                      i1l2279 0D95                      i1l2391 0322  
                    i1l2383 030F                      i1l2375 02E8                      i1l2367 02BC  
                    i1l2359 02B5                      i1l2471 0652                      u202_20 0ED3  
                    u210_20 0E29                      u202_21 0ED2                      u210_21 0E28  
                    i1l2393 0328                      i1l2385 0313                      i1l2377 02EE  
                    i1l2481 0666                      i1l2473 0656                      i1l2465 0642  
                    i1l2395 032D                      i1l2387 0319                      i1l2379 02FF  
                    i1l2491 0683                      i1l2483 066C                      i1l2475 0657  
                    i1l2467 0646                      u210_25 0E25                      i1l2397 0331  
                    i1l2389 031E                      i1l2493 0689                      i1l2485 0672  
                    i1l2477 065D                      i1l2469 0651                      i1l2399 033E  
                    i1l2487 0678                      i1l2479 0663                      i1l2489 067D  
                    u203_25 0ED4                      u211_25 0E30                      u204_20 0EE4  
                    u212_20 0E3C                      u204_21 0EE3                      u212_21 0E3B  
                    u204_25 0EE0                      u213_20 0CB2                      u213_21 0CB1  
                    u205_25 0EEC                      u206_20 0EF8                      u214_20 0CB8  
                    u206_21 0EF7                      u214_21 0CB7                      u207_20 0E0D  
                    u207_21 0E0C                      u240_20 0DA5                      u240_21 0DA4  
                    u208_25 0E11                      u209_20 0E1F                      u209_21 0E1E  
                    u250_20 020C                      u250_21 020B                      u251_20 0242  
                    u251_21 0241                      u260_20 0319                      u252_20 0282  
                    u260_21 0318                      u252_21 0281                      u261_20 0328  
                    u253_20 02B1                      u261_21 0327                      u253_21 02B0  
                    u262_20 033D                      u254_20 02D7                      u270_20 0656  
                    u262_21 033C                      u254_21 02D6                      u270_21 0655  
                    u254_25 02D3                      u239_20 0D85                      u263_20 0344  
                    u255_20 02E2                      u271_20 065D                      u239_21 0D84  
                    u263_21 0343                      u255_21 02E1                      u271_21 065C  
                    u264_20 0359                      u256_20 02E8                      u272_20 0663  
                    u264_21 0358                      u256_21 02E7                      u272_21 0662  
                    u265_20 035F                      u257_20 02EE                      u273_20 0672  
                    u265_21 035E                      u257_21 02ED                      u273_21 0671  
                    u266_20 03A9                      u258_20 02FF                      u274_20 0678  
                    u266_21 03A8                      u258_21 02FE                      u274_21 0677  
                    u258_25 02FB                      u267_20 03B9                      u259_20 0313  
                    u275_20 0689                      u267_21 03B8                      u259_21 0312  
                    u275_21 0688                      u196_20 0D61                      u196_21 0D60  
                    u269_20 0646                      u269_21 0645                      u197_25 0D68  
                    u198_25 0D6F                      u199_20 0D7B                      u199_21 0D7A  
                 ??_Lcd_Cmd 003E               i1sprintf@flag 002E               i1sprintf@prec 002B  
 adc_change_channel@channel 003D                      _cadena 0D80                ?_UART_config 003D  
                    ___wmul 0DD0                   ??___awdiv 0041                   ??___awmod 00AE  
                 ??___lwdiv 0041                   ??___lwmod 00A7            ___awdiv@quotient 00A8  
           ___awmod@divisor 00AA                      _select 0046             ___awmod@counter 00AF  
         __end_ofi1___lwdiv 0EFD           __end_ofi1___lwmod 0E41                   ??_isdigit 003D  
                    saved_w 007E                   ??_sprintf 00B0             Lcd_Set_Cursor@a 00A0  
           Lcd_Set_Cursor@b 0041           __end_ofi1_isdigit 0CBC     __end_of__initialization 001E  
         __end_ofi1_sprintf 03BE           __end_of_Lcd_Clear 0CAA              __pcstackCOMMON 0070  
             __end_of_setup 0CE6                   ?i1___wmul 0070              _Lcd_Set_Cursor 0DA6  
               i1sprintf@ap 002A                 i1sprintf@sp 0031        __end_of_map_adc_volt 0F46  
                 ?_Lcd_Init 0070                   ?_Lcd_Port 0070                sprintf@width 00B8  
                   ??_setup 003D                  __pbssBANK0 0042                  __pmaintext 03BE  
                   ?_cadena 0070                     ?___wmul 003D                  __pintentry 0004  
    __end_of_Lcd_Set_Cursor 0DD0                   ?_adc_init 003F                   ?_adc_read 0070  
                ??i1___wmul 0074                  ??_Lcd_Init 00A0                  ??_Lcd_Port 003D  
                __stringtab 0800              i1sprintf@width 002F              _Lcd_Write_Char 0CE6  
                   _Lcd_Cmd 0CFE                cadena@cursor 0070                     ___awdiv 06D0  
                   ___awmod 07A5                     ___lwdiv 0FA1                     _adc_var 0048  
                   ___lwmod 0E7D                     _bandera 004A             ?_Lcd_Set_Cursor 0041  
                ??_adc_init 0041                  ??_adc_read 0072                     __ptext1 0022  
                   __ptext2 0CBC                     __ptext3 0E7D                     __ptext4 0FA1  
                   __ptext5 0CD0                     __ptext6 0EFD                     __ptext7 0DD0  
                   __ptext8 06D0                     __ptext9 0D38                     _display 004F  
                   _counter 0042                     _dpowers 0810           i1___lwdiv@divisor 0070  
                   _isdigit 0CBC           i1___lwdiv@counter 0077            ___awmod@dividend 00AC  
         map_adc_volt@value 00AA                     _sprintf 0022                     clrloop0 0C8C  
    __end_of_Lcd_Write_Char 0CFE        end_of_initialization 001E                   _RCSTAbits 0018  
                 Lcd_Port@a 003D       i1___wmul@multiplicand 0072                   _PORTCbits 0007  
                 _PORTDbits 0008        map_adc_volt@inputmax 00AE        map_adc_volt@inputmin 00AC  
                 i1___lwdiv 0EB9                   i1___lwmod 0E07             ?_Lcd_Write_Char 0070  
         Lcd_Write_String@a 0040           Lcd_Write_String@i 00A3                   _TXSTAbits 0098  
                 i1_isdigit 0CAA                _map_adc_volt 0EFD                   i1_sprintf 0200  
                 _Lcd_Clear 0C9D              __end_of_cadena 0DA6              __end_of___wmul 0E07  
          _Lcd_Write_String 0741           i1___lwmod@divisor 0078           i1___lwmod@counter 007D  
__end_of_adc_change_channel 0642         start_initialization 0015                 __end_of_isr 06D0  
                ?i1___lwdiv 0070                  ?i1___lwmod 0078                  ?i1_isdigit 0070  
       UART_config@baudrate 003D                i1sprintf@val 002C                  ?i1_sprintf 0020  
                ?_Lcd_Clear 0070                    ??_cadena 0072                    ??___wmul 0041  
           adc_init@channel 003F             Lcd_Write_Char@a 003F                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00A0                _isdigit$1045 003D  
                  ?_Lcd_Cmd 0070                 sprintf@flag 00B7                 sprintf@prec 00B4  
          ___lwdiv@dividend 003F            ??_Lcd_Set_Cursor 0042                    ?___awdiv 00A2  
                  ?___awmod 00AA                    ?___lwdiv 003D                    ?___lwmod 00A3  
                 __pstrings 0800                    ?_isdigit 0070            ___lwdiv@quotient 00A1  
               ??i1___lwdiv 0074                 ??i1___lwmod 007C                    ?_sprintf 00A9  
            i1_isdigit$1045 0070           interrupt_function 0004              ___wmul@product 00A0  
               ??i1_isdigit 0070                   clear_ram0 0C8B                    _PIE1bits 008C  
                  Lcd_Cmd@a 0040                    _PIR1bits 000C                 ??i1_sprintf 0027  
               ??_Lcd_Clear 0041               ??_UART_config 003F                  _ADCON0bits 001F  
               __stringbase 080F                  _ADCON1bits 009F           ___wmul@multiplier 003D  
                  i1___wmul 0D5B            ??_Lcd_Write_Char 003E                    _Lcd_Init 0F46  
                  _Lcd_Port 0E41    __end_of_Lcd_Write_String 07A5          __end_of__stringtab 0810  
                  _adc_init 0D38                    _adc_read 0C93         __end_of_UART_config 0D38  
                sprintf@val 00B5                    _dec_volt 004D                    _cen_volt 004C  
           ___lwdiv@divisor 003D             ___lwdiv@counter 00A0                    __ptext10 0549  
                  __ptext11 07A5                    __ptext20 0642                    __ptext12 0D1A  
                  __ptext21 0200                    __ptext13 0741                    __ptext22 0CAA  
                  __ptext14 0CE6                    __ptext23 0D5B                    __ptext15 0DA6  
                  __ptext24 0E07                    __ptext16 0F46                    __ptext25 0EB9  
                  __ptext17 0C9D                    __ptext26 0D80                    __ptext18 0CFE  
                  __ptext27 0C93                    __ptext19 0E41          i1___lwdiv@dividend 0072  
        _adc_change_channel 0549         ?_adc_change_channel 003D          map_adc_volt@outmax 00B2  
        map_adc_volt@outmin 00B0                    _uni_volt 004E                    _voltage1 0044  
        i1___lwdiv@quotient 0075                  _INTCONbits 000B        ??_adc_change_channel 003F  
                  isdigit@c 003E                    intlevel1 0000                   sprintf@ap 00B3  
                 sprintf@sp 00BA            ___lwmod@dividend 00A5             _display_counter 0052  
                 stringcode 080A                  _OSCCONbits 008F                 _UART_config 0D1A  
        Lcd_Set_Cursor@temp 00A1                    sprintf@c 00BB                    sprintf@f 00A9  
           ___lwmod@divisor 00A3             ___lwmod@counter 00A8                    stringdir 080A  
                  stringtab 0800  
