

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jul 26 20:45:04 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    33                           	dabs	1,0x7E,2
    34     0000                     
    35                           ; Version 2.40
    36                           ; Generated 17/11/2021 GMT
    37                           ; 
    38                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     000E                     	;# 
    86     000F                     	;# 
    87     0010                     	;# 
    88     0011                     	;# 
    89     0012                     	;# 
    90     0013                     	;# 
    91     0014                     	;# 
    92     0015                     	;# 
    93     0015                     	;# 
    94     0016                     	;# 
    95     0017                     	;# 
    96     0018                     	;# 
    97     0019                     	;# 
    98     001A                     	;# 
    99     001B                     	;# 
   100     001B                     	;# 
   101     001C                     	;# 
   102     001D                     	;# 
   103     001E                     	;# 
   104     001F                     	;# 
   105     0081                     	;# 
   106     0085                     	;# 
   107     0086                     	;# 
   108     0087                     	;# 
   109     0088                     	;# 
   110     0089                     	;# 
   111     008C                     	;# 
   112     008D                     	;# 
   113     008E                     	;# 
   114     008F                     	;# 
   115     0090                     	;# 
   116     0091                     	;# 
   117     0092                     	;# 
   118     0093                     	;# 
   119     0093                     	;# 
   120     0093                     	;# 
   121     0094                     	;# 
   122     0095                     	;# 
   123     0096                     	;# 
   124     0097                     	;# 
   125     0098                     	;# 
   126     0099                     	;# 
   127     009A                     	;# 
   128     009B                     	;# 
   129     009C                     	;# 
   130     009D                     	;# 
   131     009E                     	;# 
   132     009F                     	;# 
   133     0105                     	;# 
   134     0107                     	;# 
   135     0108                     	;# 
   136     0109                     	;# 
   137     010C                     	;# 
   138     010C                     	;# 
   139     010D                     	;# 
   140     010E                     	;# 
   141     010F                     	;# 
   142     0185                     	;# 
   143     0187                     	;# 
   144     0188                     	;# 
   145     0189                     	;# 
   146     018C                     	;# 
   147     018D                     	;# 
   148     0000                     	;# 
   149     0001                     	;# 
   150     0002                     	;# 
   151     0003                     	;# 
   152     0004                     	;# 
   153     0005                     	;# 
   154     0006                     	;# 
   155     0007                     	;# 
   156     0008                     	;# 
   157     0009                     	;# 
   158     000A                     	;# 
   159     000B                     	;# 
   160     000C                     	;# 
   161     000D                     	;# 
   162     000E                     	;# 
   163     000E                     	;# 
   164     000F                     	;# 
   165     0010                     	;# 
   166     0011                     	;# 
   167     0012                     	;# 
   168     0013                     	;# 
   169     0014                     	;# 
   170     0015                     	;# 
   171     0015                     	;# 
   172     0016                     	;# 
   173     0017                     	;# 
   174     0018                     	;# 
   175     0019                     	;# 
   176     001A                     	;# 
   177     001B                     	;# 
   178     001B                     	;# 
   179     001C                     	;# 
   180     001D                     	;# 
   181     001E                     	;# 
   182     001F                     	;# 
   183     0081                     	;# 
   184     0085                     	;# 
   185     0086                     	;# 
   186     0087                     	;# 
   187     0088                     	;# 
   188     0089                     	;# 
   189     008C                     	;# 
   190     008D                     	;# 
   191     008E                     	;# 
   192     008F                     	;# 
   193     0090                     	;# 
   194     0091                     	;# 
   195     0092                     	;# 
   196     0093                     	;# 
   197     0093                     	;# 
   198     0093                     	;# 
   199     0094                     	;# 
   200     0095                     	;# 
   201     0096                     	;# 
   202     0097                     	;# 
   203     0098                     	;# 
   204     0099                     	;# 
   205     009A                     	;# 
   206     009B                     	;# 
   207     009C                     	;# 
   208     009D                     	;# 
   209     009E                     	;# 
   210     009F                     	;# 
   211     0105                     	;# 
   212     0107                     	;# 
   213     0108                     	;# 
   214     0109                     	;# 
   215     010C                     	;# 
   216     010C                     	;# 
   217     010D                     	;# 
   218     010E                     	;# 
   219     010F                     	;# 
   220     0185                     	;# 
   221     0187                     	;# 
   222     0188                     	;# 
   223     0189                     	;# 
   224     018C                     	;# 
   225     018D                     	;# 
   226     0000                     	;# 
   227     0001                     	;# 
   228     0002                     	;# 
   229     0003                     	;# 
   230     0004                     	;# 
   231     0005                     	;# 
   232     0006                     	;# 
   233     0007                     	;# 
   234     0008                     	;# 
   235     0009                     	;# 
   236     000A                     	;# 
   237     000B                     	;# 
   238     000C                     	;# 
   239     000D                     	;# 
   240     000E                     	;# 
   241     000E                     	;# 
   242     000F                     	;# 
   243     0010                     	;# 
   244     0011                     	;# 
   245     0012                     	;# 
   246     0013                     	;# 
   247     0014                     	;# 
   248     0015                     	;# 
   249     0015                     	;# 
   250     0016                     	;# 
   251     0017                     	;# 
   252     0018                     	;# 
   253     0019                     	;# 
   254     001A                     	;# 
   255     001B                     	;# 
   256     001B                     	;# 
   257     001C                     	;# 
   258     001D                     	;# 
   259     001E                     	;# 
   260     001F                     	;# 
   261     0081                     	;# 
   262     0085                     	;# 
   263     0086                     	;# 
   264     0087                     	;# 
   265     0088                     	;# 
   266     0089                     	;# 
   267     008C                     	;# 
   268     008D                     	;# 
   269     008E                     	;# 
   270     008F                     	;# 
   271     0090                     	;# 
   272     0091                     	;# 
   273     0092                     	;# 
   274     0093                     	;# 
   275     0093                     	;# 
   276     0093                     	;# 
   277     0094                     	;# 
   278     0095                     	;# 
   279     0096                     	;# 
   280     0097                     	;# 
   281     0098                     	;# 
   282     0099                     	;# 
   283     009A                     	;# 
   284     009B                     	;# 
   285     009C                     	;# 
   286     009D                     	;# 
   287     009E                     	;# 
   288     009F                     	;# 
   289     0105                     	;# 
   290     0107                     	;# 
   291     0108                     	;# 
   292     0109                     	;# 
   293     010C                     	;# 
   294     010C                     	;# 
   295     010D                     	;# 
   296     010E                     	;# 
   297     010F                     	;# 
   298     0185                     	;# 
   299     0187                     	;# 
   300     0188                     	;# 
   301     0189                     	;# 
   302     018C                     	;# 
   303     018D                     	;# 
   304     0000                     	;# 
   305     0001                     	;# 
   306     0002                     	;# 
   307     0003                     	;# 
   308     0004                     	;# 
   309     0005                     	;# 
   310     0006                     	;# 
   311     0007                     	;# 
   312     0008                     	;# 
   313     0009                     	;# 
   314     000A                     	;# 
   315     000B                     	;# 
   316     000C                     	;# 
   317     000D                     	;# 
   318     000E                     	;# 
   319     000E                     	;# 
   320     000F                     	;# 
   321     0010                     	;# 
   322     0011                     	;# 
   323     0012                     	;# 
   324     0013                     	;# 
   325     0014                     	;# 
   326     0015                     	;# 
   327     0015                     	;# 
   328     0016                     	;# 
   329     0017                     	;# 
   330     0018                     	;# 
   331     0019                     	;# 
   332     001A                     	;# 
   333     001B                     	;# 
   334     001B                     	;# 
   335     001C                     	;# 
   336     001D                     	;# 
   337     001E                     	;# 
   338     001F                     	;# 
   339     0081                     	;# 
   340     0085                     	;# 
   341     0086                     	;# 
   342     0087                     	;# 
   343     0088                     	;# 
   344     0089                     	;# 
   345     008C                     	;# 
   346     008D                     	;# 
   347     008E                     	;# 
   348     008F                     	;# 
   349     0090                     	;# 
   350     0091                     	;# 
   351     0092                     	;# 
   352     0093                     	;# 
   353     0093                     	;# 
   354     0093                     	;# 
   355     0094                     	;# 
   356     0095                     	;# 
   357     0096                     	;# 
   358     0097                     	;# 
   359     0098                     	;# 
   360     0099                     	;# 
   361     009A                     	;# 
   362     009B                     	;# 
   363     009C                     	;# 
   364     009D                     	;# 
   365     009E                     	;# 
   366     009F                     	;# 
   367     0105                     	;# 
   368     0107                     	;# 
   369     0108                     	;# 
   370     0109                     	;# 
   371     010C                     	;# 
   372     010C                     	;# 
   373     010D                     	;# 
   374     010E                     	;# 
   375     010F                     	;# 
   376     0185                     	;# 
   377     0187                     	;# 
   378     0188                     	;# 
   379     0189                     	;# 
   380     018C                     	;# 
   381     018D                     	;# 
   382                           
   383                           	psect	strings
   384     0556                     __pstrings:
   385     0556                     stringtab:
   386     0556                     __stringtab:
   387                           
   388                           ;	String table - string pointers are 1 byte each
   389     0556  1BFF               	btfsc	btemp+1,7
   390     0557  2D60               	ljmp	stringcode
   391     0558  1383               	bcf	3,7
   392     0559  187F               	btfsc	btemp+1,0
   393     055A  1783               	bsf	3,7
   394     055B  0800               	movf	0,w
   395     055C  0A84               	incf	4,f
   396     055D  1903               	skipnz
   397     055E  0AFF               	incf	btemp+1,f
   398     055F  0008               	return
   399     0560                     stringcode:
   400     0560                     stringdir:
   401     0560  3005               	movlw	high stringdir
   402     0561  008A               	movwf	10
   403     0562  0804               	movf	4,w
   404     0563  0A84               	incf	4,f
   405     0564  0782               	addwf	2,f
   406     0565                     __stringbase:
   407     0565  3400               	retlw	0
   408     0566                     __end_of__stringtab:
   409     0566                     _dpowers:
   410     0566  3401               	retlw	1
   411     0567  3400               	retlw	0
   412     0568  340A               	retlw	10
   413     0569  3400               	retlw	0
   414     056A  3464               	retlw	100
   415     056B  3400               	retlw	0
   416     056C  34E8               	retlw	232
   417     056D  3403               	retlw	3
   418     056E  3410               	retlw	16
   419     056F  3427               	retlw	39
   420     0570                     __end_of_dpowers:
   421     001E                     _ADRESH	set	30
   422     0007                     _PORTCbits	set	7
   423     0008                     _PORTDbits	set	8
   424     000B                     _INTCONbits	set	11
   425     0009                     _PORTE	set	9
   426     0008                     _PORTD	set	8
   427     0007                     _PORTC	set	7
   428     0005                     _PORTA	set	5
   429     000C                     _PIR1bits	set	12
   430     001F                     _ADCON0bits	set	31
   431     0006                     _PORTB	set	6
   432     009F                     _ADCON1bits	set	159
   433     008C                     _PIE1bits	set	140
   434     008F                     _OSCCONbits	set	143
   435     0088                     _TRISD	set	136
   436     0087                     _TRISC	set	135
   437     0086                     _TRISB	set	134
   438     0189                     _ANSELH	set	393
   439     0188                     _ANSEL	set	392
   440     0570                     STR_2:
   441     0570  3425               	retlw	37	;'%'
   442     0571  3464               	retlw	100	;'d'
   443     0572  342E               	retlw	46	;'.'
   444     0573  3425               	retlw	37	;'%'
   445     0574  3464               	retlw	100	;'d'
   446     0575  3425               	retlw	37	;'%'
   447     0576  3464               	retlw	100	;'d'
   448     0577  3456               	retlw	86	;'V'
   449     0578  3400               	retlw	0
   450     0579                     STR_1:
   451     0579  3450               	retlw	80	;'P'
   452     057A  346F               	retlw	111	;'o'
   453     057B  3474               	retlw	116	;'t'
   454     057C  3431               	retlw	49	;'1'
   455     057D  343A               	retlw	58	;':'
   456     057E  3400               	retlw	0
   457                           
   458                           	psect	cinit
   459     000F                     start_initialization:	
   460                           ; #config settings
   461                           
   462     000F                     __initialization:
   463                           
   464                           ; Clear objects allocated to COMMON
   465     000F  01F6               	clrf	__pbssCOMMON& (0+127)
   466     0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   467     0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   468     0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   469                           
   470                           ; Clear objects allocated to BANK0
   471     0013  1283               	bcf	3,5	;RP0=0, select bank0
   472     0014  1303               	bcf	3,6	;RP1=0, select bank0
   473     0015  01C5               	clrf	__pbssBANK0& (0+127)
   474     0016  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   475     0017  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   476     0018  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   477     0019  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   478     001A  01CA               	clrf	(__pbssBANK0+5)& (0+127)
   479     001B  01CB               	clrf	(__pbssBANK0+6)& (0+127)
   480     001C  01CC               	clrf	(__pbssBANK0+7)& (0+127)
   481     001D  01CD               	clrf	(__pbssBANK0+8)& (0+127)
   482     001E  01CE               	clrf	(__pbssBANK0+9)& (0+127)
   483     001F                     end_of_initialization:	
   484                           ;End of C runtime variable initialization code
   485                           
   486     001F                     __end_of__initialization:
   487     001F  0183               	clrf	3
   488     0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   489                           
   490                           	psect	bssCOMMON
   491     0076                     __pbssCOMMON:
   492     0076                     _select:
   493     0076                     	ds	2
   494     0078                     _bandera:
   495     0078                     	ds	2
   496                           
   497                           	psect	bssBANK0
   498     0045                     __pbssBANK0:
   499     0045                     _voltage1:
   500     0045                     	ds	2
   501     0047                     _adc_var:
   502     0047                     	ds	2
   503     0049                     _cen_volt:
   504     0049                     	ds	1
   505     004A                     _dec_volt:
   506     004A                     	ds	1
   507     004B                     _uni_volt:
   508     004B                     	ds	1
   509     004C                     _display:
   510     004C                     	ds	3
   511                           
   512                           	psect	cstackCOMMON
   513     0070                     __pcstackCOMMON:
   514     0070                     ?_setup:
   515     0070                     ?_Lcd_Init:	
   516                           ; 1 bytes @ 0x0
   517                           
   518     0070                     ?_Lcd_Clear:	
   519                           ; 1 bytes @ 0x0
   520                           
   521     0070                     ?_main:	
   522                           ; 1 bytes @ 0x0
   523                           
   524     0070                     ?_isr:	
   525                           ; 1 bytes @ 0x0
   526                           
   527     0070                     ?_Lcd_Port:	
   528                           ; 1 bytes @ 0x0
   529                           
   530     0070                     ?_Lcd_Cmd:	
   531                           ; 1 bytes @ 0x0
   532                           
   533     0070                     ?_Lcd_Write_Char:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0070                     ?_adc_read:	
   537                           ; 1 bytes @ 0x0
   538                           
   539                           
   540                           ; 2 bytes @ 0x0
   541     0070                     	ds	2
   542     0072                     ??_adc_read:
   543                           
   544                           ; 1 bytes @ 0x2
   545     0072                     	ds	2
   546     0074                     ??_isr:
   547                           
   548                           ; 1 bytes @ 0x4
   549     0074                     	ds	2
   550                           
   551                           	psect	cstackBANK0
   552     0020                     __pcstackBANK0:
   553     0020                     ??_setup:
   554     0020                     ?_adc_change_channel:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     0020                     ??_Lcd_Port:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     0020                     ?___wmul:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0020                     ?___lwdiv:	
   564                           ; 2 bytes @ 0x0
   565                           
   566     0020                     Lcd_Port@a:	
   567                           ; 2 bytes @ 0x0
   568                           
   569     0020                     adc_change_channel@channel:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0020                     ___wmul@multiplier:	
   573                           ; 2 bytes @ 0x0
   574                           
   575     0020                     ___lwdiv@divisor:	
   576                           ; 2 bytes @ 0x0
   577                           
   578                           
   579                           ; 2 bytes @ 0x0
   580     0020                     	ds	1
   581     0021                     ??_Lcd_Cmd:
   582     0021                     ??_Lcd_Write_Char:	
   583                           ; 1 bytes @ 0x1
   584                           
   585                           
   586                           ; 1 bytes @ 0x1
   587     0021                     	ds	1
   588     0022                     ?_adc_init:
   589     0022                     ??_adc_change_channel:	
   590                           ; 1 bytes @ 0x2
   591                           
   592     0022                     Lcd_Write_Char@a:	
   593                           ; 1 bytes @ 0x2
   594                           
   595     0022                     adc_init@channel:	
   596                           ; 1 bytes @ 0x2
   597                           
   598     0022                     ___wmul@multiplicand:	
   599                           ; 2 bytes @ 0x2
   600                           
   601     0022                     ___lwdiv@dividend:	
   602                           ; 2 bytes @ 0x2
   603                           
   604                           
   605                           ; 2 bytes @ 0x2
   606     0022                     	ds	1
   607     0023                     ?_Lcd_Write_String:
   608     0023                     Lcd_Cmd@a:	
   609                           ; 1 bytes @ 0x3
   610                           
   611     0023                     Lcd_Write_String@a:	
   612                           ; 1 bytes @ 0x3
   613                           
   614                           
   615                           ; 2 bytes @ 0x3
   616     0023                     	ds	1
   617     0024                     ??_adc_init:
   618     0024                     ??_Lcd_Init:	
   619                           ; 1 bytes @ 0x4
   620                           
   621     0024                     ??_Lcd_Clear:	
   622                           ; 1 bytes @ 0x4
   623                           
   624     0024                     ?_Lcd_Set_Cursor:	
   625                           ; 1 bytes @ 0x4
   626                           
   627     0024                     ??___wmul:	
   628                           ; 1 bytes @ 0x4
   629                           
   630     0024                     ??___lwdiv:	
   631                           ; 1 bytes @ 0x4
   632                           
   633     0024                     Lcd_Set_Cursor@b:	
   634                           ; 1 bytes @ 0x4
   635                           
   636     0024                     ___wmul@product:	
   637                           ; 1 bytes @ 0x4
   638                           
   639                           
   640                           ; 2 bytes @ 0x4
   641     0024                     	ds	1
   642     0025                     ??_Lcd_Set_Cursor:
   643     0025                     ??_Lcd_Write_String:	
   644                           ; 1 bytes @ 0x5
   645                           
   646     0025                     Lcd_Set_Cursor@a:	
   647                           ; 1 bytes @ 0x5
   648                           
   649     0025                     ___lwdiv@counter:	
   650                           ; 1 bytes @ 0x5
   651                           
   652                           
   653                           ; 1 bytes @ 0x5
   654     0025                     	ds	1
   655     0026                     ?___awdiv:
   656     0026                     Lcd_Set_Cursor@temp:	
   657                           ; 2 bytes @ 0x6
   658                           
   659     0026                     ___awdiv@divisor:	
   660                           ; 1 bytes @ 0x6
   661                           
   662     0026                     ___lwdiv@quotient:	
   663                           ; 2 bytes @ 0x6
   664                           
   665                           
   666                           ; 2 bytes @ 0x6
   667     0026                     	ds	2
   668     0028                     ?___lwmod:
   669     0028                     Lcd_Write_String@i:	
   670                           ; 2 bytes @ 0x8
   671                           
   672     0028                     ___awdiv@dividend:	
   673                           ; 2 bytes @ 0x8
   674                           
   675     0028                     ___lwmod@divisor:	
   676                           ; 2 bytes @ 0x8
   677                           
   678                           
   679                           ; 2 bytes @ 0x8
   680     0028                     	ds	2
   681     002A                     ??___awdiv:
   682     002A                     ___lwmod@dividend:	
   683                           ; 1 bytes @ 0xA
   684                           
   685                           
   686                           ; 2 bytes @ 0xA
   687     002A                     	ds	1
   688     002B                     ___awdiv@counter:
   689                           
   690                           ; 1 bytes @ 0xB
   691     002B                     	ds	1
   692     002C                     ??___lwmod:
   693     002C                     ___awdiv@sign:	
   694                           ; 1 bytes @ 0xC
   695                           
   696                           
   697                           ; 1 bytes @ 0xC
   698     002C                     	ds	1
   699     002D                     ___lwmod@counter:
   700     002D                     ___awdiv@quotient:	
   701                           ; 1 bytes @ 0xD
   702                           
   703                           
   704                           ; 2 bytes @ 0xD
   705     002D                     	ds	1
   706     002E                     ?_sprintf:
   707     002E                     sprintf@f:	
   708                           ; 2 bytes @ 0xE
   709                           
   710                           
   711                           ; 1 bytes @ 0xE
   712     002E                     	ds	1
   713     002F                     ?_map_adc_volt:
   714     002F                     ?___awmod:	
   715                           ; 2 bytes @ 0xF
   716                           
   717     002F                     map_adc_volt@value:	
   718                           ; 2 bytes @ 0xF
   719                           
   720     002F                     ___awmod@divisor:	
   721                           ; 2 bytes @ 0xF
   722                           
   723                           
   724                           ; 2 bytes @ 0xF
   725     002F                     	ds	2
   726     0031                     map_adc_volt@inputmin:
   727     0031                     ___awmod@dividend:	
   728                           ; 2 bytes @ 0x11
   729                           
   730                           
   731                           ; 2 bytes @ 0x11
   732     0031                     	ds	2
   733     0033                     ??___awmod:
   734     0033                     map_adc_volt@inputmax:	
   735                           ; 1 bytes @ 0x13
   736                           
   737                           
   738                           ; 2 bytes @ 0x13
   739     0033                     	ds	1
   740     0034                     ___awmod@counter:
   741                           
   742                           ; 1 bytes @ 0x14
   743     0034                     	ds	1
   744     0035                     ??_sprintf:
   745     0035                     ___awmod@sign:	
   746                           ; 1 bytes @ 0x15
   747                           
   748     0035                     map_adc_volt@outmin:	
   749                           ; 1 bytes @ 0x15
   750                           
   751                           
   752                           ; 2 bytes @ 0x15
   753     0035                     	ds	2
   754     0037                     map_adc_volt@outmax:
   755                           
   756                           ; 2 bytes @ 0x17
   757     0037                     	ds	1
   758     0038                     sprintf@ap:
   759                           
   760                           ; 1 bytes @ 0x18
   761     0038                     	ds	1
   762     0039                     ??_map_adc_volt:
   763     0039                     sprintf@flag:	
   764                           ; 1 bytes @ 0x19
   765                           
   766                           
   767                           ; 1 bytes @ 0x19
   768     0039                     	ds	1
   769     003A                     sprintf@prec:
   770                           
   771                           ; 1 bytes @ 0x1A
   772     003A                     	ds	1
   773     003B                     sprintf@val:
   774                           
   775                           ; 2 bytes @ 0x1B
   776     003B                     	ds	2
   777     003D                     sprintf@sp:
   778                           
   779                           ; 1 bytes @ 0x1D
   780     003D                     	ds	1
   781     003E                     sprintf@c:
   782                           
   783                           ; 1 bytes @ 0x1E
   784     003E                     	ds	1
   785     003F                     ??_main:
   786                           
   787                           ; 1 bytes @ 0x1F
   788     003F                     	ds	6
   789                           
   790                           	psect	maintext
   791     0023                     __pmaintext:	
   792 ;;
   793 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   794 ;;
   795 ;; *************** function _main *****************
   796 ;; Defined at:
   797 ;;		line 54 in file "main.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;		None
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : B00/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   811 ;;      Params:         0       0       0       0       0
   812 ;;      Locals:         0       0       0       0       0
   813 ;;      Temps:          0       6       0       0       0
   814 ;;      Totals:         0       6       0       0       0
   815 ;;Total ram usage:        6 bytes
   816 ;; Hardware stack levels required when called: 5
   817 ;; This function calls:
   818 ;;		_Lcd_Clear
   819 ;;		_Lcd_Init
   820 ;;		_Lcd_Set_Cursor
   821 ;;		_Lcd_Write_String
   822 ;;		___awdiv
   823 ;;		___awmod
   824 ;;		___wmul
   825 ;;		_adc_init
   826 ;;		_map_adc_volt
   827 ;;		_setup
   828 ;;		_sprintf
   829 ;; This function is called by:
   830 ;;		Startup code after reset
   831 ;; This function uses a non-reentrant model
   832 ;;
   833                           
   834     0023                     _main:	
   835                           ;psect for function _main
   836                           
   837     0023                     l2060:	
   838                           ;incstack = 0
   839                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   840                           
   841                           
   842                           ;main.c: 55:     setup();
   843     0023  120A  118A  2638  120A  118A  	fcall	_setup
   844                           
   845                           ;main.c: 56:     adc_init(0);
   846     0028  3000               	movlw	0
   847     0029  1283               	bcf	3,5	;RP0=0, select bank0
   848     002A  1303               	bcf	3,6	;RP1=0, select bank0
   849     002B  00A2               	movwf	adc_init@channel
   850     002C  00A3               	movwf	adc_init@channel+1
   851     002D  120A  118A  25A6  120A  118A  	fcall	_adc_init
   852                           
   853                           ;main.c: 59:     Lcd_Init();
   854     0032  120A  118A  23C2  120A  118A  	fcall	_Lcd_Init
   855                           
   856                           ;main.c: 60:     Lcd_Clear();
   857     0037  120A  118A  264E  120A  118A  	fcall	_Lcd_Clear
   858                           
   859                           ;main.c: 61:     Lcd_Set_Cursor(1,1);
   860     003C  1283               	bcf	3,5	;RP0=0, select bank0
   861     003D  1303               	bcf	3,6	;RP1=0, select bank0
   862     003E  01A4               	clrf	Lcd_Set_Cursor@b
   863     003F  0AA4               	incf	Lcd_Set_Cursor@b,f
   864     0040  3001               	movlw	1
   865     0041  120A  118A  25C9  120A  118A  	fcall	_Lcd_Set_Cursor
   866     0046                     l2062:
   867                           
   868                           ;main.c: 62:     Lcd_Write_String("Pot1:");
   869     0046  3014               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   870     0047  1283               	bcf	3,5	;RP0=0, select bank0
   871     0048  1303               	bcf	3,6	;RP1=0, select bank0
   872     0049  00A3               	movwf	Lcd_Write_String@a
   873     004A  3080               	movlw	128
   874     004B  00A4               	movwf	Lcd_Write_String@a+1
   875     004C  120A  118A  2463  120A  118A  	fcall	_Lcd_Write_String
   876     0051                     l2064:
   877                           
   878                           ;main.c: 66:         PORTB = 0xFF;
   879     0051  30FF               	movlw	255
   880     0052  1283               	bcf	3,5	;RP0=0, select bank0
   881     0053  1303               	bcf	3,6	;RP1=0, select bank0
   882     0054  0086               	movwf	6	;volatile
   883     0055                     l2066:
   884                           
   885                           ;main.c: 68:         voltage1 = map_adc_volt(adc_var, 0, 255, 0, 100);
   886     0055  0848               	movf	_adc_var+1,w
   887     0056  00B0               	movwf	map_adc_volt@value+1
   888     0057  0847               	movf	_adc_var,w
   889     0058  00AF               	movwf	map_adc_volt@value
   890     0059  3000               	movlw	0
   891     005A  00B1               	movwf	map_adc_volt@inputmin
   892     005B  00B2               	movwf	map_adc_volt@inputmin+1
   893     005C  30FF               	movlw	255
   894     005D  00B3               	movwf	map_adc_volt@inputmax
   895     005E  3000               	movlw	0
   896     005F  00B4               	movwf	map_adc_volt@inputmax+1
   897     0060  3000               	movlw	0
   898     0061  00B5               	movwf	map_adc_volt@outmin
   899     0062  00B6               	movwf	map_adc_volt@outmin+1
   900     0063  3064               	movlw	100
   901     0064  00B7               	movwf	map_adc_volt@outmax
   902     0065  3000               	movlw	0
   903     0066  00B8               	movwf	map_adc_volt@outmax+1
   904     0067  120A  118A  2521  120A  118A  	fcall	_map_adc_volt
   905     006C  1283               	bcf	3,5	;RP0=0, select bank0
   906     006D  1303               	bcf	3,6	;RP1=0, select bank0
   907     006E  0830               	movf	?_map_adc_volt+1,w
   908     006F  00C6               	movwf	_voltage1+1
   909     0070  082F               	movf	?_map_adc_volt,w
   910     0071  00C5               	movwf	_voltage1
   911     0072                     l2068:
   912                           
   913                           ;main.c: 69:         uni_volt = (voltage1*5) / 100;
   914     0072  3064               	movlw	100
   915     0073  00A6               	movwf	___awdiv@divisor
   916     0074  3000               	movlw	0
   917     0075  00A7               	movwf	___awdiv@divisor+1
   918     0076  0846               	movf	_voltage1+1,w
   919     0077  00A1               	movwf	___wmul@multiplier+1
   920     0078  0845               	movf	_voltage1,w
   921     0079  00A0               	movwf	___wmul@multiplier
   922     007A  3005               	movlw	5
   923     007B  00A2               	movwf	___wmul@multiplicand
   924     007C  3000               	movlw	0
   925     007D  00A3               	movwf	___wmul@multiplicand+1
   926     007E  120A  118A  257F  120A  118A  	fcall	___wmul
   927     0083  1283               	bcf	3,5	;RP0=0, select bank0
   928     0084  1303               	bcf	3,6	;RP1=0, select bank0
   929     0085  0821               	movf	?___wmul+1,w
   930     0086  00A9               	movwf	___awdiv@dividend+1
   931     0087  0820               	movf	?___wmul,w
   932     0088  00A8               	movwf	___awdiv@dividend
   933     0089  120A  118A  22FE  120A  118A  	fcall	___awdiv
   934     008E  1283               	bcf	3,5	;RP0=0, select bank0
   935     008F  1303               	bcf	3,6	;RP1=0, select bank0
   936     0090  0826               	movf	?___awdiv,w
   937     0091  00CB               	movwf	_uni_volt
   938     0092                     l2070:
   939                           
   940                           ;main.c: 70:         dec_volt = (voltage1*5)/10 % 10;
   941     0092  300A               	movlw	10
   942     0093  00AF               	movwf	___awmod@divisor
   943     0094  3000               	movlw	0
   944     0095  00B0               	movwf	___awmod@divisor+1
   945     0096  300A               	movlw	10
   946     0097  00A6               	movwf	___awdiv@divisor
   947     0098  3000               	movlw	0
   948     0099  00A7               	movwf	___awdiv@divisor+1
   949     009A  0846               	movf	_voltage1+1,w
   950     009B  00A1               	movwf	___wmul@multiplier+1
   951     009C  0845               	movf	_voltage1,w
   952     009D  00A0               	movwf	___wmul@multiplier
   953     009E  3005               	movlw	5
   954     009F  00A2               	movwf	___wmul@multiplicand
   955     00A0  3000               	movlw	0
   956     00A1  00A3               	movwf	___wmul@multiplicand+1
   957     00A2  120A  118A  257F  120A  118A  	fcall	___wmul
   958     00A7  1283               	bcf	3,5	;RP0=0, select bank0
   959     00A8  1303               	bcf	3,6	;RP1=0, select bank0
   960     00A9  0821               	movf	?___wmul+1,w
   961     00AA  00A9               	movwf	___awdiv@dividend+1
   962     00AB  0820               	movf	?___wmul,w
   963     00AC  00A8               	movwf	___awdiv@dividend
   964     00AD  120A  118A  22FE  120A  118A  	fcall	___awdiv
   965     00B2  1283               	bcf	3,5	;RP0=0, select bank0
   966     00B3  1303               	bcf	3,6	;RP1=0, select bank0
   967     00B4  0827               	movf	?___awdiv+1,w
   968     00B5  00B2               	movwf	___awmod@dividend+1
   969     00B6  0826               	movf	?___awdiv,w
   970     00B7  00B1               	movwf	___awmod@dividend
   971     00B8  120A  118A  2367  120A  118A  	fcall	___awmod
   972     00BD  1283               	bcf	3,5	;RP0=0, select bank0
   973     00BE  1303               	bcf	3,6	;RP1=0, select bank0
   974     00BF  082F               	movf	?___awmod,w
   975     00C0  00CA               	movwf	_dec_volt
   976     00C1                     l2072:
   977                           
   978                           ;main.c: 71:         cen_volt = (voltage1*5) % 10;
   979     00C1  300A               	movlw	10
   980     00C2  00AF               	movwf	___awmod@divisor
   981     00C3  3000               	movlw	0
   982     00C4  00B0               	movwf	___awmod@divisor+1
   983     00C5  0846               	movf	_voltage1+1,w
   984     00C6  00A1               	movwf	___wmul@multiplier+1
   985     00C7  0845               	movf	_voltage1,w
   986     00C8  00A0               	movwf	___wmul@multiplier
   987     00C9  3005               	movlw	5
   988     00CA  00A2               	movwf	___wmul@multiplicand
   989     00CB  3000               	movlw	0
   990     00CC  00A3               	movwf	___wmul@multiplicand+1
   991     00CD  120A  118A  257F  120A  118A  	fcall	___wmul
   992     00D2  1283               	bcf	3,5	;RP0=0, select bank0
   993     00D3  1303               	bcf	3,6	;RP1=0, select bank0
   994     00D4  0821               	movf	?___wmul+1,w
   995     00D5  00B2               	movwf	___awmod@dividend+1
   996     00D6  0820               	movf	?___wmul,w
   997     00D7  00B1               	movwf	___awmod@dividend
   998     00D8  120A  118A  2367  120A  118A  	fcall	___awmod
   999     00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1000     00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1001     00DF  082F               	movf	?___awmod,w
  1002     00E0  00C9               	movwf	_cen_volt
  1003     00E1                     l2074:
  1004                           
  1005                           ;main.c: 73:         Lcd_Set_Cursor(2,1);
  1006     00E1  01A4               	clrf	Lcd_Set_Cursor@b
  1007     00E2  0AA4               	incf	Lcd_Set_Cursor@b,f
  1008     00E3  3002               	movlw	2
  1009     00E4  120A  118A  25C9  120A  118A  	fcall	_Lcd_Set_Cursor
  1010     00E9                     l2076:
  1011                           
  1012                           ;main.c: 74:         sprintf(display, "%d.%d%dV", uni_volt, dec_volt, cen_volt);
  1013     00E9  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1014     00EA  1283               	bcf	3,5	;RP0=0, select bank0
  1015     00EB  1303               	bcf	3,6	;RP1=0, select bank0
  1016     00EC  00AE               	movwf	sprintf@f
  1017     00ED  084B               	movf	_uni_volt,w
  1018     00EE  00BF               	movwf	??_main
  1019     00EF  01C0               	clrf	??_main+1
  1020     00F0  083F               	movf	??_main,w
  1021     00F1  00AF               	movwf	?_sprintf+1
  1022     00F2  0840               	movf	??_main+1,w
  1023     00F3  00B0               	movwf	?_sprintf+2
  1024     00F4  084A               	movf	_dec_volt,w
  1025     00F5  00C1               	movwf	??_main+2
  1026     00F6  01C2               	clrf	??_main+3
  1027     00F7  0841               	movf	??_main+2,w
  1028     00F8  00B1               	movwf	?_sprintf+3
  1029     00F9  0842               	movf	??_main+3,w
  1030     00FA  00B2               	movwf	?_sprintf+4
  1031     00FB  0849               	movf	_cen_volt,w
  1032     00FC  00C3               	movwf	??_main+4
  1033     00FD  01C4               	clrf	??_main+5
  1034     00FE  0843               	movf	??_main+4,w
  1035     00FF  00B3               	movwf	?_sprintf+5
  1036     0100  0844               	movf	??_main+5,w
  1037     0101  00B4               	movwf	?_sprintf+6
  1038     0102  304C               	movlw	(low (_display| 0))& (0+255)
  1039     0103  120A  118A  2222  120A  118A  	fcall	_sprintf
  1040     0108                     l2078:
  1041                           
  1042                           ;main.c: 75:         Lcd_Write_String(display);
  1043     0108  304C               	movlw	(low (_display| 0))& (0+255)
  1044     0109  1283               	bcf	3,5	;RP0=0, select bank0
  1045     010A  1303               	bcf	3,6	;RP1=0, select bank0
  1046     010B  00A3               	movwf	Lcd_Write_String@a
  1047     010C  3000               	movlw	0
  1048     010D  00A4               	movwf	Lcd_Write_String@a+1
  1049     010E  120A  118A  2463  120A  118A  	fcall	_Lcd_Write_String
  1050     0113                     l2080:
  1051                           
  1052                           ;main.c: 82:         if (ADCON0bits.GO == 0) {
  1053     0113  1283               	bcf	3,5	;RP0=0, select bank0
  1054     0114  1303               	bcf	3,6	;RP1=0, select bank0
  1055     0115  189F               	btfsc	31,1	;volatile
  1056     0116  2918               	goto	u2091
  1057     0117  2919               	goto	u2090
  1058     0118                     u2091:
  1059     0118  2851               	goto	l2064
  1060     0119                     u2090:
  1061     0119                     l2082:
  1062                           
  1063                           ;main.c: 83:             ADCON0bits.GO = 1;
  1064     0119  149F               	bsf	31,1	;volatile
  1065     011A                     l2084:
  1066                           
  1067                           ;main.c: 84:             _delay((unsigned long)((50)*(4000000/4000.0)));
  1068     011A  3041               	movlw	65
  1069     011B  1283               	bcf	3,5	;RP0=0, select bank0
  1070     011C  1303               	bcf	3,6	;RP1=0, select bank0
  1071     011D  00C0               	movwf	??_main+1
  1072     011E  30ED               	movlw	237
  1073     011F  00BF               	movwf	??_main
  1074     0120                     u2107:
  1075     0120  0BBF               	decfsz	??_main,f
  1076     0121  2920               	goto	u2107
  1077     0122  0BC0               	decfsz	??_main+1,f
  1078     0123  2920               	goto	u2107
  1079     0124  2925               	nop2
  1080     0125  2851               	goto	l2064
  1081     0126  120A  118A  280C   	ljmp	start
  1082     0129                     __end_of_main:
  1083                           
  1084                           	psect	text1
  1085     0222                     __ptext1:	
  1086 ;; *************** function _sprintf *****************
  1087 ;; Defined at:
  1088 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1089 ;; Parameters:    Size  Location     Type
  1090 ;;  sp              1    wreg     PTR unsigned char 
  1091 ;;		 -> display(3), 
  1092 ;;  f               1   14[BANK0 ] PTR const unsigned char 
  1093 ;;		 -> STR_2(9), 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  sp              1   29[BANK0 ] PTR unsigned char 
  1096 ;;		 -> display(3), 
  1097 ;;  tmpval          4    0        struct .
  1098 ;;  val             2   27[BANK0 ] unsigned int 
  1099 ;;  cp              2    0        PTR const unsigned char 
  1100 ;;  len             2    0        unsigned int 
  1101 ;;  c               1   30[BANK0 ] unsigned char 
  1102 ;;  prec            1   26[BANK0 ] char 
  1103 ;;  flag            1   25[BANK0 ] unsigned char 
  1104 ;;  ap              1   24[BANK0 ] PTR void [1]
  1105 ;;		 -> ?_sprintf(2), 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  2   14[BANK0 ] int 
  1108 ;; Registers used:
  1109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1115 ;;      Params:         0       7       0       0       0
  1116 ;;      Locals:         0       7       0       0       0
  1117 ;;      Temps:          0       3       0       0       0
  1118 ;;      Totals:         0      17       0       0       0
  1119 ;;Total ram usage:       17 bytes
  1120 ;; Hardware stack levels used: 1
  1121 ;; Hardware stack levels required when called: 3
  1122 ;; This function calls:
  1123 ;;		___lwdiv
  1124 ;;		___lwmod
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130     0222                     _sprintf:	
  1131                           ;psect for function _sprintf
  1132                           
  1133                           
  1134                           ;incstack = 0
  1135                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1136                           ;sprintf@sp stored from wreg
  1137     0222  1283               	bcf	3,5	;RP0=0, select bank0
  1138     0223  1303               	bcf	3,6	;RP1=0, select bank0
  1139     0224  00BD               	movwf	sprintf@sp
  1140     0225                     l1998:
  1141                           
  1142                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1143     0225  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1144     0226  00B8               	movwf	sprintf@ap
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1147     0227  2AE9               	goto	l2050
  1148     0228                     l2000:
  1149                           
  1150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1151     0228  3025               	movlw	37
  1152     0229  063E               	xorwf	sprintf@c,w
  1153     022A  1903               	btfsc	3,2
  1154     022B  2A2D               	goto	u2021
  1155     022C  2A2E               	goto	u2020
  1156     022D                     u2021:
  1157     022D  2A38               	goto	l2006
  1158     022E                     u2020:
  1159     022E                     l2002:
  1160                           
  1161                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1162     022E  083D               	movf	sprintf@sp,w
  1163     022F  0084               	movwf	4
  1164     0230  083E               	movf	sprintf@c,w
  1165     0231  1383               	bcf	3,7	;select IRP bank0
  1166     0232  0080               	movwf	0
  1167     0233                     l2004:
  1168     0233  3001               	movlw	1
  1169     0234  00B5               	movwf	??_sprintf
  1170     0235  0835               	movf	??_sprintf,w
  1171     0236  07BD               	addwf	sprintf@sp,f
  1172                           
  1173                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1174     0237  2AE9               	goto	l2050
  1175     0238                     l2006:
  1176                           
  1177                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1178     0238  01B9               	clrf	sprintf@flag
  1179     0239                     l2010:	
  1180                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1181                           
  1182     0239  3001               	movlw	1
  1183     023A  07AE               	addwf	sprintf@f,f
  1184     023B  30FF               	movlw	-1
  1185     023C  072E               	addwf	sprintf@f,w
  1186     023D  0084               	movwf	4
  1187     023E  120A  118A  2560  120A  118A  	fcall	stringdir
  1188     0243  00BE               	movwf	sprintf@c
  1189     0244  00B5               	movwf	??_sprintf
  1190     0245  01B6               	clrf	??_sprintf+1
  1191                           
  1192                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1193                           ; Switch size 1, requested type "simple"
  1194                           ; Number of cases is 1, Range of values is 0 to 0
  1195                           ; switch strategies available:
  1196                           ; Name         Instructions Cycles
  1197                           ; simple_byte            4     3 (average)
  1198                           ; direct_byte           11     8 (fixed)
  1199                           ; jumptable            260     6 (fixed)
  1200                           ;	Chosen strategy is simple_byte
  1201     0246  0836               	movf	??_sprintf+1,w
  1202     0247  3A00               	xorlw	0	; case 0
  1203     0248  1903               	skipnz
  1204     0249  2A4B               	goto	l2110
  1205     024A  2AE9               	goto	l2050
  1206     024B                     l2110:
  1207                           
  1208                           ; Switch size 1, requested type "simple"
  1209                           ; Number of cases is 3, Range of values is 0 to 105
  1210                           ; switch strategies available:
  1211                           ; Name         Instructions Cycles
  1212                           ; simple_byte           10     6 (average)
  1213                           ; jumptable            260     6 (fixed)
  1214                           ;	Chosen strategy is simple_byte
  1215     024B  0835               	movf	??_sprintf,w
  1216     024C  3A00               	xorlw	0	; case 0
  1217     024D  1903               	skipnz
  1218     024E  2AF9               	goto	l2052
  1219     024F  3A64               	xorlw	100	; case 100
  1220     0250  1903               	skipnz
  1221     0251  2A56               	goto	l2012
  1222     0252  3A0D               	xorlw	13	; case 105
  1223     0253  1903               	skipnz
  1224     0254  2A56               	goto	l2012
  1225     0255  2AE9               	goto	l2050
  1226     0256                     l2012:
  1227                           
  1228                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1229     0256  0838               	movf	sprintf@ap,w
  1230     0257  0084               	movwf	4
  1231     0258  1383               	bcf	3,7	;select IRP bank0
  1232     0259  0800               	movf	0,w
  1233     025A  00BB               	movwf	sprintf@val
  1234     025B  0A84               	incf	4,f
  1235     025C  0800               	movf	0,w
  1236     025D  00BC               	movwf	sprintf@val+1
  1237     025E                     l2014:
  1238     025E  3002               	movlw	2
  1239     025F  00B5               	movwf	??_sprintf
  1240     0260  0835               	movf	??_sprintf,w
  1241     0261  07B8               	addwf	sprintf@ap,f
  1242     0262                     l2016:
  1243                           
  1244                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1245     0262  1FBC               	btfss	sprintf@val+1,7
  1246     0263  2A65               	goto	u2031
  1247     0264  2A66               	goto	u2030
  1248     0265                     u2031:
  1249     0265  2A6F               	goto	l2022
  1250     0266                     u2030:
  1251     0266                     l2018:
  1252                           
  1253                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1254     0266  3003               	movlw	3
  1255     0267  00B5               	movwf	??_sprintf
  1256     0268  0835               	movf	??_sprintf,w
  1257     0269  04B9               	iorwf	sprintf@flag,f
  1258     026A                     l2020:
  1259                           
  1260                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1261     026A  09BB               	comf	sprintf@val,f
  1262     026B  09BC               	comf	sprintf@val+1,f
  1263     026C  0ABB               	incf	sprintf@val,f
  1264     026D  1903               	skipnz
  1265     026E  0ABC               	incf	sprintf@val+1,f
  1266     026F                     l2022:
  1267                           
  1268                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1269     026F  01BE               	clrf	sprintf@c
  1270     0270  0ABE               	incf	sprintf@c,f
  1271     0271                     l2028:
  1272                           
  1273                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1274     0271  083E               	movf	sprintf@c,w
  1275     0272  00B5               	movwf	??_sprintf
  1276     0273  0735               	addwf	??_sprintf,w
  1277     0274  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1278     0275  0084               	movwf	4
  1279     0276  120A  118A  2560  120A  118A  	fcall	stringdir
  1280     027B  00B6               	movwf	??_sprintf+1
  1281     027C  120A  118A  2560  120A  118A  	fcall	stringdir
  1282     0281  00B7               	movwf	??_sprintf+2
  1283     0282  0837               	movf	??_sprintf+2,w
  1284     0283  023C               	subwf	sprintf@val+1,w
  1285     0284  1D03               	skipz
  1286     0285  2A88               	goto	u2045
  1287     0286  0836               	movf	??_sprintf+1,w
  1288     0287  023B               	subwf	sprintf@val,w
  1289     0288                     u2045:
  1290     0288  1803               	skipnc
  1291     0289  2A8B               	goto	u2041
  1292     028A  2A8C               	goto	u2040
  1293     028B                     u2041:
  1294     028B  2A8D               	goto	l2032
  1295     028C                     u2040:
  1296     028C  2A97               	goto	l2034
  1297     028D                     l2032:
  1298     028D  3001               	movlw	1
  1299     028E  00B5               	movwf	??_sprintf
  1300     028F  0835               	movf	??_sprintf,w
  1301     0290  07BE               	addwf	sprintf@c,f
  1302     0291  3005               	movlw	5
  1303     0292  063E               	xorwf	sprintf@c,w
  1304     0293  1D03               	btfss	3,2
  1305     0294  2A96               	goto	u2051
  1306     0295  2A97               	goto	u2050
  1307     0296                     u2051:
  1308     0296  2A71               	goto	l2028
  1309     0297                     u2050:
  1310     0297                     l2034:
  1311                           
  1312                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1313     0297  0839               	movf	sprintf@flag,w
  1314     0298  3903               	andlw	3
  1315     0299  1903               	btfsc	3,2
  1316     029A  2A9C               	goto	u2061
  1317     029B  2A9D               	goto	u2060
  1318     029C                     u2061:
  1319     029C  2AA6               	goto	l2040
  1320     029D                     u2060:
  1321     029D                     l2036:
  1322                           
  1323                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1324     029D  083D               	movf	sprintf@sp,w
  1325     029E  0084               	movwf	4
  1326     029F  302D               	movlw	45
  1327     02A0  1383               	bcf	3,7	;select IRP bank0
  1328     02A1  0080               	movwf	0
  1329     02A2                     l2038:
  1330     02A2  3001               	movlw	1
  1331     02A3  00B5               	movwf	??_sprintf
  1332     02A4  0835               	movf	??_sprintf,w
  1333     02A5  07BD               	addwf	sprintf@sp,f
  1334     02A6                     l2040:
  1335                           
  1336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1337     02A6  083E               	movf	sprintf@c,w
  1338     02A7  00BA               	movwf	sprintf@prec
  1339                           
  1340                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1341     02A8  2AE0               	goto	l2048
  1342     02A9                     l2042:
  1343                           
  1344                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1345     02A9  300A               	movlw	10
  1346     02AA  00A8               	movwf	___lwmod@divisor
  1347     02AB  3000               	movlw	0
  1348     02AC  00A9               	movwf	___lwmod@divisor+1
  1349     02AD  083A               	movf	sprintf@prec,w
  1350     02AE  00B5               	movwf	??_sprintf
  1351     02AF  0735               	addwf	??_sprintf,w
  1352     02B0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1353     02B1  0084               	movwf	4
  1354     02B2  120A  118A  2560  120A  118A  	fcall	stringdir
  1355     02B7  00A0               	movwf	___lwdiv@divisor
  1356     02B8  120A  118A  2560  120A  118A  	fcall	stringdir
  1357     02BD  00A1               	movwf	___lwdiv@divisor+1
  1358     02BE  083C               	movf	sprintf@val+1,w
  1359     02BF  00A3               	movwf	___lwdiv@dividend+1
  1360     02C0  083B               	movf	sprintf@val,w
  1361     02C1  00A2               	movwf	___lwdiv@dividend
  1362     02C2  120A  118A  241D  120A  118A  	fcall	___lwdiv
  1363     02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1364     02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1365     02C9  0821               	movf	?___lwdiv+1,w
  1366     02CA  00AB               	movwf	___lwmod@dividend+1
  1367     02CB  0820               	movf	?___lwdiv,w
  1368     02CC  00AA               	movwf	___lwmod@dividend
  1369     02CD  120A  118A  24A9  120A  118A  	fcall	___lwmod
  1370     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  1371     02D3  1303               	bcf	3,6	;RP1=0, select bank0
  1372     02D4  0828               	movf	?___lwmod,w
  1373     02D5  3E30               	addlw	48
  1374     02D6  00BE               	movwf	sprintf@c
  1375     02D7                     l2044:
  1376                           
  1377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1378     02D7  083D               	movf	sprintf@sp,w
  1379     02D8  0084               	movwf	4
  1380     02D9  083E               	movf	sprintf@c,w
  1381     02DA  1383               	bcf	3,7	;select IRP bank0
  1382     02DB  0080               	movwf	0
  1383     02DC                     l2046:
  1384     02DC  3001               	movlw	1
  1385     02DD  00B5               	movwf	??_sprintf
  1386     02DE  0835               	movf	??_sprintf,w
  1387     02DF  07BD               	addwf	sprintf@sp,f
  1388     02E0                     l2048:
  1389                           
  1390                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1391     02E0  30FF               	movlw	255
  1392     02E1  00B5               	movwf	??_sprintf
  1393     02E2  0835               	movf	??_sprintf,w
  1394     02E3  07BA               	addwf	sprintf@prec,f
  1395     02E4  0A3A               	incf	sprintf@prec,w
  1396     02E5  1D03               	btfss	3,2
  1397     02E6  2AE8               	goto	u2071
  1398     02E7  2AE9               	goto	u2070
  1399     02E8                     u2071:
  1400     02E8  2AA9               	goto	l2042
  1401     02E9                     u2070:
  1402     02E9                     l2050:
  1403                           
  1404                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1405     02E9  3001               	movlw	1
  1406     02EA  07AE               	addwf	sprintf@f,f
  1407     02EB  30FF               	movlw	-1
  1408     02EC  072E               	addwf	sprintf@f,w
  1409     02ED  0084               	movwf	4
  1410     02EE  120A  118A  2560  120A  118A  	fcall	stringdir
  1411     02F3  00BE               	movwf	sprintf@c
  1412     02F4  083E               	movf	sprintf@c,w
  1413     02F5  1D03               	btfss	3,2
  1414     02F6  2AF8               	goto	u2081
  1415     02F7  2AF9               	goto	u2080
  1416     02F8                     u2081:
  1417     02F8  2A28               	goto	l2000
  1418     02F9                     u2080:
  1419     02F9                     l2052:
  1420                           
  1421                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1422     02F9  083D               	movf	sprintf@sp,w
  1423     02FA  0084               	movwf	4
  1424     02FB  1383               	bcf	3,7	;select IRP bank0
  1425     02FC  0180               	clrf	0
  1426     02FD                     l304:
  1427     02FD  0008               	return
  1428     02FE                     __end_of_sprintf:
  1429                           
  1430                           	psect	text2
  1431     04A9                     __ptext2:	
  1432 ;; *************** function ___lwmod *****************
  1433 ;; Defined at:
  1434 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  divisor         2    8[BANK0 ] unsigned int 
  1437 ;;  dividend        2   10[BANK0 ] unsigned int 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  counter         1   13[BANK0 ] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2    8[BANK0 ] unsigned int 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1449 ;;      Params:         0       4       0       0       0
  1450 ;;      Locals:         0       1       0       0       0
  1451 ;;      Temps:          0       1       0       0       0
  1452 ;;      Totals:         0       6       0       0       0
  1453 ;;Total ram usage:        6 bytes
  1454 ;; Hardware stack levels used: 1
  1455 ;; Hardware stack levels required when called: 2
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_sprintf
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463     04A9                     ___lwmod:	
  1464                           ;psect for function ___lwmod
  1465                           
  1466     04A9                     l1920:	
  1467                           ;incstack = 0
  1468                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1469                           
  1470     04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1471     04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1472     04AB  0828               	movf	___lwmod@divisor,w
  1473     04AC  0429               	iorwf	___lwmod@divisor+1,w
  1474     04AD  1903               	btfsc	3,2
  1475     04AE  2CB0               	goto	u1911
  1476     04AF  2CB1               	goto	u1910
  1477     04B0                     u1911:
  1478     04B0  2CE0               	goto	l1938
  1479     04B1                     u1910:
  1480     04B1                     l1922:
  1481     04B1  01AD               	clrf	___lwmod@counter
  1482     04B2  0AAD               	incf	___lwmod@counter,f
  1483     04B3  2CBF               	goto	l1928
  1484     04B4                     l1924:
  1485     04B4  3001               	movlw	1
  1486     04B5                     u1925:
  1487     04B5  1003               	clrc
  1488     04B6  0DA8               	rlf	___lwmod@divisor,f
  1489     04B7  0DA9               	rlf	___lwmod@divisor+1,f
  1490     04B8  3EFF               	addlw	-1
  1491     04B9  1D03               	skipz
  1492     04BA  2CB5               	goto	u1925
  1493     04BB                     l1926:
  1494     04BB  3001               	movlw	1
  1495     04BC  00AC               	movwf	??___lwmod
  1496     04BD  082C               	movf	??___lwmod,w
  1497     04BE  07AD               	addwf	___lwmod@counter,f
  1498     04BF                     l1928:
  1499     04BF  1FA9               	btfss	___lwmod@divisor+1,7
  1500     04C0  2CC2               	goto	u1931
  1501     04C1  2CC3               	goto	u1930
  1502     04C2                     u1931:
  1503     04C2  2CB4               	goto	l1924
  1504     04C3                     u1930:
  1505     04C3                     l1930:
  1506     04C3  0829               	movf	___lwmod@divisor+1,w
  1507     04C4  022B               	subwf	___lwmod@dividend+1,w
  1508     04C5  1D03               	skipz
  1509     04C6  2CC9               	goto	u1945
  1510     04C7  0828               	movf	___lwmod@divisor,w
  1511     04C8  022A               	subwf	___lwmod@dividend,w
  1512     04C9                     u1945:
  1513     04C9  1C03               	skipc
  1514     04CA  2CCC               	goto	u1941
  1515     04CB  2CCD               	goto	u1940
  1516     04CC                     u1941:
  1517     04CC  2CD3               	goto	l1934
  1518     04CD                     u1940:
  1519     04CD                     l1932:
  1520     04CD  0828               	movf	___lwmod@divisor,w
  1521     04CE  02AA               	subwf	___lwmod@dividend,f
  1522     04CF  0829               	movf	___lwmod@divisor+1,w
  1523     04D0  1C03               	skipc
  1524     04D1  03AB               	decf	___lwmod@dividend+1,f
  1525     04D2  02AB               	subwf	___lwmod@dividend+1,f
  1526     04D3                     l1934:
  1527     04D3  3001               	movlw	1
  1528     04D4                     u1955:
  1529     04D4  1003               	clrc
  1530     04D5  0CA9               	rrf	___lwmod@divisor+1,f
  1531     04D6  0CA8               	rrf	___lwmod@divisor,f
  1532     04D7  3EFF               	addlw	-1
  1533     04D8  1D03               	skipz
  1534     04D9  2CD4               	goto	u1955
  1535     04DA                     l1936:
  1536     04DA  3001               	movlw	1
  1537     04DB  02AD               	subwf	___lwmod@counter,f
  1538     04DC  1D03               	btfss	3,2
  1539     04DD  2CDF               	goto	u1961
  1540     04DE  2CE0               	goto	u1960
  1541     04DF                     u1961:
  1542     04DF  2CC3               	goto	l1930
  1543     04E0                     u1960:
  1544     04E0                     l1938:
  1545     04E0  082B               	movf	___lwmod@dividend+1,w
  1546     04E1  00A9               	movwf	?___lwmod+1
  1547     04E2  082A               	movf	___lwmod@dividend,w
  1548     04E3  00A8               	movwf	?___lwmod
  1549     04E4                     l590:
  1550     04E4  0008               	return
  1551     04E5                     __end_of___lwmod:
  1552                           
  1553                           	psect	text3
  1554     041D                     __ptext3:	
  1555 ;; *************** function ___lwdiv *****************
  1556 ;; Defined at:
  1557 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  divisor         2    0[BANK0 ] unsigned int 
  1560 ;;  dividend        2    2[BANK0 ] unsigned int 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  quotient        2    6[BANK0 ] unsigned int 
  1563 ;;  counter         1    5[BANK0 ] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  2    0[BANK0 ] unsigned int 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1573 ;;      Params:         0       4       0       0       0
  1574 ;;      Locals:         0       3       0       0       0
  1575 ;;      Temps:          0       1       0       0       0
  1576 ;;      Totals:         0       8       0       0       0
  1577 ;;Total ram usage:        8 bytes
  1578 ;; Hardware stack levels used: 1
  1579 ;; Hardware stack levels required when called: 2
  1580 ;; This function calls:
  1581 ;;		Nothing
  1582 ;; This function is called by:
  1583 ;;		_sprintf
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587     041D                     ___lwdiv:	
  1588                           ;psect for function ___lwdiv
  1589                           
  1590     041D                     l1894:	
  1591                           ;incstack = 0
  1592                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1593                           
  1594     041D  1283               	bcf	3,5	;RP0=0, select bank0
  1595     041E  1303               	bcf	3,6	;RP1=0, select bank0
  1596     041F  01A6               	clrf	___lwdiv@quotient
  1597     0420  01A7               	clrf	___lwdiv@quotient+1
  1598     0421                     l1896:
  1599     0421  0820               	movf	___lwdiv@divisor,w
  1600     0422  0421               	iorwf	___lwdiv@divisor+1,w
  1601     0423  1903               	btfsc	3,2
  1602     0424  2C26               	goto	u1841
  1603     0425  2C27               	goto	u1840
  1604     0426                     u1841:
  1605     0426  2C5E               	goto	l1916
  1606     0427                     u1840:
  1607     0427                     l1898:
  1608     0427  01A5               	clrf	___lwdiv@counter
  1609     0428  0AA5               	incf	___lwdiv@counter,f
  1610     0429  2C35               	goto	l1904
  1611     042A                     l1900:
  1612     042A  3001               	movlw	1
  1613     042B                     u1855:
  1614     042B  1003               	clrc
  1615     042C  0DA0               	rlf	___lwdiv@divisor,f
  1616     042D  0DA1               	rlf	___lwdiv@divisor+1,f
  1617     042E  3EFF               	addlw	-1
  1618     042F  1D03               	skipz
  1619     0430  2C2B               	goto	u1855
  1620     0431                     l1902:
  1621     0431  3001               	movlw	1
  1622     0432  00A4               	movwf	??___lwdiv
  1623     0433  0824               	movf	??___lwdiv,w
  1624     0434  07A5               	addwf	___lwdiv@counter,f
  1625     0435                     l1904:
  1626     0435  1FA1               	btfss	___lwdiv@divisor+1,7
  1627     0436  2C38               	goto	u1861
  1628     0437  2C39               	goto	u1860
  1629     0438                     u1861:
  1630     0438  2C2A               	goto	l1900
  1631     0439                     u1860:
  1632     0439                     l1906:
  1633     0439  3001               	movlw	1
  1634     043A                     u1875:
  1635     043A  1003               	clrc
  1636     043B  0DA6               	rlf	___lwdiv@quotient,f
  1637     043C  0DA7               	rlf	___lwdiv@quotient+1,f
  1638     043D  3EFF               	addlw	-1
  1639     043E  1D03               	skipz
  1640     043F  2C3A               	goto	u1875
  1641     0440  0821               	movf	___lwdiv@divisor+1,w
  1642     0441  0223               	subwf	___lwdiv@dividend+1,w
  1643     0442  1D03               	skipz
  1644     0443  2C46               	goto	u1885
  1645     0444  0820               	movf	___lwdiv@divisor,w
  1646     0445  0222               	subwf	___lwdiv@dividend,w
  1647     0446                     u1885:
  1648     0446  1C03               	skipc
  1649     0447  2C49               	goto	u1881
  1650     0448  2C4A               	goto	u1880
  1651     0449                     u1881:
  1652     0449  2C51               	goto	l1912
  1653     044A                     u1880:
  1654     044A                     l1908:
  1655     044A  0820               	movf	___lwdiv@divisor,w
  1656     044B  02A2               	subwf	___lwdiv@dividend,f
  1657     044C  0821               	movf	___lwdiv@divisor+1,w
  1658     044D  1C03               	skipc
  1659     044E  03A3               	decf	___lwdiv@dividend+1,f
  1660     044F  02A3               	subwf	___lwdiv@dividend+1,f
  1661     0450                     l1910:
  1662     0450  1426               	bsf	___lwdiv@quotient,0
  1663     0451                     l1912:
  1664     0451  3001               	movlw	1
  1665     0452                     u1895:
  1666     0452  1003               	clrc
  1667     0453  0CA1               	rrf	___lwdiv@divisor+1,f
  1668     0454  0CA0               	rrf	___lwdiv@divisor,f
  1669     0455  3EFF               	addlw	-1
  1670     0456  1D03               	skipz
  1671     0457  2C52               	goto	u1895
  1672     0458                     l1914:
  1673     0458  3001               	movlw	1
  1674     0459  02A5               	subwf	___lwdiv@counter,f
  1675     045A  1D03               	btfss	3,2
  1676     045B  2C5D               	goto	u1901
  1677     045C  2C5E               	goto	u1900
  1678     045D                     u1901:
  1679     045D  2C39               	goto	l1906
  1680     045E                     u1900:
  1681     045E                     l1916:
  1682     045E  0827               	movf	___lwdiv@quotient+1,w
  1683     045F  00A1               	movwf	?___lwdiv+1
  1684     0460  0826               	movf	___lwdiv@quotient,w
  1685     0461  00A0               	movwf	?___lwdiv
  1686     0462                     l580:
  1687     0462  0008               	return
  1688     0463                     __end_of___lwdiv:
  1689                           
  1690                           	psect	text4
  1691     0638                     __ptext4:	
  1692 ;; *************** function _setup *****************
  1693 ;; Defined at:
  1694 ;;		line 99 in file "main.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;                  1    wreg      void 
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1708 ;;      Params:         0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0
  1710 ;;      Temps:          0       0       0       0       0
  1711 ;;      Totals:         0       0       0       0       0
  1712 ;;Total ram usage:        0 bytes
  1713 ;; Hardware stack levels used: 1
  1714 ;; Hardware stack levels required when called: 2
  1715 ;; This function calls:
  1716 ;;		Nothing
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722     0638                     _setup:	
  1723                           ;psect for function _setup
  1724                           
  1725     0638                     l1942:	
  1726                           ;incstack = 0
  1727                           ; Regs used in _setup: [wreg+status,2+status,0]
  1728                           
  1729                           
  1730                           ;main.c: 112:     TRISB = 0;
  1731     0638  1683               	bsf	3,5	;RP0=1, select bank1
  1732     0639  1303               	bcf	3,6	;RP1=0, select bank1
  1733     063A  0186               	clrf	6	;volatile
  1734                           
  1735                           ;main.c: 113:     TRISC = 0;
  1736     063B  0187               	clrf	7	;volatile
  1737                           
  1738                           ;main.c: 114:     TRISD = 0;
  1739     063C  0188               	clrf	8	;volatile
  1740                           
  1741                           ;main.c: 118:     PORTA = 0;
  1742     063D  1283               	bcf	3,5	;RP0=0, select bank0
  1743     063E  1303               	bcf	3,6	;RP1=0, select bank0
  1744     063F  0185               	clrf	5	;volatile
  1745                           
  1746                           ;main.c: 119:     PORTB = 0;
  1747     0640  0186               	clrf	6	;volatile
  1748                           
  1749                           ;main.c: 120:     PORTC = 0;
  1750     0641  0187               	clrf	7	;volatile
  1751                           
  1752                           ;main.c: 121:     PORTD = 0;
  1753     0642  0188               	clrf	8	;volatile
  1754                           
  1755                           ;main.c: 122:     PORTE = 0;
  1756     0643  0189               	clrf	9	;volatile
  1757     0644                     l1944:
  1758                           
  1759                           ;main.c: 130:     INTCONbits.GIE = 1;
  1760     0644  178B               	bsf	11,7	;volatile
  1761     0645                     l1946:
  1762                           
  1763                           ;main.c: 131:     INTCONbits.PEIE = 1;
  1764     0645  170B               	bsf	11,6	;volatile
  1765     0646                     l1948:
  1766                           
  1767                           ;main.c: 144:     OSCCONbits.IRCF = 0b110 ;
  1768     0646  1683               	bsf	3,5	;RP0=1, select bank1
  1769     0647  1303               	bcf	3,6	;RP1=0, select bank1
  1770     0648  080F               	movf	15,w	;volatile
  1771     0649  398F               	andlw	-113
  1772     064A  3860               	iorlw	96
  1773     064B  008F               	movwf	15	;volatile
  1774     064C                     l1950:
  1775                           
  1776                           ;main.c: 145:     OSCCONbits.SCS = 1;
  1777     064C  140F               	bsf	15,0	;volatile
  1778     064D                     l78:
  1779     064D  0008               	return
  1780     064E                     __end_of_setup:
  1781                           
  1782                           	psect	text5
  1783     0521                     __ptext5:	
  1784 ;; *************** function _map_adc_volt *****************
  1785 ;; Defined at:
  1786 ;;		line 141 in file "ADC_setup.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;  value           2   15[BANK0 ] int 
  1789 ;;  inputmin        2   17[BANK0 ] int 
  1790 ;;  inputmax        2   19[BANK0 ] int 
  1791 ;;  outmin          2   21[BANK0 ] int 
  1792 ;;  outmax          2   23[BANK0 ] int 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2   15[BANK0 ] int 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0, pclath, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1804 ;;      Params:         0      10       0       0       0
  1805 ;;      Locals:         0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0
  1807 ;;      Totals:         0      10       0       0       0
  1808 ;;Total ram usage:       10 bytes
  1809 ;; Hardware stack levels used: 1
  1810 ;; Hardware stack levels required when called: 3
  1811 ;; This function calls:
  1812 ;;		___awdiv
  1813 ;;		___wmul
  1814 ;; This function is called by:
  1815 ;;		_main
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819     0521                     _map_adc_volt:	
  1820                           ;psect for function _map_adc_volt
  1821                           
  1822     0521                     l1994:	
  1823                           ;incstack = 0
  1824                           ; Regs used in _map_adc_volt: [wreg+status,2+status,0+pclath+cstack]
  1825                           
  1826                           
  1827                           ;ADC_setup.c: 142:     return ((value - inputmin)*(outmax-outmin)) / (inputmax-inputmin)
      +                          +outmin;}
  1828     0521  1283               	bcf	3,5	;RP0=0, select bank0
  1829     0522  1303               	bcf	3,6	;RP1=0, select bank0
  1830     0523  0831               	movf	map_adc_volt@inputmin,w
  1831     0524  0233               	subwf	map_adc_volt@inputmax,w
  1832     0525  00A6               	movwf	___awdiv@divisor
  1833     0526  0832               	movf	map_adc_volt@inputmin+1,w
  1834     0527  1C03               	skipc
  1835     0528  0A32               	incf	map_adc_volt@inputmin+1,w
  1836     0529  0234               	subwf	map_adc_volt@inputmax+1,w
  1837     052A  00A7               	movwf	___awdiv@divisor+1
  1838     052B  0831               	movf	map_adc_volt@inputmin,w
  1839     052C  022F               	subwf	map_adc_volt@value,w
  1840     052D  00A0               	movwf	___wmul@multiplier
  1841     052E  0832               	movf	map_adc_volt@inputmin+1,w
  1842     052F  1C03               	skipc
  1843     0530  0A32               	incf	map_adc_volt@inputmin+1,w
  1844     0531  0230               	subwf	map_adc_volt@value+1,w
  1845     0532  00A1               	movwf	___wmul@multiplier+1
  1846     0533  0835               	movf	map_adc_volt@outmin,w
  1847     0534  0237               	subwf	map_adc_volt@outmax,w
  1848     0535  00A2               	movwf	___wmul@multiplicand
  1849     0536  0836               	movf	map_adc_volt@outmin+1,w
  1850     0537  1C03               	skipc
  1851     0538  0A36               	incf	map_adc_volt@outmin+1,w
  1852     0539  0238               	subwf	map_adc_volt@outmax+1,w
  1853     053A  00A3               	movwf	___wmul@multiplicand+1
  1854     053B  120A  118A  257F  120A  118A  	fcall	___wmul
  1855     0540  1283               	bcf	3,5	;RP0=0, select bank0
  1856     0541  1303               	bcf	3,6	;RP1=0, select bank0
  1857     0542  0821               	movf	?___wmul+1,w
  1858     0543  00A9               	movwf	___awdiv@dividend+1
  1859     0544  0820               	movf	?___wmul,w
  1860     0545  00A8               	movwf	___awdiv@dividend
  1861     0546  120A  118A  22FE  120A  118A  	fcall	___awdiv
  1862     054B  1283               	bcf	3,5	;RP0=0, select bank0
  1863     054C  1303               	bcf	3,6	;RP1=0, select bank0
  1864     054D  0835               	movf	map_adc_volt@outmin,w
  1865     054E  0726               	addwf	?___awdiv,w
  1866     054F  00AF               	movwf	?_map_adc_volt
  1867     0550  0836               	movf	map_adc_volt@outmin+1,w
  1868     0551  1803               	skipnc
  1869     0552  0A36               	incf	map_adc_volt@outmin+1,w
  1870     0553  0727               	addwf	?___awdiv+1,w
  1871     0554  00B0               	movwf	?_map_adc_volt+1
  1872     0555                     l194:
  1873     0555  0008               	return
  1874     0556                     __end_of_map_adc_volt:
  1875                           
  1876                           	psect	text6
  1877     057F                     __ptext6:	
  1878 ;; *************** function ___wmul *****************
  1879 ;; Defined at:
  1880 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1883 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  product         2    4[BANK0 ] unsigned int 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    0[BANK0 ] unsigned int 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         0       4       0       0       0
  1896 ;;      Locals:         0       2       0       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         0       6       0       0       0
  1899 ;;Total ram usage:        6 bytes
  1900 ;; Hardware stack levels used: 1
  1901 ;; Hardware stack levels required when called: 2
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;;		_map_adc_volt
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910     057F                     ___wmul:	
  1911                           ;psect for function ___wmul
  1912                           
  1913     057F                     l1880:	
  1914                           ;incstack = 0
  1915                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1916                           
  1917     057F  1283               	bcf	3,5	;RP0=0, select bank0
  1918     0580  1303               	bcf	3,6	;RP1=0, select bank0
  1919     0581  01A4               	clrf	___wmul@product
  1920     0582  01A5               	clrf	___wmul@product+1
  1921     0583                     l1882:
  1922     0583  1C20               	btfss	___wmul@multiplier,0
  1923     0584  2D86               	goto	u1801
  1924     0585  2D87               	goto	u1800
  1925     0586                     u1801:
  1926     0586  2D8D               	goto	l308
  1927     0587                     u1800:
  1928     0587                     l1884:
  1929     0587  0822               	movf	___wmul@multiplicand,w
  1930     0588  07A4               	addwf	___wmul@product,f
  1931     0589  1803               	skipnc
  1932     058A  0AA5               	incf	___wmul@product+1,f
  1933     058B  0823               	movf	___wmul@multiplicand+1,w
  1934     058C  07A5               	addwf	___wmul@product+1,f
  1935     058D                     l308:
  1936     058D  3001               	movlw	1
  1937     058E                     u1815:
  1938     058E  1003               	clrc
  1939     058F  0DA2               	rlf	___wmul@multiplicand,f
  1940     0590  0DA3               	rlf	___wmul@multiplicand+1,f
  1941     0591  3EFF               	addlw	-1
  1942     0592  1D03               	skipz
  1943     0593  2D8E               	goto	u1815
  1944     0594                     l1886:
  1945     0594  3001               	movlw	1
  1946     0595                     u1825:
  1947     0595  1003               	clrc
  1948     0596  0CA1               	rrf	___wmul@multiplier+1,f
  1949     0597  0CA0               	rrf	___wmul@multiplier,f
  1950     0598  3EFF               	addlw	-1
  1951     0599  1D03               	skipz
  1952     059A  2D95               	goto	u1825
  1953     059B                     l1888:
  1954     059B  0820               	movf	___wmul@multiplier,w
  1955     059C  0421               	iorwf	___wmul@multiplier+1,w
  1956     059D  1D03               	btfss	3,2
  1957     059E  2DA0               	goto	u1831
  1958     059F  2DA1               	goto	u1830
  1959     05A0                     u1831:
  1960     05A0  2D83               	goto	l1882
  1961     05A1                     u1830:
  1962     05A1                     l1890:
  1963     05A1  0825               	movf	___wmul@product+1,w
  1964     05A2  00A1               	movwf	?___wmul+1
  1965     05A3  0824               	movf	___wmul@product,w
  1966     05A4  00A0               	movwf	?___wmul
  1967     05A5                     l310:
  1968     05A5  0008               	return
  1969     05A6                     __end_of___wmul:
  1970                           
  1971                           	psect	text7
  1972     02FE                     __ptext7:	
  1973 ;; *************** function ___awdiv *****************
  1974 ;; Defined at:
  1975 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  divisor         2    6[BANK0 ] int 
  1978 ;;  dividend        2    8[BANK0 ] int 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  quotient        2   13[BANK0 ] int 
  1981 ;;  sign            1   12[BANK0 ] unsigned char 
  1982 ;;  counter         1   11[BANK0 ] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    6[BANK0 ] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       4       0       0       0
  1993 ;;      Locals:         0       4       0       0       0
  1994 ;;      Temps:          0       1       0       0       0
  1995 ;;      Totals:         0       9       0       0       0
  1996 ;;Total ram usage:        9 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 2
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;;		_map_adc_volt
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007     02FE                     ___awdiv:	
  2008                           ;psect for function ___awdiv
  2009                           
  2010     02FE                     l1450:	
  2011                           ;incstack = 0
  2012                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2013                           
  2014     02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2015     02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2016     0300  01AC               	clrf	___awdiv@sign
  2017     0301                     l1452:
  2018     0301  1FA7               	btfss	___awdiv@divisor+1,7
  2019     0302  2B04               	goto	u1121
  2020     0303  2B05               	goto	u1120
  2021     0304                     u1121:
  2022     0304  2B0C               	goto	l1458
  2023     0305                     u1120:
  2024     0305                     l1454:
  2025     0305  09A6               	comf	___awdiv@divisor,f
  2026     0306  09A7               	comf	___awdiv@divisor+1,f
  2027     0307  0AA6               	incf	___awdiv@divisor,f
  2028     0308  1903               	skipnz
  2029     0309  0AA7               	incf	___awdiv@divisor+1,f
  2030     030A                     l1456:
  2031     030A  01AC               	clrf	___awdiv@sign
  2032     030B  0AAC               	incf	___awdiv@sign,f
  2033     030C                     l1458:
  2034     030C  1FA9               	btfss	___awdiv@dividend+1,7
  2035     030D  2B0F               	goto	u1131
  2036     030E  2B10               	goto	u1130
  2037     030F                     u1131:
  2038     030F  2B19               	goto	l1464
  2039     0310                     u1130:
  2040     0310                     l1460:
  2041     0310  09A8               	comf	___awdiv@dividend,f
  2042     0311  09A9               	comf	___awdiv@dividend+1,f
  2043     0312  0AA8               	incf	___awdiv@dividend,f
  2044     0313  1903               	skipnz
  2045     0314  0AA9               	incf	___awdiv@dividend+1,f
  2046     0315                     l1462:
  2047     0315  3001               	movlw	1
  2048     0316  00AA               	movwf	??___awdiv
  2049     0317  082A               	movf	??___awdiv,w
  2050     0318  06AC               	xorwf	___awdiv@sign,f
  2051     0319                     l1464:
  2052     0319  01AD               	clrf	___awdiv@quotient
  2053     031A  01AE               	clrf	___awdiv@quotient+1
  2054     031B                     l1466:
  2055     031B  0826               	movf	___awdiv@divisor,w
  2056     031C  0427               	iorwf	___awdiv@divisor+1,w
  2057     031D  1903               	btfsc	3,2
  2058     031E  2B20               	goto	u1141
  2059     031F  2B21               	goto	u1140
  2060     0320                     u1141:
  2061     0320  2B58               	goto	l1486
  2062     0321                     u1140:
  2063     0321                     l1468:
  2064     0321  01AB               	clrf	___awdiv@counter
  2065     0322  0AAB               	incf	___awdiv@counter,f
  2066     0323  2B2F               	goto	l1474
  2067     0324                     l1470:
  2068     0324  3001               	movlw	1
  2069     0325                     u1155:
  2070     0325  1003               	clrc
  2071     0326  0DA6               	rlf	___awdiv@divisor,f
  2072     0327  0DA7               	rlf	___awdiv@divisor+1,f
  2073     0328  3EFF               	addlw	-1
  2074     0329  1D03               	skipz
  2075     032A  2B25               	goto	u1155
  2076     032B                     l1472:
  2077     032B  3001               	movlw	1
  2078     032C  00AA               	movwf	??___awdiv
  2079     032D  082A               	movf	??___awdiv,w
  2080     032E  07AB               	addwf	___awdiv@counter,f
  2081     032F                     l1474:
  2082     032F  1FA7               	btfss	___awdiv@divisor+1,7
  2083     0330  2B32               	goto	u1161
  2084     0331  2B33               	goto	u1160
  2085     0332                     u1161:
  2086     0332  2B24               	goto	l1470
  2087     0333                     u1160:
  2088     0333                     l1476:
  2089     0333  3001               	movlw	1
  2090     0334                     u1175:
  2091     0334  1003               	clrc
  2092     0335  0DAD               	rlf	___awdiv@quotient,f
  2093     0336  0DAE               	rlf	___awdiv@quotient+1,f
  2094     0337  3EFF               	addlw	-1
  2095     0338  1D03               	skipz
  2096     0339  2B34               	goto	u1175
  2097     033A  0827               	movf	___awdiv@divisor+1,w
  2098     033B  0229               	subwf	___awdiv@dividend+1,w
  2099     033C  1D03               	skipz
  2100     033D  2B40               	goto	u1185
  2101     033E  0826               	movf	___awdiv@divisor,w
  2102     033F  0228               	subwf	___awdiv@dividend,w
  2103     0340                     u1185:
  2104     0340  1C03               	skipc
  2105     0341  2B43               	goto	u1181
  2106     0342  2B44               	goto	u1180
  2107     0343                     u1181:
  2108     0343  2B4B               	goto	l1482
  2109     0344                     u1180:
  2110     0344                     l1478:
  2111     0344  0826               	movf	___awdiv@divisor,w
  2112     0345  02A8               	subwf	___awdiv@dividend,f
  2113     0346  0827               	movf	___awdiv@divisor+1,w
  2114     0347  1C03               	skipc
  2115     0348  03A9               	decf	___awdiv@dividend+1,f
  2116     0349  02A9               	subwf	___awdiv@dividend+1,f
  2117     034A                     l1480:
  2118     034A  142D               	bsf	___awdiv@quotient,0
  2119     034B                     l1482:
  2120     034B  3001               	movlw	1
  2121     034C                     u1195:
  2122     034C  1003               	clrc
  2123     034D  0CA7               	rrf	___awdiv@divisor+1,f
  2124     034E  0CA6               	rrf	___awdiv@divisor,f
  2125     034F  3EFF               	addlw	-1
  2126     0350  1D03               	skipz
  2127     0351  2B4C               	goto	u1195
  2128     0352                     l1484:
  2129     0352  3001               	movlw	1
  2130     0353  02AB               	subwf	___awdiv@counter,f
  2131     0354  1D03               	btfss	3,2
  2132     0355  2B57               	goto	u1201
  2133     0356  2B58               	goto	u1200
  2134     0357                     u1201:
  2135     0357  2B33               	goto	l1476
  2136     0358                     u1200:
  2137     0358                     l1486:
  2138     0358  082C               	movf	___awdiv@sign,w
  2139     0359  1903               	btfsc	3,2
  2140     035A  2B5C               	goto	u1211
  2141     035B  2B5D               	goto	u1210
  2142     035C                     u1211:
  2143     035C  2B62               	goto	l1490
  2144     035D                     u1210:
  2145     035D                     l1488:
  2146     035D  09AD               	comf	___awdiv@quotient,f
  2147     035E  09AE               	comf	___awdiv@quotient+1,f
  2148     035F  0AAD               	incf	___awdiv@quotient,f
  2149     0360  1903               	skipnz
  2150     0361  0AAE               	incf	___awdiv@quotient+1,f
  2151     0362                     l1490:
  2152     0362  082E               	movf	___awdiv@quotient+1,w
  2153     0363  00A7               	movwf	?___awdiv+1
  2154     0364  082D               	movf	___awdiv@quotient,w
  2155     0365  00A6               	movwf	?___awdiv
  2156     0366                     l461:
  2157     0366  0008               	return
  2158     0367                     __end_of___awdiv:
  2159                           
  2160                           	psect	text8
  2161     05A6                     __ptext8:	
  2162 ;; *************** function _adc_init *****************
  2163 ;; Defined at:
  2164 ;;		line 15 in file "ADC_setup.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  channel         2    2[BANK0 ] int 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0, pclath, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2178 ;;      Params:         0       2       0       0       0
  2179 ;;      Locals:         0       0       0       0       0
  2180 ;;      Temps:          0       1       0       0       0
  2181 ;;      Totals:         0       3       0       0       0
  2182 ;;Total ram usage:        3 bytes
  2183 ;; Hardware stack levels used: 1
  2184 ;; Hardware stack levels required when called: 3
  2185 ;; This function calls:
  2186 ;;		_adc_change_channel
  2187 ;; This function is called by:
  2188 ;;		_main
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192     05A6                     _adc_init:	
  2193                           ;psect for function _adc_init
  2194                           
  2195     05A6                     l1952:	
  2196                           ;incstack = 0
  2197                           ; Regs used in _adc_init: [wreg+status,2+status,0+pclath+cstack]
  2198                           
  2199                           
  2200                           ;ADC_setup.c: 17:     PIE1bits.ADIE = 1;
  2201     05A6  1683               	bsf	3,5	;RP0=1, select bank1
  2202     05A7  1303               	bcf	3,6	;RP1=0, select bank1
  2203     05A8  170C               	bsf	12,6	;volatile
  2204                           
  2205                           ;ADC_setup.c: 18:     PIR1bits.ADIF = 0;
  2206     05A9  1283               	bcf	3,5	;RP0=0, select bank0
  2207     05AA  1303               	bcf	3,6	;RP1=0, select bank0
  2208     05AB  130C               	bcf	12,6	;volatile
  2209                           
  2210                           ;ADC_setup.c: 20:     ADCON0bits.ADCS1 = 0;
  2211     05AC  139F               	bcf	31,7	;volatile
  2212                           
  2213                           ;ADC_setup.c: 21:     ADCON0bits.ADCS0 = 0;
  2214     05AD  131F               	bcf	31,6	;volatile
  2215                           
  2216                           ;ADC_setup.c: 23:     ADCON1bits.VCFG1 = 0;
  2217     05AE  1683               	bsf	3,5	;RP0=1, select bank1
  2218     05AF  1303               	bcf	3,6	;RP1=0, select bank1
  2219     05B0  129F               	bcf	31,5	;volatile
  2220                           
  2221                           ;ADC_setup.c: 24:     ADCON1bits.VCFG0 = 0;
  2222     05B1  121F               	bcf	31,4	;volatile
  2223                           
  2224                           ;ADC_setup.c: 26:     ADCON1bits.ADFM = 0;
  2225     05B2  139F               	bcf	31,7	;volatile
  2226     05B3                     l1954:
  2227                           
  2228                           ;ADC_setup.c: 28:     adc_change_channel(channel);
  2229     05B3  1283               	bcf	3,5	;RP0=0, select bank0
  2230     05B4  1303               	bcf	3,6	;RP1=0, select bank0
  2231     05B5  0823               	movf	adc_init@channel+1,w
  2232     05B6  00A1               	movwf	adc_change_channel@channel+1
  2233     05B7  0822               	movf	adc_init@channel,w
  2234     05B8  00A0               	movwf	adc_change_channel@channel
  2235     05B9  120A  118A  2129  120A  118A  	fcall	_adc_change_channel
  2236     05BE                     l1956:
  2237                           
  2238                           ;ADC_setup.c: 30:     ADCON0bits.ADON = 1;
  2239     05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2240     05BF  1303               	bcf	3,6	;RP1=0, select bank0
  2241     05C0  141F               	bsf	31,0	;volatile
  2242     05C1                     l1958:
  2243                           
  2244                           ;ADC_setup.c: 31:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2245     05C1  3020               	movlw	32
  2246     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  2247     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  2248     05C4  00A4               	movwf	??_adc_init
  2249     05C5                     u2117:
  2250     05C5  0BA4               	decfsz	??_adc_init,f
  2251     05C6  2DC5               	goto	u2117
  2252     05C7  0000               	nop
  2253     05C8                     l154:
  2254     05C8  0008               	return
  2255     05C9                     __end_of_adc_init:
  2256                           
  2257                           	psect	text9
  2258     0129                     __ptext9:	
  2259 ;; *************** function _adc_change_channel *****************
  2260 ;; Defined at:
  2261 ;;		line 38 in file "ADC_setup.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;  channel         2    0[BANK0 ] int 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      void 
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       2       0       0       0
  2276 ;;      Locals:         0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0
  2278 ;;      Totals:         0       2       0       0       0
  2279 ;;Total ram usage:        2 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 2
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_adc_init
  2286 ;; This function uses a non-reentrant model
  2287 ;;
  2288                           
  2289     0129                     _adc_change_channel:	
  2290                           ;psect for function _adc_change_channel
  2291                           
  2292     0129                     l1796:	
  2293                           ;incstack = 0
  2294                           ; Regs used in _adc_change_channel: [wreg+status,2+status,0]
  2295                           
  2296                           
  2297                           ;ADC_setup.c: 39:     if(channel == 0){
  2298     0129  1283               	bcf	3,5	;RP0=0, select bank0
  2299     012A  1303               	bcf	3,6	;RP1=0, select bank0
  2300     012B  0820               	movf	adc_change_channel@channel,w
  2301     012C  0421               	iorwf	adc_change_channel@channel+1,w
  2302     012D  1D03               	btfss	3,2
  2303     012E  2930               	goto	u1661
  2304     012F  2931               	goto	u1660
  2305     0130                     u1661:
  2306     0130  2938               	goto	l1802
  2307     0131                     u1660:
  2308     0131                     l1798:
  2309                           
  2310                           ;ADC_setup.c: 40:         ADCON0bits.CHS = 0b0000;
  2311     0131  30C3               	movlw	-61
  2312     0132  059F               	andwf	31,f	;volatile
  2313     0133                     l1800:
  2314                           
  2315                           ;ADC_setup.c: 41:         ANSEL = ANSEL | 0b00000001;
  2316     0133  1683               	bsf	3,5	;RP0=1, select bank3
  2317     0134  1703               	bsf	3,6	;RP1=1, select bank3
  2318     0135  0808               	movf	8,w	;volatile
  2319     0136  3801               	iorlw	1
  2320     0137  0088               	movwf	8	;volatile
  2321     0138                     l1802:
  2322                           
  2323                           ;ADC_setup.c: 43:     if(channel == 1){
  2324     0138  1283               	bcf	3,5	;RP0=0, select bank0
  2325     0139  1303               	bcf	3,6	;RP1=0, select bank0
  2326     013A  0320               	decf	adc_change_channel@channel,w
  2327     013B  0421               	iorwf	adc_change_channel@channel+1,w
  2328     013C  1D03               	btfss	3,2
  2329     013D  293F               	goto	u1671
  2330     013E  2940               	goto	u1670
  2331     013F                     u1671:
  2332     013F  2949               	goto	l1808
  2333     0140                     u1670:
  2334     0140                     l1804:
  2335                           
  2336                           ;ADC_setup.c: 44:         ADCON0bits.CHS = 0b0001;
  2337     0140  081F               	movf	31,w	;volatile
  2338     0141  39C3               	andlw	-61
  2339     0142  3804               	iorlw	4
  2340     0143  009F               	movwf	31	;volatile
  2341     0144                     l1806:
  2342                           
  2343                           ;ADC_setup.c: 45:         ANSEL = ANSEL | 0b00000010;
  2344     0144  1683               	bsf	3,5	;RP0=1, select bank3
  2345     0145  1703               	bsf	3,6	;RP1=1, select bank3
  2346     0146  0808               	movf	8,w	;volatile
  2347     0147  3802               	iorlw	2
  2348     0148  0088               	movwf	8	;volatile
  2349     0149                     l1808:
  2350                           
  2351                           ;ADC_setup.c: 47:     if(channel == 2){
  2352     0149  3002               	movlw	2
  2353     014A  1283               	bcf	3,5	;RP0=0, select bank0
  2354     014B  1303               	bcf	3,6	;RP1=0, select bank0
  2355     014C  0620               	xorwf	adc_change_channel@channel,w
  2356     014D  0421               	iorwf	adc_change_channel@channel+1,w
  2357     014E  1D03               	btfss	3,2
  2358     014F  2951               	goto	u1681
  2359     0150  2952               	goto	u1680
  2360     0151                     u1681:
  2361     0151  295B               	goto	l1814
  2362     0152                     u1680:
  2363     0152                     l1810:
  2364                           
  2365                           ;ADC_setup.c: 48:         ADCON0bits.CHS = 0b0010;
  2366     0152  081F               	movf	31,w	;volatile
  2367     0153  39C3               	andlw	-61
  2368     0154  3808               	iorlw	8
  2369     0155  009F               	movwf	31	;volatile
  2370     0156                     l1812:
  2371                           
  2372                           ;ADC_setup.c: 49:         ANSEL = ANSEL | 0b00000100;
  2373     0156  1683               	bsf	3,5	;RP0=1, select bank3
  2374     0157  1703               	bsf	3,6	;RP1=1, select bank3
  2375     0158  0808               	movf	8,w	;volatile
  2376     0159  3804               	iorlw	4
  2377     015A  0088               	movwf	8	;volatile
  2378     015B                     l1814:
  2379                           
  2380                           ;ADC_setup.c: 51:     if(channel == 3){
  2381     015B  3003               	movlw	3
  2382     015C  1283               	bcf	3,5	;RP0=0, select bank0
  2383     015D  1303               	bcf	3,6	;RP1=0, select bank0
  2384     015E  0620               	xorwf	adc_change_channel@channel,w
  2385     015F  0421               	iorwf	adc_change_channel@channel+1,w
  2386     0160  1D03               	btfss	3,2
  2387     0161  2963               	goto	u1691
  2388     0162  2964               	goto	u1690
  2389     0163                     u1691:
  2390     0163  296D               	goto	l1820
  2391     0164                     u1690:
  2392     0164                     l1816:
  2393                           
  2394                           ;ADC_setup.c: 52:         ADCON0bits.CHS = 0b0011;
  2395     0164  081F               	movf	31,w	;volatile
  2396     0165  39C3               	andlw	-61
  2397     0166  380C               	iorlw	12
  2398     0167  009F               	movwf	31	;volatile
  2399     0168                     l1818:
  2400                           
  2401                           ;ADC_setup.c: 53:         ANSEL = ANSEL | 0b00001000;
  2402     0168  1683               	bsf	3,5	;RP0=1, select bank3
  2403     0169  1703               	bsf	3,6	;RP1=1, select bank3
  2404     016A  0808               	movf	8,w	;volatile
  2405     016B  3808               	iorlw	8
  2406     016C  0088               	movwf	8	;volatile
  2407     016D                     l1820:
  2408                           
  2409                           ;ADC_setup.c: 55:     if(channel == 4){
  2410     016D  3004               	movlw	4
  2411     016E  1283               	bcf	3,5	;RP0=0, select bank0
  2412     016F  1303               	bcf	3,6	;RP1=0, select bank0
  2413     0170  0620               	xorwf	adc_change_channel@channel,w
  2414     0171  0421               	iorwf	adc_change_channel@channel+1,w
  2415     0172  1D03               	btfss	3,2
  2416     0173  2975               	goto	u1701
  2417     0174  2976               	goto	u1700
  2418     0175                     u1701:
  2419     0175  297F               	goto	l1826
  2420     0176                     u1700:
  2421     0176                     l1822:
  2422                           
  2423                           ;ADC_setup.c: 56:         ADCON0bits.CHS = 0b0100;
  2424     0176  081F               	movf	31,w	;volatile
  2425     0177  39C3               	andlw	-61
  2426     0178  3810               	iorlw	16
  2427     0179  009F               	movwf	31	;volatile
  2428     017A                     l1824:
  2429                           
  2430                           ;ADC_setup.c: 57:         ANSEL = ANSEL | 0b00010000;
  2431     017A  1683               	bsf	3,5	;RP0=1, select bank3
  2432     017B  1703               	bsf	3,6	;RP1=1, select bank3
  2433     017C  0808               	movf	8,w	;volatile
  2434     017D  3810               	iorlw	16
  2435     017E  0088               	movwf	8	;volatile
  2436     017F                     l1826:
  2437                           
  2438                           ;ADC_setup.c: 59:     if(channel == 5){
  2439     017F  3005               	movlw	5
  2440     0180  1283               	bcf	3,5	;RP0=0, select bank0
  2441     0181  1303               	bcf	3,6	;RP1=0, select bank0
  2442     0182  0620               	xorwf	adc_change_channel@channel,w
  2443     0183  0421               	iorwf	adc_change_channel@channel+1,w
  2444     0184  1D03               	btfss	3,2
  2445     0185  2987               	goto	u1711
  2446     0186  2988               	goto	u1710
  2447     0187                     u1711:
  2448     0187  2991               	goto	l1832
  2449     0188                     u1710:
  2450     0188                     l1828:
  2451                           
  2452                           ;ADC_setup.c: 60:         ADCON0bits.CHS = 0b0101;
  2453     0188  081F               	movf	31,w	;volatile
  2454     0189  39C3               	andlw	-61
  2455     018A  3814               	iorlw	20
  2456     018B  009F               	movwf	31	;volatile
  2457     018C                     l1830:
  2458                           
  2459                           ;ADC_setup.c: 61:         ANSEL = ANSEL | 0b00100000;
  2460     018C  1683               	bsf	3,5	;RP0=1, select bank3
  2461     018D  1703               	bsf	3,6	;RP1=1, select bank3
  2462     018E  0808               	movf	8,w	;volatile
  2463     018F  3820               	iorlw	32
  2464     0190  0088               	movwf	8	;volatile
  2465     0191                     l1832:
  2466                           
  2467                           ;ADC_setup.c: 63:     if(channel == 6){
  2468     0191  3006               	movlw	6
  2469     0192  1283               	bcf	3,5	;RP0=0, select bank0
  2470     0193  1303               	bcf	3,6	;RP1=0, select bank0
  2471     0194  0620               	xorwf	adc_change_channel@channel,w
  2472     0195  0421               	iorwf	adc_change_channel@channel+1,w
  2473     0196  1D03               	btfss	3,2
  2474     0197  2999               	goto	u1721
  2475     0198  299A               	goto	u1720
  2476     0199                     u1721:
  2477     0199  29A3               	goto	l1838
  2478     019A                     u1720:
  2479     019A                     l1834:
  2480                           
  2481                           ;ADC_setup.c: 64:         ADCON0bits.CHS = 0b0110;
  2482     019A  081F               	movf	31,w	;volatile
  2483     019B  39C3               	andlw	-61
  2484     019C  3818               	iorlw	24
  2485     019D  009F               	movwf	31	;volatile
  2486     019E                     l1836:
  2487                           
  2488                           ;ADC_setup.c: 65:         ANSEL = ANSEL | 0b01000000;
  2489     019E  1683               	bsf	3,5	;RP0=1, select bank3
  2490     019F  1703               	bsf	3,6	;RP1=1, select bank3
  2491     01A0  0808               	movf	8,w	;volatile
  2492     01A1  3840               	iorlw	64
  2493     01A2  0088               	movwf	8	;volatile
  2494     01A3                     l1838:
  2495                           
  2496                           ;ADC_setup.c: 67:     if(channel == 7){
  2497     01A3  3007               	movlw	7
  2498     01A4  1283               	bcf	3,5	;RP0=0, select bank0
  2499     01A5  1303               	bcf	3,6	;RP1=0, select bank0
  2500     01A6  0620               	xorwf	adc_change_channel@channel,w
  2501     01A7  0421               	iorwf	adc_change_channel@channel+1,w
  2502     01A8  1D03               	btfss	3,2
  2503     01A9  29AB               	goto	u1731
  2504     01AA  29AC               	goto	u1730
  2505     01AB                     u1731:
  2506     01AB  29B5               	goto	l1844
  2507     01AC                     u1730:
  2508     01AC                     l1840:
  2509                           
  2510                           ;ADC_setup.c: 68:         ADCON0bits.CHS = 0b0111;
  2511     01AC  081F               	movf	31,w	;volatile
  2512     01AD  39C3               	andlw	-61
  2513     01AE  381C               	iorlw	28
  2514     01AF  009F               	movwf	31	;volatile
  2515     01B0                     l1842:
  2516                           
  2517                           ;ADC_setup.c: 69:         ANSEL = ANSEL | 0b10000000;
  2518     01B0  1683               	bsf	3,5	;RP0=1, select bank3
  2519     01B1  1703               	bsf	3,6	;RP1=1, select bank3
  2520     01B2  0808               	movf	8,w	;volatile
  2521     01B3  3880               	iorlw	128
  2522     01B4  0088               	movwf	8	;volatile
  2523     01B5                     l1844:
  2524                           
  2525                           ;ADC_setup.c: 71:     if(channel == 8){
  2526     01B5  3008               	movlw	8
  2527     01B6  1283               	bcf	3,5	;RP0=0, select bank0
  2528     01B7  1303               	bcf	3,6	;RP1=0, select bank0
  2529     01B8  0620               	xorwf	adc_change_channel@channel,w
  2530     01B9  0421               	iorwf	adc_change_channel@channel+1,w
  2531     01BA  1D03               	btfss	3,2
  2532     01BB  29BD               	goto	u1741
  2533     01BC  29BE               	goto	u1740
  2534     01BD                     u1741:
  2535     01BD  29C7               	goto	l1850
  2536     01BE                     u1740:
  2537     01BE                     l1846:
  2538                           
  2539                           ;ADC_setup.c: 72:         ADCON0bits.CHS = 0b1000;
  2540     01BE  081F               	movf	31,w	;volatile
  2541     01BF  39C3               	andlw	-61
  2542     01C0  3820               	iorlw	32
  2543     01C1  009F               	movwf	31	;volatile
  2544     01C2                     l1848:
  2545                           
  2546                           ;ADC_setup.c: 73:         ANSELH = ANSELH | 0b00000001;
  2547     01C2  1683               	bsf	3,5	;RP0=1, select bank3
  2548     01C3  1703               	bsf	3,6	;RP1=1, select bank3
  2549     01C4  0809               	movf	9,w	;volatile
  2550     01C5  3801               	iorlw	1
  2551     01C6  0089               	movwf	9	;volatile
  2552     01C7                     l1850:
  2553                           
  2554                           ;ADC_setup.c: 75:     if(channel == 9){
  2555     01C7  3009               	movlw	9
  2556     01C8  1283               	bcf	3,5	;RP0=0, select bank0
  2557     01C9  1303               	bcf	3,6	;RP1=0, select bank0
  2558     01CA  0620               	xorwf	adc_change_channel@channel,w
  2559     01CB  0421               	iorwf	adc_change_channel@channel+1,w
  2560     01CC  1D03               	btfss	3,2
  2561     01CD  29CF               	goto	u1751
  2562     01CE  29D0               	goto	u1750
  2563     01CF                     u1751:
  2564     01CF  29D9               	goto	l1856
  2565     01D0                     u1750:
  2566     01D0                     l1852:
  2567                           
  2568                           ;ADC_setup.c: 76:         ADCON0bits.CHS = 0b1001;
  2569     01D0  081F               	movf	31,w	;volatile
  2570     01D1  39C3               	andlw	-61
  2571     01D2  3824               	iorlw	36
  2572     01D3  009F               	movwf	31	;volatile
  2573     01D4                     l1854:
  2574                           
  2575                           ;ADC_setup.c: 77:         ANSELH = ANSELH | 0b00000010;
  2576     01D4  1683               	bsf	3,5	;RP0=1, select bank3
  2577     01D5  1703               	bsf	3,6	;RP1=1, select bank3
  2578     01D6  0809               	movf	9,w	;volatile
  2579     01D7  3802               	iorlw	2
  2580     01D8  0089               	movwf	9	;volatile
  2581     01D9                     l1856:
  2582                           
  2583                           ;ADC_setup.c: 79:     if(channel == 10){
  2584     01D9  300A               	movlw	10
  2585     01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2586     01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2587     01DC  0620               	xorwf	adc_change_channel@channel,w
  2588     01DD  0421               	iorwf	adc_change_channel@channel+1,w
  2589     01DE  1D03               	btfss	3,2
  2590     01DF  29E1               	goto	u1761
  2591     01E0  29E2               	goto	u1760
  2592     01E1                     u1761:
  2593     01E1  29EB               	goto	l1862
  2594     01E2                     u1760:
  2595     01E2                     l1858:
  2596                           
  2597                           ;ADC_setup.c: 80:         ADCON0bits.CHS = 0b1010;
  2598     01E2  081F               	movf	31,w	;volatile
  2599     01E3  39C3               	andlw	-61
  2600     01E4  3828               	iorlw	40
  2601     01E5  009F               	movwf	31	;volatile
  2602     01E6                     l1860:
  2603                           
  2604                           ;ADC_setup.c: 81:         ANSELH = ANSELH | 0b00000100;
  2605     01E6  1683               	bsf	3,5	;RP0=1, select bank3
  2606     01E7  1703               	bsf	3,6	;RP1=1, select bank3
  2607     01E8  0809               	movf	9,w	;volatile
  2608     01E9  3804               	iorlw	4
  2609     01EA  0089               	movwf	9	;volatile
  2610     01EB                     l1862:
  2611                           
  2612                           ;ADC_setup.c: 83:     if(channel == 11){
  2613     01EB  300B               	movlw	11
  2614     01EC  1283               	bcf	3,5	;RP0=0, select bank0
  2615     01ED  1303               	bcf	3,6	;RP1=0, select bank0
  2616     01EE  0620               	xorwf	adc_change_channel@channel,w
  2617     01EF  0421               	iorwf	adc_change_channel@channel+1,w
  2618     01F0  1D03               	btfss	3,2
  2619     01F1  29F3               	goto	u1771
  2620     01F2  29F4               	goto	u1770
  2621     01F3                     u1771:
  2622     01F3  29FD               	goto	l1868
  2623     01F4                     u1770:
  2624     01F4                     l1864:
  2625                           
  2626                           ;ADC_setup.c: 84:         ADCON0bits.CHS = 0b1011;
  2627     01F4  081F               	movf	31,w	;volatile
  2628     01F5  39C3               	andlw	-61
  2629     01F6  382C               	iorlw	44
  2630     01F7  009F               	movwf	31	;volatile
  2631     01F8                     l1866:
  2632                           
  2633                           ;ADC_setup.c: 85:         ANSELH = ANSELH | 0b00001000;
  2634     01F8  1683               	bsf	3,5	;RP0=1, select bank3
  2635     01F9  1703               	bsf	3,6	;RP1=1, select bank3
  2636     01FA  0809               	movf	9,w	;volatile
  2637     01FB  3808               	iorlw	8
  2638     01FC  0089               	movwf	9	;volatile
  2639     01FD                     l1868:
  2640                           
  2641                           ;ADC_setup.c: 87:     if(channel == 12){
  2642     01FD  300C               	movlw	12
  2643     01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2644     01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2645     0200  0620               	xorwf	adc_change_channel@channel,w
  2646     0201  0421               	iorwf	adc_change_channel@channel+1,w
  2647     0202  1D03               	btfss	3,2
  2648     0203  2A05               	goto	u1781
  2649     0204  2A06               	goto	u1780
  2650     0205                     u1781:
  2651     0205  2A0F               	goto	l1874
  2652     0206                     u1780:
  2653     0206                     l1870:
  2654                           
  2655                           ;ADC_setup.c: 88:         ADCON0bits.CHS = 0b1100;
  2656     0206  081F               	movf	31,w	;volatile
  2657     0207  39C3               	andlw	-61
  2658     0208  3830               	iorlw	48
  2659     0209  009F               	movwf	31	;volatile
  2660     020A                     l1872:
  2661                           
  2662                           ;ADC_setup.c: 89:         ANSELH = ANSELH | 0b00010000;
  2663     020A  1683               	bsf	3,5	;RP0=1, select bank3
  2664     020B  1703               	bsf	3,6	;RP1=1, select bank3
  2665     020C  0809               	movf	9,w	;volatile
  2666     020D  3810               	iorlw	16
  2667     020E  0089               	movwf	9	;volatile
  2668     020F                     l1874:
  2669                           
  2670                           ;ADC_setup.c: 91:     if(channel == 13){
  2671     020F  300D               	movlw	13
  2672     0210  1283               	bcf	3,5	;RP0=0, select bank0
  2673     0211  1303               	bcf	3,6	;RP1=0, select bank0
  2674     0212  0620               	xorwf	adc_change_channel@channel,w
  2675     0213  0421               	iorwf	adc_change_channel@channel+1,w
  2676     0214  1D03               	btfss	3,2
  2677     0215  2A17               	goto	u1791
  2678     0216  2A18               	goto	u1790
  2679     0217                     u1791:
  2680     0217  2A21               	goto	l174
  2681     0218                     u1790:
  2682     0218                     l1876:
  2683                           
  2684                           ;ADC_setup.c: 92:         ADCON0bits.CHS = 0b1101;
  2685     0218  081F               	movf	31,w	;volatile
  2686     0219  39C3               	andlw	-61
  2687     021A  3834               	iorlw	52
  2688     021B  009F               	movwf	31	;volatile
  2689     021C                     l1878:
  2690                           
  2691                           ;ADC_setup.c: 93:         ANSELH = ANSELH | 0b00100000;
  2692     021C  1683               	bsf	3,5	;RP0=1, select bank3
  2693     021D  1703               	bsf	3,6	;RP1=1, select bank3
  2694     021E  0809               	movf	9,w	;volatile
  2695     021F  3820               	iorlw	32
  2696     0220  0089               	movwf	9	;volatile
  2697     0221                     l174:
  2698     0221  0008               	return
  2699     0222                     __end_of_adc_change_channel:
  2700                           
  2701                           	psect	text10
  2702     0367                     __ptext10:	
  2703 ;; *************** function ___awmod *****************
  2704 ;; Defined at:
  2705 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;  divisor         2   15[BANK0 ] int 
  2708 ;;  dividend        2   17[BANK0 ] int 
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;  sign            1   21[BANK0 ] unsigned char 
  2711 ;;  counter         1   20[BANK0 ] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  2   15[BANK0 ] int 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2721 ;;      Params:         0       4       0       0       0
  2722 ;;      Locals:         0       2       0       0       0
  2723 ;;      Temps:          0       1       0       0       0
  2724 ;;      Totals:         0       7       0       0       0
  2725 ;;Total ram usage:        7 bytes
  2726 ;; Hardware stack levels used: 1
  2727 ;; Hardware stack levels required when called: 2
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735     0367                     ___awmod:	
  2736                           ;psect for function ___awmod
  2737                           
  2738     0367                     l1664:	
  2739                           ;incstack = 0
  2740                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2741                           
  2742     0367  1283               	bcf	3,5	;RP0=0, select bank0
  2743     0368  1303               	bcf	3,6	;RP1=0, select bank0
  2744     0369  01B5               	clrf	___awmod@sign
  2745     036A                     l1666:
  2746     036A  1FB2               	btfss	___awmod@dividend+1,7
  2747     036B  2B6D               	goto	u1471
  2748     036C  2B6E               	goto	u1470
  2749     036D                     u1471:
  2750     036D  2B75               	goto	l1672
  2751     036E                     u1470:
  2752     036E                     l1668:
  2753     036E  09B1               	comf	___awmod@dividend,f
  2754     036F  09B2               	comf	___awmod@dividend+1,f
  2755     0370  0AB1               	incf	___awmod@dividend,f
  2756     0371  1903               	skipnz
  2757     0372  0AB2               	incf	___awmod@dividend+1,f
  2758     0373                     l1670:
  2759     0373  01B5               	clrf	___awmod@sign
  2760     0374  0AB5               	incf	___awmod@sign,f
  2761     0375                     l1672:
  2762     0375  1FB0               	btfss	___awmod@divisor+1,7
  2763     0376  2B78               	goto	u1481
  2764     0377  2B79               	goto	u1480
  2765     0378                     u1481:
  2766     0378  2B7E               	goto	l1676
  2767     0379                     u1480:
  2768     0379                     l1674:
  2769     0379  09AF               	comf	___awmod@divisor,f
  2770     037A  09B0               	comf	___awmod@divisor+1,f
  2771     037B  0AAF               	incf	___awmod@divisor,f
  2772     037C  1903               	skipnz
  2773     037D  0AB0               	incf	___awmod@divisor+1,f
  2774     037E                     l1676:
  2775     037E  082F               	movf	___awmod@divisor,w
  2776     037F  0430               	iorwf	___awmod@divisor+1,w
  2777     0380  1903               	btfsc	3,2
  2778     0381  2B83               	goto	u1491
  2779     0382  2B84               	goto	u1490
  2780     0383                     u1491:
  2781     0383  2BB3               	goto	l1694
  2782     0384                     u1490:
  2783     0384                     l1678:
  2784     0384  01B4               	clrf	___awmod@counter
  2785     0385  0AB4               	incf	___awmod@counter,f
  2786     0386  2B92               	goto	l1684
  2787     0387                     l1680:
  2788     0387  3001               	movlw	1
  2789     0388                     u1505:
  2790     0388  1003               	clrc
  2791     0389  0DAF               	rlf	___awmod@divisor,f
  2792     038A  0DB0               	rlf	___awmod@divisor+1,f
  2793     038B  3EFF               	addlw	-1
  2794     038C  1D03               	skipz
  2795     038D  2B88               	goto	u1505
  2796     038E                     l1682:
  2797     038E  3001               	movlw	1
  2798     038F  00B3               	movwf	??___awmod
  2799     0390  0833               	movf	??___awmod,w
  2800     0391  07B4               	addwf	___awmod@counter,f
  2801     0392                     l1684:
  2802     0392  1FB0               	btfss	___awmod@divisor+1,7
  2803     0393  2B95               	goto	u1511
  2804     0394  2B96               	goto	u1510
  2805     0395                     u1511:
  2806     0395  2B87               	goto	l1680
  2807     0396                     u1510:
  2808     0396                     l1686:
  2809     0396  0830               	movf	___awmod@divisor+1,w
  2810     0397  0232               	subwf	___awmod@dividend+1,w
  2811     0398  1D03               	skipz
  2812     0399  2B9C               	goto	u1525
  2813     039A  082F               	movf	___awmod@divisor,w
  2814     039B  0231               	subwf	___awmod@dividend,w
  2815     039C                     u1525:
  2816     039C  1C03               	skipc
  2817     039D  2B9F               	goto	u1521
  2818     039E  2BA0               	goto	u1520
  2819     039F                     u1521:
  2820     039F  2BA6               	goto	l1690
  2821     03A0                     u1520:
  2822     03A0                     l1688:
  2823     03A0  082F               	movf	___awmod@divisor,w
  2824     03A1  02B1               	subwf	___awmod@dividend,f
  2825     03A2  0830               	movf	___awmod@divisor+1,w
  2826     03A3  1C03               	skipc
  2827     03A4  03B2               	decf	___awmod@dividend+1,f
  2828     03A5  02B2               	subwf	___awmod@dividend+1,f
  2829     03A6                     l1690:
  2830     03A6  3001               	movlw	1
  2831     03A7                     u1535:
  2832     03A7  1003               	clrc
  2833     03A8  0CB0               	rrf	___awmod@divisor+1,f
  2834     03A9  0CAF               	rrf	___awmod@divisor,f
  2835     03AA  3EFF               	addlw	-1
  2836     03AB  1D03               	skipz
  2837     03AC  2BA7               	goto	u1535
  2838     03AD                     l1692:
  2839     03AD  3001               	movlw	1
  2840     03AE  02B4               	subwf	___awmod@counter,f
  2841     03AF  1D03               	btfss	3,2
  2842     03B0  2BB2               	goto	u1541
  2843     03B1  2BB3               	goto	u1540
  2844     03B2                     u1541:
  2845     03B2  2B96               	goto	l1686
  2846     03B3                     u1540:
  2847     03B3                     l1694:
  2848     03B3  0835               	movf	___awmod@sign,w
  2849     03B4  1903               	btfsc	3,2
  2850     03B5  2BB7               	goto	u1551
  2851     03B6  2BB8               	goto	u1550
  2852     03B7                     u1551:
  2853     03B7  2BBD               	goto	l1698
  2854     03B8                     u1550:
  2855     03B8                     l1696:
  2856     03B8  09B1               	comf	___awmod@dividend,f
  2857     03B9  09B2               	comf	___awmod@dividend+1,f
  2858     03BA  0AB1               	incf	___awmod@dividend,f
  2859     03BB  1903               	skipnz
  2860     03BC  0AB2               	incf	___awmod@dividend+1,f
  2861     03BD                     l1698:
  2862     03BD  0832               	movf	___awmod@dividend+1,w
  2863     03BE  00B0               	movwf	?___awmod+1
  2864     03BF  0831               	movf	___awmod@dividend,w
  2865     03C0  00AF               	movwf	?___awmod
  2866     03C1                     l474:
  2867     03C1  0008               	return
  2868     03C2                     __end_of___awmod:
  2869                           
  2870                           	psect	text11
  2871     0463                     __ptext11:	
  2872 ;; *************** function _Lcd_Write_String *****************
  2873 ;; Defined at:
  2874 ;;		line 103 in file "LCD.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  a               2    3[BANK0 ] PTR unsigned char 
  2877 ;;		 -> display(3), STR_1(6), 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  i               2    8[BANK0 ] int 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         0       2       0       0       0
  2890 ;;      Locals:         0       2       0       0       0
  2891 ;;      Temps:          0       3       0       0       0
  2892 ;;      Totals:         0       7       0       0       0
  2893 ;;Total ram usage:        7 bytes
  2894 ;; Hardware stack levels used: 1
  2895 ;; Hardware stack levels required when called: 4
  2896 ;; This function calls:
  2897 ;;		_Lcd_Write_Char
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903     0463                     _Lcd_Write_String:	
  2904                           ;psect for function _Lcd_Write_String
  2905                           
  2906     0463                     l1986:	
  2907                           ;incstack = 0
  2908                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2909                           
  2910                           
  2911                           ;LCD.c: 104:     int i;;LCD.c: 105:     for (i = 0; a[i] != '\0'; i++)
  2912     0463  1283               	bcf	3,5	;RP0=0, select bank0
  2913     0464  1303               	bcf	3,6	;RP1=0, select bank0
  2914     0465  01A8               	clrf	Lcd_Write_String@i
  2915     0466  01A9               	clrf	Lcd_Write_String@i+1
  2916     0467  2C8C               	goto	l1992
  2917     0468                     l1988:
  2918                           
  2919                           ;LCD.c: 106:         Lcd_Write_Char(a[i]);
  2920     0468  0828               	movf	Lcd_Write_String@i,w
  2921     0469  0723               	addwf	Lcd_Write_String@a,w
  2922     046A  00A6               	movwf	??_Lcd_Write_String+1
  2923     046B  0824               	movf	Lcd_Write_String@a+1,w
  2924     046C  00A5               	movwf	??_Lcd_Write_String
  2925     046D  1803               	skipnc
  2926     046E  0AA5               	incf	??_Lcd_Write_String,f
  2927     046F  1FA8               	btfss	Lcd_Write_String@i,7
  2928     0470  2C72               	goto	u1990
  2929     0471  03A5               	decf	??_Lcd_Write_String,f
  2930     0472                     u1990:
  2931     0472  1283               	bcf	3,5	;RP0=0, select bank0
  2932     0473  1303               	bcf	3,6	;RP1=0, select bank0
  2933     0474  0825               	movf	??_Lcd_Write_String,w
  2934     0475  00A7               	movwf	??_Lcd_Write_String+2
  2935     0476  0827               	movf	??_Lcd_Write_String+2,w
  2936     0477  00FF               	movwf	btemp+1
  2937     0478  0826               	movf	??_Lcd_Write_String+1,w
  2938     0479  0084               	movwf	4
  2939     047A  120A  118A  2556  120A  118A  	fcall	stringtab
  2940     047F  120A  118A  2620  120A  118A  	fcall	_Lcd_Write_Char
  2941     0484                     l1990:
  2942     0484  3001               	movlw	1
  2943     0485  1283               	bcf	3,5	;RP0=0, select bank0
  2944     0486  1303               	bcf	3,6	;RP1=0, select bank0
  2945     0487  07A8               	addwf	Lcd_Write_String@i,f
  2946     0488  1803               	skipnc
  2947     0489  0AA9               	incf	Lcd_Write_String@i+1,f
  2948     048A  3000               	movlw	0
  2949     048B  07A9               	addwf	Lcd_Write_String@i+1,f
  2950     048C                     l1992:
  2951     048C  0828               	movf	Lcd_Write_String@i,w
  2952     048D  0723               	addwf	Lcd_Write_String@a,w
  2953     048E  00A6               	movwf	??_Lcd_Write_String+1
  2954     048F  0824               	movf	Lcd_Write_String@a+1,w
  2955     0490  00A5               	movwf	??_Lcd_Write_String
  2956     0491  1803               	skipnc
  2957     0492  0AA5               	incf	??_Lcd_Write_String,f
  2958     0493  1FA8               	btfss	Lcd_Write_String@i,7
  2959     0494  2C96               	goto	u2000
  2960     0495  03A5               	decf	??_Lcd_Write_String,f
  2961     0496                     u2000:
  2962     0496  1283               	bcf	3,5	;RP0=0, select bank0
  2963     0497  1303               	bcf	3,6	;RP1=0, select bank0
  2964     0498  0825               	movf	??_Lcd_Write_String,w
  2965     0499  00A7               	movwf	??_Lcd_Write_String+2
  2966     049A  0827               	movf	??_Lcd_Write_String+2,w
  2967     049B  00FF               	movwf	btemp+1
  2968     049C  0826               	movf	??_Lcd_Write_String+1,w
  2969     049D  0084               	movwf	4
  2970     049E  120A  118A  2556  120A  118A  	fcall	stringtab
  2971     04A3  3A00               	xorlw	0
  2972     04A4  1D03               	skipz
  2973     04A5  2CA7               	goto	u2011
  2974     04A6  2CA8               	goto	u2010
  2975     04A7                     u2011:
  2976     04A7  2C68               	goto	l1988
  2977     04A8                     u2010:
  2978     04A8                     l127:
  2979     04A8  0008               	return
  2980     04A9                     __end_of_Lcd_Write_String:
  2981                           
  2982                           	psect	text12
  2983     0620                     __ptext12:	
  2984 ;; *************** function _Lcd_Write_Char *****************
  2985 ;; Defined at:
  2986 ;;		line 95 in file "LCD.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  a               1    wreg     unsigned char 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  a               1    2[BANK0 ] unsigned char 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0, pclath, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3000 ;;      Params:         0       0       0       0       0
  3001 ;;      Locals:         0       1       0       0       0
  3002 ;;      Temps:          0       1       0       0       0
  3003 ;;      Totals:         0       2       0       0       0
  3004 ;;Total ram usage:        2 bytes
  3005 ;; Hardware stack levels used: 1
  3006 ;; Hardware stack levels required when called: 3
  3007 ;; This function calls:
  3008 ;;		_Lcd_Port
  3009 ;; This function is called by:
  3010 ;;		_Lcd_Write_String
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014     0620                     _Lcd_Write_Char:	
  3015                           ;psect for function _Lcd_Write_Char
  3016                           
  3017                           
  3018                           ;incstack = 0
  3019                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3020                           ;Lcd_Write_Char@a stored from wreg
  3021     0620  1283               	bcf	3,5	;RP0=0, select bank0
  3022     0621  1303               	bcf	3,6	;RP1=0, select bank0
  3023     0622  00A2               	movwf	Lcd_Write_Char@a
  3024     0623                     l1786:
  3025                           
  3026                           ;LCD.c: 96:     PORTCbits.RC4 = 1;
  3027     0623  1607               	bsf	7,4	;volatile
  3028     0624                     l1788:
  3029                           
  3030                           ;LCD.c: 97:     Lcd_Port(a);
  3031     0624  0822               	movf	Lcd_Write_Char@a,w
  3032     0625  120A  118A  24E5  120A  118A  	fcall	_Lcd_Port
  3033     062A                     l1790:
  3034                           
  3035                           ;LCD.c: 98:     PORTCbits.RC5 = 1;
  3036     062A  1283               	bcf	3,5	;RP0=0, select bank0
  3037     062B  1303               	bcf	3,6	;RP1=0, select bank0
  3038     062C  1687               	bsf	7,5	;volatile
  3039     062D                     l1792:
  3040                           
  3041                           ;LCD.c: 99:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3042     062D  300C               	movlw	12
  3043     062E  1283               	bcf	3,5	;RP0=0, select bank0
  3044     062F  1303               	bcf	3,6	;RP1=0, select bank0
  3045     0630  00A1               	movwf	??_Lcd_Write_Char
  3046     0631                     u2127:
  3047     0631  0BA1               	decfsz	??_Lcd_Write_Char,f
  3048     0632  2E31               	goto	u2127
  3049     0633  0000               	nop
  3050     0634                     l1794:
  3051                           
  3052                           ;LCD.c: 100:     PORTCbits.RC5 = 0;
  3053     0634  1283               	bcf	3,5	;RP0=0, select bank0
  3054     0635  1303               	bcf	3,6	;RP1=0, select bank0
  3055     0636  1287               	bcf	7,5	;volatile
  3056     0637                     l121:
  3057     0637  0008               	return
  3058     0638                     __end_of_Lcd_Write_Char:
  3059                           
  3060                           	psect	text13
  3061     05C9                     __ptext13:	
  3062 ;; *************** function _Lcd_Set_Cursor *****************
  3063 ;; Defined at:
  3064 ;;		line 68 in file "LCD.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;  a               1    wreg     unsigned char 
  3067 ;;  b               1    4[BANK0 ] unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  a               1    5[BANK0 ] unsigned char 
  3070 ;;  temp            1    6[BANK0 ] unsigned char 
  3071 ;;  y               1    0        unsigned char 
  3072 ;;  z               1    0        unsigned char 
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0, pclath, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3082 ;;      Params:         0       1       0       0       0
  3083 ;;      Locals:         0       2       0       0       0
  3084 ;;      Temps:          0       0       0       0       0
  3085 ;;      Totals:         0       3       0       0       0
  3086 ;;Total ram usage:        3 bytes
  3087 ;; Hardware stack levels used: 1
  3088 ;; Hardware stack levels required when called: 4
  3089 ;; This function calls:
  3090 ;;		_Lcd_Cmd
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096     05C9                     _Lcd_Set_Cursor:	
  3097                           ;psect for function _Lcd_Set_Cursor
  3098                           
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3102                           ;Lcd_Set_Cursor@a stored from wreg
  3103     05C9  1283               	bcf	3,5	;RP0=0, select bank0
  3104     05CA  1303               	bcf	3,6	;RP1=0, select bank0
  3105     05CB  00A5               	movwf	Lcd_Set_Cursor@a
  3106     05CC                     l1974:
  3107                           
  3108                           ;LCD.c: 69:     char temp, z, y;;LCD.c: 70:     if (a == 1) {
  3109     05CC  0325               	decf	Lcd_Set_Cursor@a,w
  3110     05CD  1D03               	btfss	3,2
  3111     05CE  2DD0               	goto	u1971
  3112     05CF  2DD1               	goto	u1970
  3113     05D0                     u1971:
  3114     05D0  2DDB               	goto	l1980
  3115     05D1                     u1970:
  3116     05D1                     l1976:
  3117                           
  3118                           ;LCD.c: 71:         temp = 0x80 + b - 1;
  3119     05D1  0824               	movf	Lcd_Set_Cursor@b,w
  3120     05D2  3E7F               	addlw	127
  3121     05D3  00A6               	movwf	Lcd_Set_Cursor@temp
  3122     05D4                     l1978:
  3123                           
  3124                           ;LCD.c: 72:         Lcd_Cmd(temp);
  3125     05D4  0826               	movf	Lcd_Set_Cursor@temp,w
  3126     05D5  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3127                           
  3128                           ;LCD.c: 73:     } else if (a == 2) {
  3129     05DA  2DEA               	goto	l115
  3130     05DB                     l1980:
  3131     05DB  3002               	movlw	2
  3132     05DC  0625               	xorwf	Lcd_Set_Cursor@a,w
  3133     05DD  1D03               	btfss	3,2
  3134     05DE  2DE0               	goto	u1981
  3135     05DF  2DE1               	goto	u1980
  3136     05E0                     u1981:
  3137     05E0  2DEA               	goto	l115
  3138     05E1                     u1980:
  3139     05E1                     l1982:
  3140                           
  3141                           ;LCD.c: 74:         temp = 0xC0 + b - 1;
  3142     05E1  0824               	movf	Lcd_Set_Cursor@b,w
  3143     05E2  3EBF               	addlw	191
  3144     05E3  00A6               	movwf	Lcd_Set_Cursor@temp
  3145     05E4                     l1984:
  3146                           
  3147                           ;LCD.c: 75:         Lcd_Cmd(temp);
  3148     05E4  0826               	movf	Lcd_Set_Cursor@temp,w
  3149     05E5  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3150     05EA                     l115:
  3151     05EA  0008               	return
  3152     05EB                     __end_of_Lcd_Set_Cursor:
  3153                           
  3154                           	psect	text14
  3155     03C2                     __ptext14:	
  3156 ;; *************** function _Lcd_Init *****************
  3157 ;; Defined at:
  3158 ;;		line 79 in file "LCD.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;		None
  3161 ;; Auto vars:     Size  Location     Type
  3162 ;;		None
  3163 ;; Return value:  Size  Location     Type
  3164 ;;                  1    wreg      void 
  3165 ;; Registers used:
  3166 ;;		wreg, status,2, status,0, pclath, cstack
  3167 ;; Tracked objects:
  3168 ;;		On entry : 0/0
  3169 ;;		On exit  : 0/0
  3170 ;;		Unchanged: 0/0
  3171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3172 ;;      Params:         0       0       0       0       0
  3173 ;;      Locals:         0       0       0       0       0
  3174 ;;      Temps:          0       2       0       0       0
  3175 ;;      Totals:         0       2       0       0       0
  3176 ;;Total ram usage:        2 bytes
  3177 ;; Hardware stack levels used: 1
  3178 ;; Hardware stack levels required when called: 4
  3179 ;; This function calls:
  3180 ;;		_Lcd_Cmd
  3181 ;;		_Lcd_Port
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187     03C2                     _Lcd_Init:	
  3188                           ;psect for function _Lcd_Init
  3189                           
  3190     03C2                     l1960:	
  3191                           ;incstack = 0
  3192                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3193                           
  3194                           
  3195                           ;LCD.c: 80:     Lcd_Port(0x00);
  3196     03C2  3000               	movlw	0
  3197     03C3  120A  118A  24E5  120A  118A  	fcall	_Lcd_Port
  3198     03C8                     l1962:
  3199                           
  3200                           ;LCD.c: 81:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3201     03C8  301A               	movlw	26
  3202     03C9  1283               	bcf	3,5	;RP0=0, select bank0
  3203     03CA  1303               	bcf	3,6	;RP1=0, select bank0
  3204     03CB  00A5               	movwf	??_Lcd_Init+1
  3205     03CC  30F7               	movlw	247
  3206     03CD  00A4               	movwf	??_Lcd_Init
  3207     03CE                     u2137:
  3208     03CE  0BA4               	decfsz	??_Lcd_Init,f
  3209     03CF  2BCE               	goto	u2137
  3210     03D0  0BA5               	decfsz	??_Lcd_Init+1,f
  3211     03D1  2BCE               	goto	u2137
  3212     03D2  2BD3               	nop2
  3213     03D3                     l1964:
  3214                           
  3215                           ;LCD.c: 82:     Lcd_Cmd(0x030);
  3216     03D3  3030               	movlw	48
  3217     03D4  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3218                           
  3219                           ;LCD.c: 83:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3220     03D9  3007               	movlw	7
  3221     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  3222     03DB  1303               	bcf	3,6	;RP1=0, select bank0
  3223     03DC  00A5               	movwf	??_Lcd_Init+1
  3224     03DD  307C               	movlw	124
  3225     03DE  00A4               	movwf	??_Lcd_Init
  3226     03DF                     u2147:
  3227     03DF  0BA4               	decfsz	??_Lcd_Init,f
  3228     03E0  2BDF               	goto	u2147
  3229     03E1  0BA5               	decfsz	??_Lcd_Init+1,f
  3230     03E2  2BDF               	goto	u2147
  3231     03E3  0000               	nop
  3232     03E4                     l1966:
  3233                           
  3234                           ;LCD.c: 84:     Lcd_Cmd(0x030);
  3235     03E4  3030               	movlw	48
  3236     03E5  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3237     03EA                     l1968:
  3238                           
  3239                           ;LCD.c: 85:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  3240     03EA  3041               	movlw	65
  3241     03EB  1283               	bcf	3,5	;RP0=0, select bank0
  3242     03EC  1303               	bcf	3,6	;RP1=0, select bank0
  3243     03ED  00A4               	movwf	??_Lcd_Init
  3244     03EE                     u2157:
  3245     03EE  0BA4               	decfsz	??_Lcd_Init,f
  3246     03EF  2BEE               	goto	u2157
  3247     03F0  2BF1               	nop2
  3248                           
  3249                           ;LCD.c: 86:     Lcd_Cmd(0x030);
  3250     03F1  3030               	movlw	48
  3251     03F2  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3252                           
  3253                           ;LCD.c: 87:     Lcd_Cmd(0x38);
  3254     03F7  3038               	movlw	56
  3255     03F8  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3256                           
  3257                           ;LCD.c: 88:     Lcd_Cmd(0x08);
  3258     03FD  3008               	movlw	8
  3259     03FE  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3260                           
  3261                           ;LCD.c: 89:     Lcd_Cmd(0x01);
  3262     0403  3001               	movlw	1
  3263     0404  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3264                           
  3265                           ;LCD.c: 90:     Lcd_Cmd(0x06);
  3266     0409  3006               	movlw	6
  3267     040A  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3268                           
  3269                           ;LCD.c: 91:     Lcd_Cmd(0x0C);
  3270     040F  300C               	movlw	12
  3271     0410  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3272     0415                     l1970:
  3273                           
  3274                           ;LCD.c: 92:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  3275     0415  3020               	movlw	32
  3276     0416  1283               	bcf	3,5	;RP0=0, select bank0
  3277     0417  1303               	bcf	3,6	;RP1=0, select bank0
  3278     0418  00A4               	movwf	??_Lcd_Init
  3279     0419                     u2167:
  3280     0419  0BA4               	decfsz	??_Lcd_Init,f
  3281     041A  2C19               	goto	u2167
  3282     041B  0000               	nop
  3283     041C                     l118:
  3284     041C  0008               	return
  3285     041D                     __end_of_Lcd_Init:
  3286                           
  3287                           	psect	text15
  3288     064E                     __ptext15:	
  3289 ;; *************** function _Lcd_Clear *****************
  3290 ;; Defined at:
  3291 ;;		line 63 in file "LCD.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, pclath, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3305 ;;      Params:         0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0
  3308 ;;      Totals:         0       0       0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used: 1
  3311 ;; Hardware stack levels required when called: 4
  3312 ;; This function calls:
  3313 ;;		_Lcd_Cmd
  3314 ;; This function is called by:
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319     064E                     _Lcd_Clear:	
  3320                           ;psect for function _Lcd_Clear
  3321                           
  3322     064E                     l1972:	
  3323                           ;incstack = 0
  3324                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3325                           
  3326                           
  3327                           ;LCD.c: 64:     Lcd_Cmd(0);
  3328     064E  3000               	movlw	0
  3329     064F  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3330                           
  3331                           ;LCD.c: 65:     Lcd_Cmd(1);
  3332     0654  3001               	movlw	1
  3333     0655  120A  118A  25EB  120A  118A  	fcall	_Lcd_Cmd
  3334     065A                     l109:
  3335     065A  0008               	return
  3336     065B                     __end_of_Lcd_Clear:
  3337                           
  3338                           	psect	text16
  3339     05EB                     __ptext16:	
  3340 ;; *************** function _Lcd_Cmd *****************
  3341 ;; Defined at:
  3342 ;;		line 55 in file "LCD.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  a               1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  a               1    3[BANK0 ] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, pclath, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3356 ;;      Params:         0       0       0       0       0
  3357 ;;      Locals:         0       1       0       0       0
  3358 ;;      Temps:          0       2       0       0       0
  3359 ;;      Totals:         0       3       0       0       0
  3360 ;;Total ram usage:        3 bytes
  3361 ;; Hardware stack levels used: 1
  3362 ;; Hardware stack levels required when called: 3
  3363 ;; This function calls:
  3364 ;;		_Lcd_Port
  3365 ;; This function is called by:
  3366 ;;		_Lcd_Clear
  3367 ;;		_Lcd_Set_Cursor
  3368 ;;		_Lcd_Init
  3369 ;;		_Lcd_Shift_Right
  3370 ;;		_Lcd_Shift_Left
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374     05EB                     _Lcd_Cmd:	
  3375                           ;psect for function _Lcd_Cmd
  3376                           
  3377                           
  3378                           ;incstack = 0
  3379                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3380                           ;Lcd_Cmd@a stored from wreg
  3381     05EB  1283               	bcf	3,5	;RP0=0, select bank0
  3382     05EC  1303               	bcf	3,6	;RP1=0, select bank0
  3383     05ED  00A3               	movwf	Lcd_Cmd@a
  3384     05EE                     l1776:
  3385                           
  3386                           ;LCD.c: 56:     PORTCbits.RC4 = 0;
  3387     05EE  1207               	bcf	7,4	;volatile
  3388     05EF                     l1778:
  3389                           
  3390                           ;LCD.c: 57:     Lcd_Port(a);
  3391     05EF  0823               	movf	Lcd_Cmd@a,w
  3392     05F0  120A  118A  24E5  120A  118A  	fcall	_Lcd_Port
  3393     05F5                     l1780:
  3394                           
  3395                           ;LCD.c: 58:     PORTCbits.RC5 = 1;
  3396     05F5  1283               	bcf	3,5	;RP0=0, select bank0
  3397     05F6  1303               	bcf	3,6	;RP1=0, select bank0
  3398     05F7  1687               	bsf	7,5	;volatile
  3399     05F8                     l1782:
  3400                           
  3401                           ;LCD.c: 59:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3402     05F8  3006               	movlw	6
  3403     05F9  1283               	bcf	3,5	;RP0=0, select bank0
  3404     05FA  1303               	bcf	3,6	;RP1=0, select bank0
  3405     05FB  00A2               	movwf	??_Lcd_Cmd+1
  3406     05FC  302F               	movlw	47
  3407     05FD  00A1               	movwf	??_Lcd_Cmd
  3408     05FE                     u2177:
  3409     05FE  0BA1               	decfsz	??_Lcd_Cmd,f
  3410     05FF  2DFE               	goto	u2177
  3411     0600  0BA2               	decfsz	??_Lcd_Cmd+1,f
  3412     0601  2DFE               	goto	u2177
  3413     0602  2E03               	nop2
  3414     0603                     l1784:
  3415                           
  3416                           ;LCD.c: 60:     PORTCbits.RC5 = 0;
  3417     0603  1283               	bcf	3,5	;RP0=0, select bank0
  3418     0604  1303               	bcf	3,6	;RP1=0, select bank0
  3419     0605  1287               	bcf	7,5	;volatile
  3420     0606                     l106:
  3421     0606  0008               	return
  3422     0607                     __end_of_Lcd_Cmd:
  3423                           
  3424                           	psect	text17
  3425     04E5                     __ptext17:	
  3426 ;; *************** function _Lcd_Port *****************
  3427 ;; Defined at:
  3428 ;;		line 13 in file "LCD.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  a               1    wreg     unsigned char 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  a               1    0[BANK0 ] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  1    wreg      void 
  3435 ;; Registers used:
  3436 ;;		wreg
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3442 ;;      Params:         0       0       0       0       0
  3443 ;;      Locals:         0       1       0       0       0
  3444 ;;      Temps:          0       0       0       0       0
  3445 ;;      Totals:         0       1       0       0       0
  3446 ;;Total ram usage:        1 bytes
  3447 ;; Hardware stack levels used: 1
  3448 ;; Hardware stack levels required when called: 2
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_Lcd_Cmd
  3453 ;;		_Lcd_Init
  3454 ;;		_Lcd_Write_Char
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458     04E5                     _Lcd_Port:	
  3459                           ;psect for function _Lcd_Port
  3460                           
  3461                           
  3462                           ;incstack = 0
  3463                           ; Regs used in _Lcd_Port: [wreg]
  3464                           ;Lcd_Port@a stored from wreg
  3465     04E5  1283               	bcf	3,5	;RP0=0, select bank0
  3466     04E6  1303               	bcf	3,6	;RP1=0, select bank0
  3467     04E7  00A0               	movwf	Lcd_Port@a
  3468     04E8                     l1758:
  3469                           
  3470                           ;LCD.c: 14:     if (a & 1)
  3471     04E8  1C20               	btfss	Lcd_Port@a,0
  3472     04E9  2CEB               	goto	u1581
  3473     04EA  2CEC               	goto	u1580
  3474     04EB                     u1581:
  3475     04EB  2CEE               	goto	l87
  3476     04EC                     u1580:
  3477     04EC                     l1760:
  3478                           
  3479                           ;LCD.c: 15:         PORTDbits.RD0 = 1;
  3480     04EC  1408               	bsf	8,0	;volatile
  3481     04ED  2CEF               	goto	l88
  3482     04EE                     l87:	
  3483                           ;LCD.c: 16:     else
  3484                           
  3485                           
  3486                           ;LCD.c: 17:         PORTDbits.RD0 = 0;
  3487     04EE  1008               	bcf	8,0	;volatile
  3488     04EF                     l88:
  3489                           
  3490                           ;LCD.c: 19:     if (a & 2)
  3491     04EF  1CA0               	btfss	Lcd_Port@a,1
  3492     04F0  2CF2               	goto	u1591
  3493     04F1  2CF3               	goto	u1590
  3494     04F2                     u1591:
  3495     04F2  2CF5               	goto	l89
  3496     04F3                     u1590:
  3497     04F3                     l1762:
  3498                           
  3499                           ;LCD.c: 20:         PORTDbits.RD1 = 1;
  3500     04F3  1488               	bsf	8,1	;volatile
  3501     04F4  2CF6               	goto	l90
  3502     04F5                     l89:	
  3503                           ;LCD.c: 21:     else
  3504                           
  3505                           
  3506                           ;LCD.c: 22:         PORTDbits.RD1 = 0;
  3507     04F5  1088               	bcf	8,1	;volatile
  3508     04F6                     l90:
  3509                           
  3510                           ;LCD.c: 24:     if (a & 4)
  3511     04F6  1D20               	btfss	Lcd_Port@a,2
  3512     04F7  2CF9               	goto	u1601
  3513     04F8  2CFA               	goto	u1600
  3514     04F9                     u1601:
  3515     04F9  2CFC               	goto	l91
  3516     04FA                     u1600:
  3517     04FA                     l1764:
  3518                           
  3519                           ;LCD.c: 25:         PORTDbits.RD2 = 1;
  3520     04FA  1508               	bsf	8,2	;volatile
  3521     04FB  2CFD               	goto	l92
  3522     04FC                     l91:	
  3523                           ;LCD.c: 26:     else
  3524                           
  3525                           
  3526                           ;LCD.c: 27:         PORTDbits.RD2 = 0;
  3527     04FC  1108               	bcf	8,2	;volatile
  3528     04FD                     l92:
  3529                           
  3530                           ;LCD.c: 29:     if (a & 8)
  3531     04FD  1DA0               	btfss	Lcd_Port@a,3
  3532     04FE  2D00               	goto	u1611
  3533     04FF  2D01               	goto	u1610
  3534     0500                     u1611:
  3535     0500  2D03               	goto	l93
  3536     0501                     u1610:
  3537     0501                     l1766:
  3538                           
  3539                           ;LCD.c: 30:         PORTDbits.RD3 = 1;
  3540     0501  1588               	bsf	8,3	;volatile
  3541     0502  2D04               	goto	l94
  3542     0503                     l93:	
  3543                           ;LCD.c: 31:     else
  3544                           
  3545                           
  3546                           ;LCD.c: 32:         PORTDbits.RD3 = 0;
  3547     0503  1188               	bcf	8,3	;volatile
  3548     0504                     l94:
  3549                           
  3550                           ;LCD.c: 34:     if (a & 16)
  3551     0504  1E20               	btfss	Lcd_Port@a,4
  3552     0505  2D07               	goto	u1621
  3553     0506  2D08               	goto	u1620
  3554     0507                     u1621:
  3555     0507  2D0A               	goto	l95
  3556     0508                     u1620:
  3557     0508                     l1768:
  3558                           
  3559                           ;LCD.c: 35:         PORTDbits.RD4 = 1;
  3560     0508  1608               	bsf	8,4	;volatile
  3561     0509  2D0B               	goto	l96
  3562     050A                     l95:	
  3563                           ;LCD.c: 36:     else
  3564                           
  3565                           
  3566                           ;LCD.c: 37:         PORTDbits.RD4 = 0;
  3567     050A  1208               	bcf	8,4	;volatile
  3568     050B                     l96:
  3569                           
  3570                           ;LCD.c: 39:     if (a & 32)
  3571     050B  1EA0               	btfss	Lcd_Port@a,5
  3572     050C  2D0E               	goto	u1631
  3573     050D  2D0F               	goto	u1630
  3574     050E                     u1631:
  3575     050E  2D11               	goto	l97
  3576     050F                     u1630:
  3577     050F                     l1770:
  3578                           
  3579                           ;LCD.c: 40:         PORTDbits.RD5 = 1;
  3580     050F  1688               	bsf	8,5	;volatile
  3581     0510  2D12               	goto	l98
  3582     0511                     l97:	
  3583                           ;LCD.c: 41:     else
  3584                           
  3585                           
  3586                           ;LCD.c: 42:         PORTDbits.RD5 = 0;
  3587     0511  1288               	bcf	8,5	;volatile
  3588     0512                     l98:
  3589                           
  3590                           ;LCD.c: 44:     if (a & 64)
  3591     0512  1F20               	btfss	Lcd_Port@a,6
  3592     0513  2D15               	goto	u1641
  3593     0514  2D16               	goto	u1640
  3594     0515                     u1641:
  3595     0515  2D18               	goto	l99
  3596     0516                     u1640:
  3597     0516                     l1772:
  3598                           
  3599                           ;LCD.c: 45:         PORTDbits.RD6 = 1;
  3600     0516  1708               	bsf	8,6	;volatile
  3601     0517  2D19               	goto	l100
  3602     0518                     l99:	
  3603                           ;LCD.c: 46:     else
  3604                           
  3605                           
  3606                           ;LCD.c: 47:         PORTDbits.RD6 = 0;
  3607     0518  1308               	bcf	8,6	;volatile
  3608     0519                     l100:
  3609                           
  3610                           ;LCD.c: 49:     if (a & 128)
  3611     0519  1FA0               	btfss	Lcd_Port@a,7
  3612     051A  2D1C               	goto	u1651
  3613     051B  2D1D               	goto	u1650
  3614     051C                     u1651:
  3615     051C  2D1F               	goto	l101
  3616     051D                     u1650:
  3617     051D                     l1774:
  3618                           
  3619                           ;LCD.c: 50:         PORTDbits.RD7 = 1;
  3620     051D  1788               	bsf	8,7	;volatile
  3621     051E  2D20               	goto	l103
  3622     051F                     l101:	
  3623                           ;LCD.c: 51:     else
  3624                           
  3625                           
  3626                           ;LCD.c: 52:         PORTDbits.RD7 = 0;
  3627     051F  1388               	bcf	8,7	;volatile
  3628     0520                     l103:
  3629     0520  0008               	return
  3630     0521                     __end_of_Lcd_Port:
  3631                           
  3632                           	psect	text18
  3633     0607                     __ptext18:	
  3634 ;; *************** function _isr *****************
  3635 ;; Defined at:
  3636 ;;		line 91 in file "main.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3650 ;;      Params:         0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0
  3652 ;;      Temps:          2       0       0       0       0
  3653 ;;      Totals:         2       0       0       0       0
  3654 ;;Total ram usage:        2 bytes
  3655 ;; Hardware stack levels used: 1
  3656 ;; Hardware stack levels required when called: 1
  3657 ;; This function calls:
  3658 ;;		_adc_read
  3659 ;; This function is called by:
  3660 ;;		Interrupt level 1
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664     0607                     _isr:	
  3665                           ;psect for function _isr
  3666                           
  3667     0607                     i1l1728:
  3668                           
  3669                           ;main.c: 92:     if (PIR1bits.ADIF == 1){
  3670     0607  1283               	bcf	3,5	;RP0=0, select bank0
  3671     0608  1303               	bcf	3,6	;RP1=0, select bank0
  3672     0609  1F0C               	btfss	12,6	;volatile
  3673     060A  2E0C               	goto	u157_21
  3674     060B  2E0D               	goto	u157_20
  3675     060C                     u157_21:
  3676     060C  2E19               	goto	i1l75
  3677     060D                     u157_20:
  3678     060D                     i1l1730:
  3679                           
  3680                           ;main.c: 93:         adc_var = adc_read();
  3681     060D  120A  118A  265B  120A  118A  	fcall	_adc_read
  3682     0612  0871               	movf	?_adc_read+1,w
  3683     0613  1283               	bcf	3,5	;RP0=0, select bank0
  3684     0614  1303               	bcf	3,6	;RP1=0, select bank0
  3685     0615  00C8               	movwf	_adc_var+1
  3686     0616  0870               	movf	?_adc_read,w
  3687     0617  00C7               	movwf	_adc_var
  3688     0618                     i1l1732:
  3689                           
  3690                           ;main.c: 94:         PIR1bits.ADIF = 0;
  3691     0618  130C               	bcf	12,6	;volatile
  3692     0619                     i1l75:
  3693     0619  0875               	movf	??_isr+1,w
  3694     061A  008A               	movwf	10
  3695     061B  0E74               	swapf	??_isr,w
  3696     061C  0083               	movwf	3
  3697     061D  0EFE               	swapf	btemp,f
  3698     061E  0E7E               	swapf	btemp,w
  3699     061F  0009               	retfie
  3700     0620                     __end_of_isr:
  3701                           
  3702                           	psect	intentry
  3703     0004                     __pintentry:	
  3704                           ;incstack = 0
  3705                           ; Regs used in _isr: [wreg+pclath+cstack]
  3706                           
  3707     0004                     interrupt_function:
  3708     007E                     saved_w	set	btemp
  3709     0004  00FE               	movwf	btemp
  3710     0005  0E03               	swapf	3,w
  3711     0006  00F4               	movwf	??_isr
  3712     0007  080A               	movf	10,w
  3713     0008  00F5               	movwf	??_isr+1
  3714     0009  120A  118A  2E07   	ljmp	_isr
  3715                           
  3716                           	psect	text19
  3717     065B                     __ptext19:	
  3718 ;; *************** function _adc_read *****************
  3719 ;; Defined at:
  3720 ;;		line 34 in file "ADC_setup.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2    0[COMMON] int 
  3727 ;; Registers used:
  3728 ;;		wreg
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3734 ;;      Params:         2       0       0       0       0
  3735 ;;      Locals:         0       0       0       0       0
  3736 ;;      Temps:          2       0       0       0       0
  3737 ;;      Totals:         4       0       0       0       0
  3738 ;;Total ram usage:        4 bytes
  3739 ;; Hardware stack levels used: 1
  3740 ;; This function calls:
  3741 ;;		Nothing
  3742 ;; This function is called by:
  3743 ;;		_isr
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747     065B                     _adc_read:	
  3748                           ;psect for function _adc_read
  3749                           
  3750     065B                     i1l1660:	
  3751                           ;incstack = 0
  3752                           ; Regs used in _adc_read: [wreg]
  3753                           
  3754                           
  3755                           ;ADC_setup.c: 35:     return ADRESH;
  3756     065B  1283               	bcf	3,5	;RP0=0, select bank0
  3757     065C  1303               	bcf	3,6	;RP1=0, select bank0
  3758     065D  081E               	movf	30,w	;volatile
  3759     065E  00F2               	movwf	??_adc_read
  3760     065F  01F3               	clrf	??_adc_read+1
  3761     0660  0872               	movf	??_adc_read,w
  3762     0661  00F0               	movwf	?_adc_read
  3763     0662  0873               	movf	??_adc_read+1,w
  3764     0663  00F1               	movwf	?_adc_read+1
  3765     0664                     i1l157:
  3766     0664  0008               	return
  3767     0665                     __end_of_adc_read:
  3768     007E                     btemp	set	126	;btemp
  3769     007E                     wtemp0	set	126
  3770                           
  3771                           	psect	idloc
  3772                           
  3773                           ;Config register IDLOC0 @ 0x2000
  3774                           ;	unspecified, using default values
  3775     2000                     	org	8192
  3776     2000  3FFF               	dw	16383
  3777                           
  3778                           ;Config register IDLOC1 @ 0x2001
  3779                           ;	unspecified, using default values
  3780     2001                     	org	8193
  3781     2001  3FFF               	dw	16383
  3782                           
  3783                           ;Config register IDLOC2 @ 0x2002
  3784                           ;	unspecified, using default values
  3785     2002                     	org	8194
  3786     2002  3FFF               	dw	16383
  3787                           
  3788                           ;Config register IDLOC3 @ 0x2003
  3789                           ;	unspecified, using default values
  3790     2003                     	org	8195
  3791     2003  3FFF               	dw	16383
  3792                           
  3793                           	psect	config
  3794                           
  3795                           ;Config register CONFIG1 @ 0x2007
  3796                           ;	Oscillator Selection bits
  3797                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3798                           ;	Watchdog Timer Enable bit
  3799                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3800                           ;	Power-up Timer Enable bit
  3801                           ;	PWRTE = OFF, PWRT disabled
  3802                           ;	RE3/MCLR pin function select bit
  3803                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3804                           ;	Code Protection bit
  3805                           ;	CP = OFF, Program memory code protection is disabled
  3806                           ;	Data Code Protection bit
  3807                           ;	CPD = OFF, Data memory code protection is disabled
  3808                           ;	Brown Out Reset Selection bits
  3809                           ;	BOREN = OFF, BOR disabled
  3810                           ;	Internal External Switchover bit
  3811                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3812                           ;	Fail-Safe Clock Monitor Enabled bit
  3813                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3814                           ;	Low Voltage Programming Enable bit
  3815                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3816                           ;	In-Circuit Debugger Mode bit
  3817                           ;	DEBUG = 0x1, unprogramme  3818     2007                     	org	8199
  3819     2007  20D4               	dw	8404
  3820                           
  3821                           ;Config register CONFIG2 @ 0x2008
  3822                           ;	Brown-out Reset Selection bit
  3823                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3824                           ;	Flash Program Memory Self Write Enable bits
  3825                           ;	WRT = OFF, Write protection off
  3826     2008                     	org	8200
  3827     2008  3FFF               	dw	16383

Data Sizes:
    Strings     15
    Constant    10
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     37      47
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_2(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 3
		 -> display(BANK0[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 6
		 -> display(BANK0[3]), STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_adc_read

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _map_adc_volt->___awdiv
    ___awdiv->___wmul
    _adc_init->_adc_change_channel
    ___awmod->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    8837
                                             31 BANK0      6     6      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                             ___wmul
                           _adc_init
                       _map_adc_volt
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1655
                                             14 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _map_adc_volt                                        10     0     10    2279
                                             15 BANK0     10     0     10
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     756
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             3     1      2     645
                                              2 BANK0      3     1      2
                 _adc_change_channel
 ---------------------------------------------------------------------------------
 (2) _adc_change_channel                                   2     0      2     524
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     600
                                             15 BANK0      7     3      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     589
                                              3 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     279
                                              1 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     651
                                              4 BANK0      3     2      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     527
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     279
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     279
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     248
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              4 COMMON     2     2      0
                           _adc_read
 ---------------------------------------------------------------------------------
 (5) _adc_read                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
     ___wmul (ARG)
   ___awmod
     ___awdiv (ARG)
     ___wmul (ARG)
   ___wmul
   _adc_init
     _adc_change_channel
   _map_adc_volt
     ___awdiv
     ___wmul
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _adc_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      39       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      2F       5       58.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      39      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jul 26 20:45:04 2023

                         pc 0002                          l90 04F6                          l91 04FC  
                        l92 04FD                          l93 0503                          l94 0504  
                        l78 064D                          l95 050A                          l87 04EE  
                        l96 050B                          l88 04EF                          l97 0511  
                        l89 04F5                          l98 0512                          l99 0518  
              ___awdiv@sign 002C                          fsr 0004         ___wmul@multiplicand 0022  
                       l100 0519                         l101 051F                         l103 0520  
                       l121 0637                         l106 0606                         l115 05EA  
                       l109 065A                         l118 041C                         l310 05A5  
                       l127 04A8                         l304 02FD                         l154 05C8  
                       l308 058D                         l174 0221                         l194 0555  
                       l461 0366                         l474 03C1                         l580 0462  
                       l590 04E4                         _isr 0607                         fsr0 0004  
                       indf 0000                ___awmod@sign 0035                        l2000 0228  
                      l2010 0239                        l2002 022E                        l2020 026A  
                      l2012 0256                        l2004 0233                        l2022 026F  
                      l2014 025E                        l2110 024B                        l2006 0238  
                      l2040 02A6                        l2032 028D                        l2016 0262  
                      l2042 02A9                        l2034 0297                        l2018 0266  
                      l2050 02E9                        l2044 02D7                        l2036 029D  
                      l2028 0271                        l2052 02F9                        l2060 0023  
                      l2046 02DC                        l2038 02A2                        l2070 0092  
                      l2062 0046                        l2048 02E0                        l2080 0113  
                      l2072 00C1                        l2064 0051                        l1450 02FE  
                      l2082 0119                        l2074 00E1                        l2066 0055  
                      l1460 0310                        l1452 0301                        l2084 011A  
                      l2076 00E9                        l2068 0072                        l1470 0324  
                      l1462 0315                        l1454 0305                        l2078 0108  
                      l1800 0133                        l1480 034A                        l1472 032B  
                      l1464 0319                        l1456 030A                        l1810 0152  
                      l1802 0138                        l1490 0362                        l1482 034B  
                      l1474 032F                        l1466 031B                        l1458 030C  
                      l1820 016D                        l1812 0156                        l1804 0140  
                      l1484 0352                        l1476 0333                        l1468 0321  
                      l1900 042A                        l1670 0373                        l1830 018C  
                      l1822 0176                        l1814 015B                        l1806 0144  
                      l1478 0344                        l1486 0358                        l1910 0450  
                      l1902 0431                        l1760 04EC                        l1680 0387  
                      l1672 0375                        l1664 0367                        l1840 01AC  
                      l1832 0191                        l1824 017A                        l1816 0164  
                      l1808 0149                        l1488 035D                        l1912 0451  
                      l1904 0435                        l1920 04A9                        l1770 050F  
                      l1762 04F3                        l1690 03A6                        l1682 038E  
                      l1674 0379                        l1666 036A                        l1850 01C7  
                      l1842 01B0                        l1834 019A                        l1826 017F  
                      l1818 0168                        l1914 0458                        l1906 0439  
                      l1930 04C3                        l1922 04B1                        l1772 0516  
                      l1764 04FA                        l1780 05F5                        l1692 03AD  
                      l1684 0392                        l1676 037E                        l1668 036E  
                      l1860 01E6                        l1852 01D0                        l1844 01B5  
                      l1836 019E                        l1828 0188                        l1908 044A  
                      l1916 045E                        l1932 04CD                        l1924 04B4  
                      l1774 051D                        l1766 0501                        l1758 04E8  
                      l1782 05F8                        l1790 062A                        l1686 0396  
                      l1678 0384                        l1694 03B3                        l1870 0206  
                      l1862 01EB                        l1854 01D4                        l1846 01BE  
                      l1838 01A3                        l1950 064C                        l1942 0638  
                      l1934 04D3                        l1926 04BB                        l1768 0508  
                      l1784 0603                        l1776 05EE                        l1960 03C2  
                      l1792 062D                        l1696 03B8                        l1688 03A0  
                      l1872 020A                        l1864 01F4                        l1856 01D9  
                      l1848 01C2                        l1952 05A6                        l1880 057F  
                      l1944 0644                        l1936 04DA                        l1928 04BF  
                      l1778 05EF                        l1970 0415                        l1962 03C8  
                      l1794 0634                        l1786 0623                        l1698 03BD  
                      l1874 020F                        l1866 01F8                        l1858 01E2  
                      l1954 05B3                        l1890 05A1                        l1882 0583  
                      l1946 0645                        l1938 04E0                        l1972 064E  
                      l1964 03D3                        l1980 05DB                        l1788 0624  
                      l1876 0218                        l1868 01FD                        l1796 0129  
                      l1956 05BE                        l1884 0587                        l1948 0646  
                      l1966 03E4                        l1982 05E1                        l1974 05CC  
                      l1990 0484                        l1878 021C                        l1798 0131  
                      l1958 05C1                        l1886 0594                        l1894 041D  
                      l1968 03EA                        l1984 05E4                        l1976 05D1  
                      l1992 048C                        l1888 059B                        l1896 0421  
                      l1978 05D4                        l1986 0463                        l1994 0521  
                      l1898 0427                        l1988 0468                        l1998 0225  
                      ?_isr 0070                        STR_1 0579                        STR_2 0570  
                      u2000 0496                        u1200 0358                        u1120 0305  
                      u1201 0357                        u1121 0304                        u2010 04A8  
                      u1210 035D                        u1130 0310                        u2011 04A7  
                      u1211 035C                        u1131 030F                        u1140 0321  
                      u2020 022E                        u1141 0320                        u2021 022D  
                      u2030 0266                        u2031 0265                        u1160 0333  
                      u2040 028C                        u1161 0332                        u2041 028B  
                      u2050 0297                        u1155 0325                        u2051 0296  
                      u2107 0120                        u1180 0344                        u2060 029D  
                      u2117 05C5                        u1181 0343                        u2061 029C  
                      u2045 0288                        u1510 0396                        u2070 02E9  
                      u2127 0631                        u1511 0395                        u1175 0334  
                      u2071 02E8                        u1600 04FA                        u1520 03A0  
                      u2080 02F9                        u1601 04F9                        u2137 03CE  
                      u1521 039F                        u1505 0388                        u1185 0340  
                      u2081 02F8                        u1610 0501                        u2090 0119  
                      u1611 0500                        u2147 03DF                        u1195 034C  
                      u2091 0118                        u1620 0508                        u1540 03B3  
                      u1700 0176                        u1621 0507                        u2157 03EE  
                      u1541 03B2                        u1525 039C                        u1701 0175  
                      u1630 050F                        u1550 03B8                        u1470 036E  
                      u1710 0188                        u1631 050E                        u2167 0419  
                      u1551 03B7                        u1535 03A7                        u1471 036D  
                      u1711 0187                        u1640 0516                        u1480 0379  
                      u1720 019A                        u1800 0587                        u1641 0515  
                      u2177 05FE                        u1481 0378                        u1721 0199  
                      u1801 0586                        u1650 051D                        u1490 0384  
                      u1730 01AC                        u1651 051C                        u1491 0383  
                      u1731 01AB                        u1580 04EC                        u1740 01BE  
                      u1660 0131                        u1900 045E                        u1581 04EB  
                      u1741 01BD                        u1661 0130                        u1901 045D  
                      u1590 04F3                        u1750 01D0                        u1670 0140  
                      u1830 05A1                        u1910 04B1                        u1591 04F2  
                      u1751 01CF                        u1671 013F                        u1831 05A0  
                      u1815 058E                        u1911 04B0                        u1760 01E2  
                      u1680 0152                        u1840 0427                        u1761 01E1  
                      u1681 0151                        u1825 0595                        u1841 0426  
                      u1770 01F4                        u1690 0164                        u1930 04C3  
                      u1771 01F3                        u1691 0163                        u1931 04C2  
                      u1780 0206                        u1860 0439                        u1940 04CD  
                      u1781 0205                        u1861 0438                        u1941 04CC  
                      u1925 04B5                        u1790 0218                        u1791 0217  
                      u1855 042B                        u1880 044A                        u1960 04E0  
                      u1881 0449                        u1961 04DF                        u1945 04C9  
                      u1970 05D1                        u1971 05D0                        u1875 043A  
                      u1955 04D4                        u1980 05E1                        u1981 05E0  
                      u1885 0446                        u1990 0472                        u1895 0452  
                      i1l75 0619           ?_Lcd_Write_String 0023                        _main 0023  
                      btemp 007E                        start 000C          ??_Lcd_Write_String 0025  
           __end_of_Lcd_Cmd 0607               ?_map_adc_volt 002F                       ??_isr 0074  
                     ?_main 0070             __end_of___awdiv 0367             __end_of___awmod 03C2  
                     _ANSEL 0188             ___awdiv@divisor 0026             __end_of___lwdiv 0463  
                     i1l157 0664             __end_of___lwmod 04E5             ___awdiv@counter 002B  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _PORTE 0009                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088             __end_of_dpowers 0570  
                     _setup 0638                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 02FE              ??_map_adc_volt 0039  
          __end_of_Lcd_Init 041D            __end_of_Lcd_Port 0521             __initialization 000F  
              __end_of_main 0129                      ??_main 003F                      _ADRESH 001E  
          ___awdiv@dividend 0028                      ?_setup 0070                      _ANSELH 0189  
          __end_of_adc_init 05C9            __end_of_adc_read 0665                      i1l1730 060D  
                    i1l1660 065B                      i1l1732 0618                      i1l1728 0607  
                    u157_20 060D                      u157_21 060C                   ??_Lcd_Cmd 0021  
 adc_change_channel@channel 0020                      ___wmul 057F                   ??___awdiv 002A  
                 ??___awmod 0033                   ??___lwdiv 0024                   ??___lwmod 002C  
          ___awdiv@quotient 002D             ___awmod@divisor 002F                      _select 0076  
           ___awmod@counter 0034                      saved_w 007E                   ??_sprintf 0035  
           Lcd_Set_Cursor@a 0025             Lcd_Set_Cursor@b 0024     __end_of__initialization 001F  
         __end_of_Lcd_Clear 065B              __pcstackCOMMON 0070               __end_of_setup 064E  
            _Lcd_Set_Cursor 05C9        __end_of_map_adc_volt 0556                   ?_Lcd_Init 0070  
                 ?_Lcd_Port 0070                     ??_setup 0020                  __pbssBANK0 0045  
                __pmaintext 0023                     ?___wmul 0020                  __pintentry 0004  
    __end_of_Lcd_Set_Cursor 05EB                   ?_adc_init 0022                   ?_adc_read 0070  
                ??_Lcd_Init 0024                  ??_Lcd_Port 0020                  __stringtab 0556  
            _Lcd_Write_Char 0620                     _Lcd_Cmd 05EB                     ___awdiv 02FE  
                   ___awmod 0367                     ___lwdiv 041D                     _adc_var 0047  
                   ___lwmod 04A9                     _bandera 0078             ?_Lcd_Set_Cursor 0024  
                ??_adc_init 0024                  ??_adc_read 0072                     __ptext1 0222  
                   __ptext2 04A9                     __ptext3 041D                     __ptext4 0638  
                   __ptext5 0521                     __ptext6 057F                     __ptext7 02FE  
                   __ptext8 05A6                     __ptext9 0129                     _display 004C  
                   _dpowers 0566            ___awmod@dividend 0031           map_adc_volt@value 002F  
                   _sprintf 0222      __end_of_Lcd_Write_Char 0638        end_of_initialization 001F  
                 Lcd_Port@a 0020                   _PORTCbits 0007                   _PORTDbits 0008  
      map_adc_volt@inputmax 0033        map_adc_volt@inputmin 0031             ?_Lcd_Write_Char 0070  
         Lcd_Write_String@a 0023           Lcd_Write_String@i 0028                _map_adc_volt 0521  
                 _Lcd_Clear 064E              __end_of___wmul 05A6            _Lcd_Write_String 0463  
__end_of_adc_change_channel 0222         start_initialization 000F                 __end_of_isr 0620  
                ?_Lcd_Clear 0070                    ??___wmul 0024             adc_init@channel 0022  
           Lcd_Write_Char@a 0022                 __pbssCOMMON 0076                   ___latbits 0002  
             __pcstackBANK0 0020                    ?_Lcd_Cmd 0070                 sprintf@flag 0039  
               sprintf@prec 003A            ___lwdiv@dividend 0022            ??_Lcd_Set_Cursor 0025  
                  ?___awdiv 0026                    ?___awmod 002F                    ?___lwdiv 0020  
                  ?___lwmod 0028                   __pstrings 0556            ___lwdiv@quotient 0026  
                  ?_sprintf 002E           interrupt_function 0004              ___wmul@product 0024  
                  _PIE1bits 008C                    Lcd_Cmd@a 0023                    _PIR1bits 000C  
               ??_Lcd_Clear 0024                  _ADCON0bits 001F                 __stringbase 0565  
                _ADCON1bits 009F           ___wmul@multiplier 0020            ??_Lcd_Write_Char 0021  
                  _Lcd_Init 03C2                    _Lcd_Port 04E5    __end_of_Lcd_Write_String 04A9  
        __end_of__stringtab 0566                    _adc_init 05A6                    _adc_read 065B  
                sprintf@val 003B                    _dec_volt 004A                    _cen_volt 0049  
           ___lwdiv@divisor 0020             ___lwdiv@counter 0025                    __ptext10 0367  
                  __ptext11 0463                    __ptext12 0620                    __ptext13 05C9  
                  __ptext14 03C2                    __ptext15 064E                    __ptext16 05EB  
                  __ptext17 04E5                    __ptext18 0607                    __ptext19 065B  
        _adc_change_channel 0129         ?_adc_change_channel 0020          map_adc_volt@outmax 0037  
        map_adc_volt@outmin 0035                    _uni_volt 004B                    _voltage1 0045  
                _INTCONbits 000B        ??_adc_change_channel 0022                    intlevel1 0000  
                 sprintf@ap 0038                   sprintf@sp 003D            ___lwmod@dividend 002A  
                 stringcode 0560                  _OSCCONbits 008F          Lcd_Set_Cursor@temp 0026  
                  sprintf@c 003E                    sprintf@f 002E             ___lwmod@divisor 0028  
           ___lwmod@counter 002D                    stringdir 0560                    stringtab 0556  
